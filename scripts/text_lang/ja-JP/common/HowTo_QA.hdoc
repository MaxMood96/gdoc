[QADOC]


########## ITEM SECION #############


[QA]
ID: qa_incfd
Q: どのようにファイル記述子のオペレーティングシステムの制限を増やすのですか？

A: <p>TUNIXのようなオペレーティングシステムでは、システムレベルとプロセスレベルのファイル記述子の制限があります。
LiteSpeedサーバーは少数のサーバープロセスを使用してすべてのクライアントにサービスを提供し、各要求では最大4つのファイル記述子が必要になる場合があります。
したがって、サーバーが処理できる同時要求の最大数は、プロセスレベルのファイル記述子の制限によって制限される可能性があります。
この制限を高い値に設定することが重要です。</p>
<p>サーバーがrootユーザーによって起動された場合、サーバーの構成に基づいてこの制限を自動的に調整しようとします。
それ以外の場合は、この制限をroot特権で手動で調整する必要があります。</p>

<p>{cmd}ulimit -a{/}を使用して、プロセスファイル記述子あたりの現在の設定を確認してください。
この制限を変更するには、root特権が必要です。
マシンをリブートした後に自動的に制限を設定するために、スタートアップスクリプトにこの設定を入れることができます。</p> 

<ul>
	<li><p><strong>Linuxカーネル：</strong></p></li>
	開いているファイルのシステムレベルの制限を確認してください：<br>
	&nbsp;&nbsp;&nbsp;{cmd}more /proc/sys/fs/file-max{/}<br>
	それが低く見えたら、限界を以下のように増やしてください：<br>
	&nbsp;&nbsp;&nbsp;{cmd}echo 40000 > /proc/sys/fs/file-max{/}<br>
	カーネル2.2.xの場合は、次のものも必要です:<br>
	&nbsp;&nbsp;&nbsp;{cmd}echo 65535 > /proc/sys/fs/inode-max{/}<br>
	次に、現在のプロセス制限を次のように増加させます:<br>
	&nbsp;&nbsp;&nbsp;{cmd}ulimit -n 10000{/}<br>
	注：普通のユーザは、少なくともKernel 2.4.xでは{cmd} ulimit -n xxxx {/}を使って
    現在のプロセスの制限を変更することができます。
    しかし、以下の行を/etc/security/limits.confに追加する必要があります：<br>
	
	&nbsp;&nbsp;&nbsp;{cmd}soft nofile 2048{/}<br>
	&nbsp;&nbsp;&nbsp;{cmd}hard nofile 8192{/}<br><br>

	<li><p><strong>Solaris 2.4+:</strong></p></li>
	/etc/systemに次の行を追加する必要があります。:<br>
	* ファイル記述子にハードリミットを設定する： {cmd}set rlim_fd_max = XXXX{/}<br>
	* ファイル記述子にソフトリミットを設定する： {cmd}set rlim_fd_cur = XXXX{/}<br><br>
	
	<li><p><strong>FreeBSD:</strong></p></li>
	/boot/loader.confに次の行を追加します。<br>
	{cmd}set kern.maxfiles=XXXX{/}
</ul>

END_A


[END_QA]



[QA]
ID: qa_namevh
Q: 名前ベースのバーチャルホスティングを設定するには？

A: 名前ベースのバーチャルホスティングでは、あなたが持っているIPアドレスの数より多くのWebサイトをホストすることができます。
この場合、複数のドメイン名が同じIPアドレスを指しています。

名前ベースのバーチャルホスティングを設定するには、次のガイドラインを使用します。

<ol>
<li>DNSを正しく設定してください。
	<br>Webサイトのドメイン名をWebサーバーが使用するIPアドレスに転送します。
これは、通常、WebサイトのDNSゾーンに「A」という名前のエントリを追加することによって行われます。
</li>
<li>Web管理コンソールで設定します：
	<ol><li>Webサイトごとにバーチャルホストを作成します。</li>
	    <li>リスナーを作成します。<br>
	        1つのリスナーを作成して、すべてのローカルIPアドレスでリッスンすることができます。
            または、1つの特定のIPアドレスだけをリッスンする1つのリスナーで複数のリスナーを作成できます。
	    </li>
	    <li>バーチャルホストマッピングを割り当てます。<br>
            リスナー設定に移動し、{TBL=Listeners_Help#virtualHostMapping}テーブルの[編集]をクリックします。
            マッピングするバーチャルホストをすべて確認し、対応する{ITEM=Listeners_Help#domainName}を指定します。<br>
		注：{val}your.domain{/}は{val}www.your.domain{/}と{val}your.domain{/}の両方に一致します。
        主要な "www" ドメイン名には無視されます。
	    </li>
	  </ol>
</li>
</ol>
END_A


[END_QA]



[QA]
ID: qa_ipvh
Q: IPベースのバーチャルホスティングを設定するには？

A: IPベースのバーチャルホスティングには、各Webサイトに固有のIPアドレスが少なくとも1つ必要です。
1つのIPアドレスは1つのバーチャルホスト専用です。
これにより、 "http://192.168.0.1/index.html"のようなURLを持つバーチャルホストにアクセスすることができ、Webサーバーは対応するバーチャルホストコンテキストを使用してこの要求を処理します。
SSLを使用する場合は、IPベースのバーチャルホストごとに一意のSSL証明書を割り当てる必要があります。

<ol>
  <li>ホストするWebサイトごとに少なくとも1つのIPアドレスを割り当てます。<br>
     ヒント：1つのネットワークアダプタに複数のIPを割り当てるIPエイリアスを作成できます。</li>
  <li>DNSを正しく設定します。<br>ドメイン名を対応するIPアドレスに割り当てます。</li>
  <li>リスナーを作成します。 あなたには2つの選択肢があります：</li>
     <ul>
        <li>すべてのIPをリスンする1つのリスナーを作成し、上記のように1つのリスナーを共有するようにバーチャルホストのマッピングを構成します。</li>
	<li>別の選択肢は、各IPに対して1つのリスナーを作成することです。
        リスナーは、ワイルドカードドメイン名{val}*{/}を持つ対応するバーチャルホストにのみ割り当てます。<br>
        独自のSSL秘密鍵と証明書を各リスナーに割り当てることができるため、各Webサイトで独自の証明書を使用できます。
	</li>
    </ul>
</ol>

END_A


[END_QA]



[QA]
ID: qa_dos
Q: サービス拒否（DoS）攻撃と分散サービス拒否（DDoS）攻撃を軽減する方法は？

A: LiteSpeedサーバーは、HTTPプロトコルレベルでDoS攻撃とDDoS攻撃の影響を軽減し、さらにはそれを排除することができます。 以下の設定は、攻撃に役立ちます。

<ul>
  <li>{PAGE=ServTuning_Help}設定の下で：</li>
     <ol>
        <li>{ITEM=ServTuning_Help#maxReqURLLen}, 
			{ITEM=ServTuning_Help#maxReqHeaderSize},
			{ITEM=ServTuning_Help#maxReqBodySize},  
			{ITEM=ServTuning_Help#maxDynRespHeaderSize}
			 そして {ITEM=ServTuning_Help#maxDynRespSize}
           　を実際に必要な値を上回る値に設定します。 
           　これはメモリ使用量を減らし、悪い要求を迅速に識別するのに役立ちます。
        </li>
	<li>{val}30{/}の周りに{ITEM=ServTuning_Help#connTimeout}を設定します;<br>
	   {val}15{/}以下にで{ITEM=ServTuning_Help#keepAliveTimeout}を設定します;<br>
	   {ITEM=ServTuning_Help#maxKeepAliveReq}を少なくとも{val}100{/}以上に設定してください。<br>
	   これにより、できるだけ早く停止した接続を閉じ、他のクライアントが接続を利用できるようになります。
	</li>
     </ol>
     <br>
     
  <li>{PAGE=ServSecurity_Help}設定の下で：</li>
     <ol>
        <li>{TBL=ServSecurity_Help#accessControl} - {ITEM=ServSecurity_Help#accessControl_deny}があなたのWebサーバーを悪用するIPをブロックします。</li>
	<li>1つのIPアドレスからの同時接続数を制御するには、{TBL = ServSecurity_Help#perClientConnLimit}を使用します。
制限に達すると、WebサーバーはそのIPアドレスからの新規に受け入れられた接続を直ちに閉じ、次の保留中の接続に移動します。<br>

	    今日、ほとんどのWebブラウザは永続的な接続をサポートしています（1つの接続で複数のリクエストをパイプライン化しているため）、必要な接続数は非常に少ないです。
本質的に、1つの接続で十分です。 ただし、一部のWebブラウザは、ダウンロードを高速化するために追加の接続を確立しようとします。<br>

	    したがって、1つのIPから4〜10の接続を許可することをお勧めします。
それ以下の場合は、通常のWebサービスに影響する可能性があります。<br>

	    IPごとの制限により、Webサーバーはより一意のクライアントに対応できます。
一意のクライアントの最小数は、{ITEM=ServTuning_Help#maxConnections}をクライアントごとの最大接続数で除算して得られます。
	</li>
	<li>IPレベルの抑制を有効にする：<br>
	    {ITEM=ServSecurity_Help#outBandwidth}を{val}0{/}より大きく設定してください（0はスロットリングを無効にします）。
制限は、4KB/sec単位の最も近い境界まで切り上げられます。<br>
	
	    このようにして、制限されたネットワーク帯域幅は、高速ネットワーク接続を備えた数人のクライアントによって消費されることはありません。 より多くのクライアントにサービスされます。
	</li>
	<li>サーバーが異なるIPからの何百もの要求によって同じURLで浸水した場合、{TBL=Context_Help#generalContext}を作成してそのURLへのアクセスをブロックすることができます。
コンテキスト{ITEM=Context_Help#expuri}は、そのURLに一致するか、または{ITEM=Context_Help#allowBrowse}が{val}No{/}に設定されている必要があります。<br>
	    
	   たとえば、サーバーが "/foo/bar.html"で叩かれた場合、正確なURI={val}/foo/bar.html{/}のコンテキストを追加するか、URI={val}/foo/{/}は"/foo/"で始まるすべてのURLをブロックします。
	</li>
   </ol>
</ul>

END_A


[END_QA]



[QA]
ID: qa_gzip
Q: ネットワーク帯域幅を節約するためにGZIP圧縮を使用するには？

A: LiteSpeed Webサーバーは、静的および動的に生成されたコンテンツの圧縮応答を送信できます。
WebAdminコンソールから、サーバー（TBL=ServTuning_Help#gzipTuning）ページで設定できます。

<ul>
<li>{ITEM=ServTuning_Help#enableGzipCompress}設定は、静的コンテンツと動的コンテンツの両方に対する全体的なコントローラです。
</li>

<li>静的ファイルの要求が来ると、Webサーバーはまず、圧縮されていないファイルがあるディレクトリと同じディレクトリで、対応するgzip圧縮バージョンを探します。
圧縮されたファイルは、元のファイルよりも新しいファイルと小さい場合にのみ使用されます。
圧縮ファイルが存在しないか古い場合は、{ITEM=ServTuning_Help#gzipAutoUpdateStatic}が有効になっている場合、Webサーバは自動的にgzip圧縮ファイルを作成/更新できます。 <br>

圧縮はかなりサーバー集中型なので、Webサーバーは、次のルールに基づいて、圧縮率が高い可能性のあるファイルのみを圧縮します：<br>
 応答本文のMIMEタイプはテキストです；
ファイルサイズは{ITEM=ServTuning_Help#gzipMinFileSize}から{ITEM=ServTuning_Help#gzipMaxFileSize}の間です。
</li>

<li>Webサーバーは、動的に生成されたコンテンツに対しても実行時圧縮を実行できます。<br>

動的コンテンツの圧縮を有効にするには、{ITEM=ServTuning_Help#enableDynGzipCompress}と{ITEM=ServTuning_Help#enableGzipCompress}を{val}はい{/}に設定する必要があります。
</li>

<li>{ITEM=ServTuning_Help#gzipStaticCompressLevel}と{ITEM=ServTuning_Help#gzipCompressLevel}の範囲は次のとおりです。
{val}1{/}（より速い圧縮）から{val}9{/}（より良い圧縮）。
メモリやCPUサイクルなどの利用可能なハードウェアリソースに基づいてチューニングする必要があります。
</li>
</ul>
END_A


[END_QA]



[QA]
ID: qa_perf
Q: どのようにWebサーバーのパフォーマンスを測定するには？

A: まず、Webサーバーが最大のパフォーマンスを発揮できるようにチューニングされていることを確認します。
<ul>
   <li>{ITEM=ServSecurity_Help#outBandwidth}を{val}0{/}に設定してスロットルをオフにします。</li>
   <li>{ITEM=ServTuning_Help#maxKeepAliveReq}の値を{val}100000{/}のような大きな数値に設定します。</li>
   <li>{ITEM=ServTuning_Help#maxConnections}を可能な限り高く設定してください。</li>
   <li>1つのIPアドレスから必要な並行接続の数に応じて、{TBL=ServSecurity_Help#perClientConnLimit}の{ITEM=ServSecurity_Help#softLimit}と{ITEM=ServSecurity_Help#hardLimit}を{val}1000{/}以上に設定します。</li>
   <li>テストバーチャルホストの{ITEM=VirtualHosts_Help#allowSymbolLink}を{val}はい{/}に、{ITEM=VirtualHosts_Help#restricted}を{val}いいえ{/}に設定します</li>
</ul>

ベンチマークにはApacheBench、Httperf、AutoBenchの3つのツールがあります。
<ul>
  <li><strong>ApacheBenchを使う：</strong></li>
  	ApacheBenchは、Apache httpdにバンドルされているコマンドラインのパフォーマンステストツールです。
    これは、数百のHTTP / 1.0クライアントを同時にシミュレートして、サーバー上の同じリソースにアクセスすることができます。<br>
  	
	次のコマンドで簡単に実行できます：<br>
	
	{cmd}ab -n 10000 -c 100 http://localhost:8088/index.html{/}<br>

	キープアライブ要求を使用することができます<br>

	{cmd}ab -n 10000 -c 100 -k http://localhost:8088/index.html{/}<br>

	詳細については、Apacheのドキュメントを参照してください。<br><br>
	
   <li><strong>Httperfを使う：</strong></li>
   	httperfは、<a href="http://www.hpl.hp.com/personal/David_Mosberger/httperf.html"> http://www.hpl.hp.com/personal/David_Mosberger/httperf.html</a>から入手できます。<br>
   	
	HttperfはデフォルトでHTTP / 1.1プロトコルを使用し、常にキープアライブ要求を使用します。
    より多くのコマンドオプションがあります。詳しくは、そのドキュメントを参照してください。<br>
	
	次に例を示します:<br>
	
	{cmd}./httperf --server localhost --port 8088 --uri /index.html --rate 1000 --num-conn 100 --num-call 100 --timeout 50{/}<br><br>

   <li><strong>Autobenchを使う:</strong></li>
   	Autobenchは、Webサーバーのベンチマークプロセスを自動化する、httperfを呼び出す単純なPerlスクリプトです。<br>

	オートベンチは<a href="http://www.xenoclast.org/autobench/"> http://www.xenoclast.org/autobench/</a>から入手できます。詳細は、そのドキュメントを参照してください。 <br>
</ul>

サーバーとテストツールを同じマシン上で実行することはお勧めしません。実際の使用状況を反映していないからです。
また、テストツールはWebサーバーと同じCPUを共有しますので、そうした場合は考慮する必要があります。

2台以上のコンピュータを使用してLAN経由でテストを実行する方が良いです。
Webサーバーの実際のパフォーマンスを明らかにするには、ネットワークとクライアントマシンがボトルネックにならないようにする必要があります。
Gigabits LANまたは複数のスイッチ100Mb接続でテストを実行することを推奨します。
1台のマシンのみを使用してクライアントをシミュレートする場合は、サーバーマシンと同等かそれ以上のパワーを持つことを確認してください。

小さなファイルでテストを開始し、ネットワーク帯域幅が飽和するまで徐々にファイルサイズを増やします。
END_A

[END_QA]



[QA]
ID: qa_extapp
Q: 外部アプリケーション（Fast CGI、LSAPI アプリ、Webサーバー、またはサーブレットエンジン）を設定する方法は？

A: すべてのタイプの外部アプリケーションは、サーバーレベルまたはバーチャルホストレベルのいずれかで設定できます。
サーバーレベルのものはすべてのバーチャルホストで使用できます。<br>

<ul>
<li>
同じマシン上で実行されているFast CGIおよびLSAPIアプリケーションは、オンデマンドでWebサーバーによって開始できます。
このタイプのアプリケーションをローカル外部アプリケーションと呼びます。
Webサーバーによって開始されないアプリケーションは、同じマシン上で実行されている場合でも、リモート外部アプリケーションと呼ばれます。<br> 

Servlet Engineは、同じマシン上で実行されているかどうかに関係なく、手動で起動する必要があります。<br>
</li><br>
<li>

最初に外部アプリケーションを構成する必要があります。その後、他の場所でその名前で参照することができます。
{PAGE=ExtApp_Help}タブの下に、サーバーまたはバーチャルホストレベルで構成されます。<br> 

すべての外部アプリケーションについて、{ITEM=ExtApp_Help#extAppName}、{ITEM=ExtApp_Help#extAppAddress}、および{ITEM=ExtApp_Help#maxConns}を指定する必要があります。<br>

{ITEM=ExtApp_Help#extAppName}は、このアプリケーションを内部的に参照するために使用されます。
{ITEM=ExtApp_Help#extAppAddress}は、Webサーバーが接続する必要のあるアプリケーションによって使用されるソケットアドレスです。
{ITEM=ExtApp_Help#maxConns}は、外部アプリケーションがとる最大同時接続数を示します。

For a local external application, you also need to specify 
{ITEM=ExtApp_Help#extAppPath}, 
{ITEM=ExtApp_Help#backlog},
{ITEM=ExtApp_Help#instances}
and {ITEM=ExtApp_Help#env} (optional). <br>

{ITEM=ExtApp_Help#extAppPath}は、アプリケーションを起動するコマンドです。オプションのコマンド・パラメーターを指定することができます。
{ITEM=ExtApp_Help#backlog}は、リッスンするサーバーソケットのキューサイズです。
{ITEM=ExtApp_Help#instances}は、サーバーが生成するコピー（インスタンス）の数です。
{ITEM=ExtApp_Help#env}は、外部アプリケーションの追加の環境変数を指定します。<br>

</li>
<br>
<li>
マルチスレッド外部アプリケーションは、1つのプロセス内で複数の要求を同時に処理できます。
したがって、その種の外部アプリケーション用に複数のインスタンスを作成する必要はありません。
ただし、ほとんどの外部アプリケーションはマルチスレッドではなく、各プロセスは同時に1つの要求しか処理できません。
この場合、並行処理のレベルを上げるために、複数のインスタンスを作成する必要があります。<br>

{ITEM=ExtApp_Help#instances}は、Webサーバーが生成できるインスタンス（プロセス）の数を制御できます。
また、{ITEM=ExtApp_Help#maxConns}は、{ITEM=ExtApp_Help#instances}と一致するように設定する必要があります。 <br>

いくつかのシングルスレッドFast CGIプロセス自体は、子プロセスをフォークして、PHP Fast CGIの実装など、複数の要求を同時に処理できます。
そのタイプのFast CGIの場合、{ITEM=ExtApp_Help#instances}を{val}1{/}に設定し、Fast CGIの設定を使用して子プロセスをいくつ作成するかを制御します。
たとえば、PHPではこの目的で特別な{ITEM=ExtApp_Help#env}変数{val}PHP_FCGI_CHILDREN{/}を使用します。<br>
</li>
<br>
<li>
外部アプリケーションは直接使用することはできません。 {PAGE=ScriptHandler_Help}または{PAGE=Context_Help}ハンドラのいずれかに設定する必要があります。
スクリプトハンドラとして設定すると、Webサーバは、要求が{ITEM=ScriptHandler_Help#suffix}に一致する静的ファイルを参照する場合、要求をそのハンドラに転送します。
コンテキストハンドラとして設定すると、WebサーバはリクエストのURLがContext {ITEM=Context_Help#expuri}と一致する限りリクエストをリクエストに転送します。
</li>
</ul>
END_A

[END_QA]



[QA]
ID: qa_php
Q: PHPサポートを設定するには？

A: PHPはLiteSpeed Webサーバーで完全にサポートされているため、追加の設定は必要ありません。
通常、デフォルト設定を変更する必要はありません。
LiteSpeedでは、2種類のPHP SAPIインタフェースがサポートされています:<br>
<ul>
	<li>LiteSpeed</li>
    <li>FastCGI</li>
</ul>

<p>LiteSpeed SAPIは、当社のLSAPIプロトコルに基づいてLiteSpeed Web Serverと通信する新しいPHP SAPIモジュールです。
LiteSpeed SAPIは、FastCGI SAPIと似たアーキテクチャを2つの主要な拡張機能を備えています:
<ol>
<li>50％向上したパフォーマンス</li>
<li>Webサーバーの設定と.htaccessファイルを使用した動的なPHP設定の変更をサポートしています。</li>
</ol>
</p>

<p> 
LiteSpeed Webサーバーは、Webサーバープロセス内にPHPエンジンを埋め込んだApacheのmod_phpとは異なり、Fast CGIまたはLSAPIプロトコルを使用してスタンドアロンのPHPエンジンプロセスと通信します。
設定済みの最小限の機能を備えたビルド済みのPHP実行ファイルは、{cmd}[lsws_home]/fcgi-bin/php{/}にインストールされています。
追加の機能が必要な場合は、独自のカスタマイズされたPHP実行可能ファイルで置き換える必要があります。</p>

<p>PHPサポートは2つのステップで構成されています：
   1.外部PHPアプリケーションを追加する。
   2.手順1で定義したPHPアプリケーションを使用してスクリプトハンドラを追加します。</p>

<p>PHPアプリケーションはサーバーレベルまたはバーチャルホストレベルで定義することができ、サーバーレベルで定義されたアプリケーションはすべてのバーチャルホストで使用できます。
   PHPエンジンは、ローカルホスト上またはリモートマシン上で実行できます。
   ローカルマシン上で実行する場合、PHPプロセスはサードパーティのFastCGI/LSAPIマネージャまたはWebサーバー自体によって開始できます。後者が優先されます。</p>

<p>PHPアプリケーションの設定を追加/変更する前に、どのPHP SAPIがPHPバイナリに組み込まれているかを知る必要があります。
   コマンド：{cmd}[lsws_home]/fcgi-bin/php -v{/}は情報を表示します。
   LiteSpeed SAPIの場合は、LSAPIアプリケーションを定義し、CGI/FCGI SAPIの場合はFastCGIアプリケーションを定義する必要があります。
   </p>


<p>PHPアプリケーションが設定された後、PHPアプリケーションがPHPスクリプトを処理するためには、{PAGE=ScriptHandler_Help}を設定する必要があります。
   PHPスクリプトのデフォルトの{ITEM=ScriptHandler_Help#suffix}は{val}php{/}に設定されています；{ITEM=ScriptHandler_Help#shType}が{val}Fast CGI{/}または {val}LiteSpeed API{/}に設定されています；{ITEM = ScriptHandler_Help#shHandlerName}は、PHPアプリケーションの名前に設定されています。
   複数の接尾辞を{val}php、php4、phtml{/}のようなコンマ区切りリストで指定できます。
   {PAGE = ScriptHandler_Help}は、サーバーレベルまたはバーチャルホストレベルで設定できます。
   バーチャルホストレベルの設定は、同じサフィックスのサーバーレベルの設定を上書きします。</p> 

<p>LSAPI経由でPHPをカスタマイズするには、いくつかの環境変数があります。詳しくは、php/sapi/litespeedディレクトリのREADMEファイルを参照してください。 </p>

<p>PHP FCGIアプリケーションをカスタマイズするために使用できる環境変数はいくつかあります。：</p>
<ul>
	<li>{val}PHP_FCGI_CHILDREN=XX{/}</li>
	<p>これは、PHPエンジンプロセスが生成する子プロセスの数を制御します。
    {ITEM=ExtApp_Help#instances}またはこの環境変数を使用すると、PHPエンジンの並行性を制御できます。
    {ITEM=ExtApp_Help#maxConns}の設定は、子プロセスの数と同じ値に設定する必要があります。</p>
		
	<li>{val}PHP_FCGI_MAX_REQUESTS=XXXX{/}</li>
	<p>これは、各子プロセスが終了するまでに処理するリクエストの数を制御します。
    PHP内部のメモリリークを防ぎます。
    Webサーバーは、新しい子プロセスとの接続を再確立する必要があります。
    したがって、パフォーマンスを高めるためにできるだけ高く設定してください。</p>
		
	<li>{val}FCGI_WEB_SERVER_ADDRS=127.0.0.1,192.168.0.1{/}</li>
	<p>これは、TCPソケットが使用されているときにネットワーク経由でPHPエンジンに接続できる人を制御します。
    上の例では、127.0.0.1と192.168.0.1のみが許可されています。
    PHPエンジンが適切な{ITEM=ExtApp_Help#extAppAddress}設定でlocalhost上で実行されている場合、このオプションは必要ありません。
    UnixドメインソケットとTCPソケットの両方を、localhost上で実行するときに使用することができます。Unixドメインソケットは、パフォーマンスを向上させるために優先されます。
    TCPソケットを使用する必要がある場合は、{ITEM=ExtApp_Help#extAppAddress}を{val}localhost：XXXX{/}に設定して、PHPにローカルループバックインターフェイスだけをリッスンさせます。</p> 
</ul>
	
END_A

[END_QA]



[QA]
ID: qa_phplsapi
Q: LiteSpeed SAPIでPHPバイナリを構築するには？

A: 通常、ビルドされたバイナリに組み込まれていないPHPモジュールが必要な場合を除き、独自のPHPバイナリをビルドする必要はありません。<br>
<p>まず、最新のPHPソースコードをダウンロードする必要があります。
  展開されたソースコードツリーにphp / sapi / litespeed /ディレクトリが存在しない場合は、 
 <a href="http://www.litespeedtech.com/lsapi/">http://www.litespeedtech.com/lsapi/</a>
  </p>
<p>次に、{cmd}--with-litespeed{/}と必要なその他のオプションを指定してPHPを設定します。
  Fast CGI関連のオプション{cmd}--enable-fastcgi --enable-discard-path --disable-path-info-check{/}は{cmd}--with-litespeed{/}と一緒に使用しないでください。</p>
<p>{cmd}make{/}でPHPバイナリをビルドすると、コンパイルが成功した後、sapi/litespeed/directoryの下に "php"という実行ファイルがあります。
次に、コマンド{cmd}cp php/sapi/litespeed/php lsws/fcgi-bin/lsphp{/}を使用して新しいバイナリをコピーします。
FastCGIバージョンのPHPバイナリと区別するために、phpをlsphpに変更することをお勧めします。</p> 

<p>LiteSpeed PHPの動作を制御するために微調整可能な環境変数が2つあります。</p> 
<ul>
<li>PHP_LSAPI_CHILDREN  (デフォルトなし)</li>

<p>複数のリクエストを同時に処理するために、LiteSpeed Webサーバーは複数のPHPプロセスを起動することができます； または1つのプロセスを生成します。このプロセスでは、複数の要求を同時に処理するいくつかの子プロセスが作成されます。 

Webサーバーは、LSAPIアプリケーション構成で{ITEM=ExtApp_Help#instances}で指定されたPHPプロセスを作成します。
サーバによって起動される1つのPHPプロセスに対して、PHP_LSAPI_CHILDRENが設定されていない場合、子プロセスは作成されません。
PHP_LSAPI_CHILDRENが設定されている場合、PHP_LSAPI_CHILDRENで指定されたいくつかの子プロセスが生成されます。
通常、LSAPIアプリケーション用に設定された{ITEM=ExtApp_Help#maxConns}に一致する必要があります。ほとんどの場合、両方の値を100以上に設定しないでください。</p><br> 

<li>PHP_LSAPI_MAX_REQUESTS (デフォルト値：500)</li>

<p>これは、各子プロセスが終了するまでに処理するリクエストの数を制御します。
1つのプロセスが終了すると、別のプロセスが作成されます。
このチューニングは、メモリーリークを伴う複数のPHP関数が識別されているために必要です。
PHPプロセスが永遠に残っていたとすると、非常に効率が悪くなる可能性があります。</p>
</ul>

END_A

[END_QA]



[QA]
ID: qa_phpfcgi
Q: FCGI SAPIでPHPバイナリを構築するには？

A: あらかじめ構築されたバイナリにある特定のPHPモジュールが必要な場合を除き、通常はPHPバイナリをビルドする必要はありません。<br>

  独自のPHPバイナリをビルドする必要がある場合は、次の手順を参照してください：<br><br>

	最新のPHP配布パッケージをダウンロードしてください； <br>

  	PHP 4.3.4以降のリリースでは、858行と862行のソースコード{cmd}sapi/cgi/cgi_main.c{/}に小さな変更を加える必要があります。<br>
  <pre class="eg">
	if (env_path_info) {
		SG(request_info).request_uri = env_path_info;
	} else {
		SG(request_info).request_uri = env_script_name;
	} </pre>

コメントアウトしてelse句コードを置き換えて、次のようにします：
  <pre class="eg">
        SG(request_info).request_uri = env_script_name; </pre>

  次に、{cmd}--enable-fastcgi --enable-discard-path --disable-path-info-check{/}を使用して必要な他のオプションと共にphpを設定します。
  PHPのマニュアルやREADME.FastCGIの{cmd}--enable-discard-path --disable-path-info-check{/}オプションに関する記述は、Apacheにのみ適用されるので、無視してください。<br><br>
  PHPがうまく構築されたら、次のコマンドでパッケージに入っているPHPバイナリのバイナリを置き換えます：<br>
  {cmd}cp -f sapi/cgi/php [lsws_home]/fcgi-bin/php . {/}<br>
  あらかじめ構築されたPHP実行ファイルも、オプション{cmd}--with-config-file-path=../conf{/}で設定されます。このようにして、異なるPHPエンジンに対して異なるphp.iniを使用できます。
  単なる推薦です。
  デフォルトのphp.iniは{cmd}[lsws_home]/conf/php.ini{/}にあります。   
  </p>


END_A

[END_QA]



[QA]
ID: qa_phpacc
Q: PHPアクセラレータを設定するには？

A: 「PHPアクセラレータ」、「Turck MMCache」、「代替PHPキャッシュ（APC）」は、LiteSpeedでテストされ、うまく機能しています。
「Zendアクセラレータ」はうまく動作するはずです。
すべてのアクセラレータについて、PHP設定ファイル - php.iniを変更する必要があります。
あらかじめ構築されたPHPエンジンのデフォルトのphp.iniは、[lsws_home]/conf/php.iniにあります。<br> 
Litespeedインストーラは、事前に構築されたバイナリで "Turck MMCache"または "APC"を有効にすることができます。
インストール後に有効化、無効化、または切り替えを行う場合は、[lsws_home]/admin/misc/enable_phpa.shを実行してください。<br> 
PHPアクセラレータのインストール方法の詳細については、それぞれのベンダのマニュアルを参照してください。
END_A

[END_QA]



[QA]
ID: qa_suexec
Q: suEXECモードでCGI、FCGI、LSAPI、PHPを起動する方法は？

A: スクリプトが "suEXEC"モードで起動されると、スクリプトは、Webサーバープロセスが実行されているユーザー以外のユーザーのために実行されます。
これは、このスクリプトが所属する脆弱なスクリプトの被害を最小限に抑える共有ホスティング環境における重要なセキュリティ機能です。<br>
LiteSpeed Web Serverで "suEXEC"をオンにするのは簡単ですが、バーチャルホストを作成するときに "CGI set UID mode"を "DocRoot UID"に設定し、
ドキュメントルートディレクトリの所有者をターゲットユーザーに変更します。<br>
従来のCGIスクリプトでは、 "CGI File UID"を使用することもできますが、CGIスクリプトのユーザーIDがドキュメントのルートユーザーIDと異なる場合を除き、すべてのスクリプトで機能するので "DocRoot UID"をお勧めします。
END_A

SEE_ALSO:
[END_QA]



[QA]
ID: qa_sproxy
Q: LiteSpeed Web Serverをリバースプロキシサーバーとして設定する方法は？

A: LiteSpeed Web Serverは、HTTPプロトコルをサポートするWebサーバーまたはアプリケーションサーバーの前で実行されるトランスペアレントリバースプロキシサーバーとして使用でき、システム全体のスケーラビリティ、パフォーマンス、およびセキュリティを向上させることができます。<br>
次の手順に従ってWebAdminコンソールに設定してください：<br>

<ol>
	<li>{ITEM=ExtApp_Help#extAppType} {val}Webサーバー{/}を使用して{PAGE=ExtApp_Help}を定義します。
        {ITEM=ExtApp_Help#extAppAddress}に、バックエンドWebサーバーが使用するIPアドレスとポートを設定します。
	</li> 

	<li>2つの選択肢：<br>
	<ul>
		<li>定義された{PAGE=ExtApp_Help}に設定された{ITEM=Context_Help#proxyWebServer}を持つ{TBL=Context_Help#proxyContext}を定義します。</li>

		<li>定義された{PAGE=ExtApp_Help}に{ITEM=ScriptHandler_Help#shType} {val}Webサーバー{/}、{ITEM=ScriptHandler_Help#shHandlerName}を設定して{PAGE=ScriptHandler_Help}を定義してください。</li>
	</ul>
</li>
</ol>

	たとえば、Apacheがポート8080の同じサーバマシン上で実行されており、同じ{ITEM=VHGeneral_Help#docRoot}を指していると仮定すると、Apacheをmod_perlでCGIとして実行する代わりに、Perlスクリプトを処理することができます。</br>

	まず、{PAGE=ExtApp_Help}を定義し、{ITEM=ExtApp_Help#extAppType}を{val}Webサーバー{/}に、{ITEM=ExtApp_Help#extAppName}を{val}ApachePerl{/}に、{ITEM=ExtApp_Help#extAppAddress}から{val}localhost：8080{/}。<br> 
	次に、{PAGE=ScriptHandler_Help}を定義し、{ITEM=ScriptHandler_Help#suffix}を{val}pl{/}に設定します。
   {ITEM=ScriptHandler_Help#shType}を{val}Webサーバー{/}に、{ITEM=ScriptHandler_Help#shHandlerName}を{val}ApachePerl{/}に変更します。


END_A

[END_QA]



[QA]
ID: qa_jsp
Q: サーブレット/ JSPを設定するには？

A: LiteSpeed Webサーバーは、AJPv13プロトコルを使用してServlet/JSPをサポートしています。
AJPv13と互換性がある限り、サーブレットエンジンを選択することができます。
設定には次のガイドラインを使用してください：

<ol>
	<li> AJPv13互換サーブレットエンジンをインストールしてください。</li><br>
	
	Tomcat 3.x、4.xおよびJetty 4.xはAJPv13プロトコルをサポートしています。
    サーブレットエンジンのAJPv13互換コネクタが有効になっている必要があります。
    サーブレットエンジンに付属のドキュメントを参照してください。
    サーブレットエンジンがビルドインHTTPサーバーを介して正しく動作することを確認してください。<br><br>  
	
	<li>WebアプリケーションファイルをWebサーバーで使用できるようにします。</li><br>
	
	サーブレットエンジンが別のマシン上で実行されている場合は、Webアプリケーションファイルのローカルコピーを作成します。
    Servletエンジンが同じマシン上で実行されている場合は、この手順をスキップしてください。
    特定のWebアプリケーションディレクトリのみが必要ですが、web-apps/ディレクトリ全体ではありません。<br> 
	
	Webアプリケーションがwarファイルにパックされている場合は、展開する必要があります。
    WEB-INF/web.xmlは、静的ファイルおよびJSPファイルとともに存在する必要があります。
    WEB-INF/の下にあるJavaクラスファイルは削除できます。<br><br>
	
	<li>Web管理コンソールを使用してサーブレットエンジンを設定します。</li><br> 
	
	サーバーレベルまたはバーチャルホストレベルの{PAGE=ExtApp_Help}タブで、サーブレットエンジンを追加します。
    {ITEM=ExtApp_Help#extAppAddress}がServletエンジンのAJP設定と一致することを確認してください。<br><br> 
	
	<li>バーチャルホストの{PAGE=Context_Help}タブの{TBL=Context_Help#javaWebAppContext}を作成します。</li><br>
	
	コンテキスト{ITEM=Context_Help#expuri}は、サーブレットエンジンによって使用されるURIと一致する必要があります。
    {ITEM=Context_Help#javaWebApp_location}をWebアプリケーションのディレクトリに設定します。
    作成した{ITEM=Context_Help#servletEngine}を選択してください。<br><br>
	
	<li> JSP用に{PAGE=ScriptHandler_Help}を設定します。</li><br>

	バーチャルホストの{ITEM=ScriptHandler_Help#suffix} {val}jsp{/}の{PAGE=ScriptHandler_Help}を追加してください。
    {ITEM=ScriptHandler_Help#shType}を{val}Servlet Engine{/}に設定し、{ITEM=ScriptHandler_Help#shHandlerName}を作成したサーブレットエンジンに設定します。
	
</ol>

END_A

[END_QA]



[QA]
ID: qa_mapache
Q: Apacheから移行するには？

A: あなたのWebサイトは、LiteSpeed Webサーバで現在入手できないApacheモジュールに依存していないため、移行は簡単です。<br>

<ol>
<li>
LiteSpeed WebサーバーをApacheと並列に実行することをお勧めします。 
</li>

<li>
サーバーがrootで起動されている場合は、{cmd}install.sh{/}を実行して、Apacheと同じ設定にユーザーとグループを変更します。 
</li>

<li>
<B>注意：2.2リリース以来、LSWSはLSWSのバーチャルホスト設定を複製せずにApache httpd.confを直接使用できます。詳細については、Wikiページをチェックアウトしてください。</b><br>
バーチャルホストを作成し、同じ設定に構成します：<br>
<ul>
	<li>{ITEM=VHGeneral_Help#docRoot}をApacheで使用されているのと同じディレクトリに設定します（許可については注意してください）；</li>

	<li>CGIがApacheで使用されている場合は{TBL=Context_Help#cgiContext}を追加します；</li>

	<li>必要に応じてPHPまたはServletエンジンを{PAGE=ExtApp_Help}に設定します。 </li>
	<li>Apacheの "Alias"と一致する{TBL=Context_Help#generalContext}を作成します。</li>
</ul>
</li>

<li>
Webサーバーを再起動し、両方のサーバーに同じ要求を送信してセットアップをテストします。
LiteSpeed Webサーバーが正常に動作していることを確認したら、Apacheを停止し、リスナー設定を変更してApacheが使用していたTCPポートを使用することができます。
</li>
</ol>
END_A

[END_QA]



[QA]
ID: qa_prvtkey
Q: SSL秘密鍵の生成方法

A: <a href="http://www.openssl.org/">OpenSSL tool kit</a>で秘密鍵を生成する必要があります。

<ol>
	<li>OpenSSLがまだインストールされていない場合は、インストールします。</li>
	<li>コマンドを使用してWebサーバーのRSA秘密鍵を作成する<br>
	
	{cmd}openssl genrsa -out server.key 1024{/}<br>
	
	トリプルDESで暗号化された秘密鍵ファイルを作成するには、<br>

	{cmd}openssl genrsa -des3 -out server.skey 1024{/}
	</li>
	<br>
	秘密鍵ファイルのパスワードを渡す必要があります（パスフェーズ）。
    毎回秘密鍵ファイルを使用するときは、パスワードの入力を求められます。<br>

	LiteSpeed Webサーバーは、暗号化なしで秘密鍵ファイルのみをサポートします。
    おそらく、秘密鍵にとって安全ではないと思うでしょう。
    理論的には、暗号化バージョンほど安全ではありません。
    しかし、実際には、サーバーの起動時または再起動時にユーザーがSSLキーのパスワードを入力することは不可能です。
    一部のWebサーバーでは、パスワードを何らかの形で保存し、サーバーの起動時にパスフェーズを自動化できますが、パスワードがハードウェアで保護されていない限り、マシンが侵害されていないことが条件です。
    秘密鍵ファイルは、証明書ファイルとともに、実行中のサーバーに誰からも読み込み可能なディレクトリに配置する必要があります。
	
	<li>暗号化されたキーファイルを生成した場合、パスフェーズは次のコマンドで削除できます：<br>
	
	{cmd}openssl rsa -in server.skey -out server.key{/}
	</li>
</ol>

上記コマンドの1024は秘密鍵の長さをビット数で表したものです。
秘密鍵が大きいほど安全です。
2048ビットのようなより大きなプライベートキーを作成することができます。
ただし、証明書の発行者から証明書を取得する場合は、処理できる最大の鍵である1024ビットの秘密鍵を使用する必要があります。まず、発行者に確認してください。

SSL秘密鍵の作成の詳細については、次のURLを参照してください。 
<a href="http://www.openssl.org/docs/HOWTO/keys.txt">http://www.openssl.org/docs/HOWTO/keys.txt</a>

END_A

[END_QA]



[QA]
ID: qa_selfcert
Q: 自己署名証明書を作成するには？

A: 自己管理証明書を使用してWeb管理コンソールを保護することができます。
パブリックWebサイトには推奨されません。

自己署名証明書を使用すると、ブラウザーは、自己署名証明書がブラウザーによって信頼されていないため、証明書を受け入れるかどうかをユーザーに尋ねます。

<ol>
	<li> 秘密鍵を作成します。</li>
	<li> コマンドを使用して自己署名証明書を作成します。<br>
	{cmd}openssl req -new -x509 -key server.key -out server.crt -days 365{/}<br>
	
	あなたの組織とウェブサイトに関する詳細な情報が求められます。
    正しい情報を与えてください。
    コモンネームは要求されてもエイリアスは要求されない場合、Webサイトの有効なドメイン名を指定する必要があります。
    有効なドメイン名を確認するには、{cmd}nslookup{/}、{cmd}dig{/}、{cmd}host{/}などのコマンドを使用できます。
    たとえば、ウェブサイトにhttp://foo.barとhttp://www.foo.barの両方でアクセスできる場合、通常foo.barは有効なドメイン名（正式名）、www.foo.barは エイリアス。コモンネームにはfoo.barを使用する必要があります。
	</li>
</ol>

END_A

[END_QA]



[QA]
ID: qa_cert
Q: 証明書の発行者からSSL証明書を取得する方法は？

A: 秘密鍵から証明書要求を生成し、その要求をVeriSignやThawteなどの証明書の発行者に送信する必要があります。
   証明書の発行者は要求に署名し、証明書を送り返す。
   証明書要求を生成するには：

<ol>
	<li>秘密鍵を作成します。</li>
	<li> コマンドで証明書要求を作成します。<br>
	
	{cmd}openssl req -new -key server.key -out server.csr{/}<br>
	
	あなたの組織とウェブサイトに関する詳細な情報が求められます。

    正しい情報を与えてください。
    コモンネームは要求されてもエイリアスは要求されない場合、Webサイトの有効なドメイン名を指定する必要があります。
    有効なドメイン名を確認するには、{cmd}nslookup{/}、{cmd}dig{/}、{cmd}host{/}などのコマンドを使用できます。
    たとえば、ウェブサイトにhttp://foo.barとhttp://www.foo.barの両方でアクセスできる場合、通常foo.barは有効なドメイン名（正式名）、www.foo.barは エイリアス。 コモンネームとしてfoo.barを使用する必要があります

	</li>
</ol>

END_A

[END_QA]



[QA]
ID: qa_confssl
Q: LiteSpeed Webサーバーで秘密鍵と証明書を使用してSSLを構成する方法は？

A: 証明書を取得したら、Webサーバー用に{TBL=Listeners_Help#sslSetting}を構成できます。

<ol>
   <li>{ITEM=Listeners_Help#listenerSecure}を{val}Yes{/}に設定してリスナーを作成します。
       SSLの公式ポートは443ですが、他のポートでも使用できます。</li>

   <li> Click on the newly created listener, then go to the 
		{TBL=Listeners_Help#sslSetting}. Then edit the
		{ITEM=Listeners_Help#keyFile} and  
		{ITEM=Listeners_Help#certFile}. <br>
      
	  	Give the path of the SSL private key file and certificate file in the 
		pop-up window. Click "Finish" button to save your changes.
   </li>

   <li> You can specify {ITEM=Listeners_Help#sslVersion} 
		and {ITEM=Listeners_Help#sslEncryptionLevel}  on the same page.
   </li>

   <li> Set {TBL=Listeners_Help#virtualHostMapping} in listener
   	General tab. In the pop-up window, select the 
	{ITEM=Listeners_Help#virtualHostName} that you 
   	want to access through this listener and 
	input the valid {ITEM=Listeners_Help#domainName}
   </li>
   
   <li> Click "Apply Changes" link below the banner. If the new listener 
   uses {ITEM=Listeners_Help#listenerPort} number less than
   {val}1024{/} click {ITEM=ServerStat_Help#restart} in {ITEM=ServerStat_Help#servAction}, 
   otherwise just click {ITEM=ServerStat_Help#reload}.
   </li>
   
   <li> Test your SSL configuration with your browser by accessing 
   https://your.domain:your_port/. The "s" after "http" at the beginning of the address 
   indicates the browser to use SSL protocol.
   </li>
   
   If you use a self-signed certificate, the browser will prompt you to accept 
   the certificate. Otherwise the browser will accept the certificate automatically 
   without bothering you.

</ol>

Now you should be able to see your web pages loaded through the secured SSL connection.

END_A

[END_QA]



[QA]
ID: qa_frontpage
Q: How to install Microsoft FrontPage Server Extension 2002 with LiteSpeed web server?

A: Please follow the following steps:
<ol>
   <li> Download the corresponding Microsoft FrontPage Server
   Extension for your platform from 
   <a href="http://www.rtr.com/fpsupport/fp2002sr1_download.htm">rtr.com</a>, 
   save it to directory lsws/add-ons/frontpage/.</li>

   <li> run FrontPage installation script as root user:<br>
		{cmd}lsws/admin/misc/fp_install.sh <path_to_frontpage_package>{/}
		</li>

   <li> Restart LSWS with root user account. </li>
</ol>
Now you can enable FrontPage extension for your web site. The most
important configuration is the {val}Domain Names{/}, it must match
the domain name part of the URL that you used to access the web page,
and otherwise it will not work. Port number should be specified, example:
{val}your.domain.name:80{/} <br>
If you enable FrontPage Server Extension for one virtual host from
LiteSpeed web admin console, LiteSpeed Web Server will try to
install it to the document root of that virtual host when restart web
server. If it is successful, you can access admin page
of that virtual host from: <br>
	{cmd}http://your.doamin.name/_vti_bin/_vti_adm/fpadmcgi.exe{/}<br>
The default login username is "admin" and password is "fp123456". You should
change the password immediately after the extension is enabled.<br>
<br>
If you changed {val}Domain Names{/} setting, you need to reinstall
FrontPage extension. What you need to do is just remove all "_vti_..."
files under the document root of your web site, then restart web server.

If you want to setup Admin Page for all virtual hosts, run the
following command at command line as root user:<br>
{cmd}/usr/local/frontpage/version5.0/bin/owsadm.exe -o setadminport -p
&lt;PORT&gt; -s &lt;path_to_/lsws/add-ons/frontage/conf/httpd.conf&gt; -username
&lt;USERNAME&gt; -pw &lt;PASSWD&gt;{/}<br>

Then add a virtual host with {ITEM=VHGeneral_Help#docRoot} pointing to
{val}/usr/local/frontpage/version5.0/admin-exes/{/} from the web admin
console. Now you can manage FrontPage Server Extension for all 
virtual hosts from this virtual host.<br>


END_A

[END_QA]



[QA]
ID: qa_autoindex
Q: How to customize auto index script?

A: LiteSpeed web server uses an external script to generate the 
index page for a directory with no index file on the fly. The URI to the auto
index script is configurable by field {ITEM=VHGeneral_Help#autoIndexURI} at virtual host level
under general tab. Whenever a directory
with no index file is accessed, LiteSpeed Web server will perform an
internal redirect to that URI. <br>
In order to share the script among all virtual hosts, a
{TBL=Context_Help#generalContext} with {ITEM=Context_Help#expuri}
{val}/_autoindex/{/} and {ITEM=Context_Help#location}
{val}$SERVER_ROOT/share/autoindex/{/} 
is automatically created for every virtual host. <br>

A default php script is provided with same Look and Feel as
Apache's mod_autoindex. The script is located at <br>
	   {cmd}lsws/share/autoindex/default.php{/}<br>
Permission is granted to copy and change the default auto index
script. It is recommended to make changes on a copy of the default
script, the default script will be overwritten during next upgrade. 
When you write your own script, just remember that the path to
the directory to be indexed is passed to the script in a CGI
environment variable: {cmd}"LS_AI_PATH"{/}. The script can be placed at
anywhere you like, but if you want to share it among all virtual
hosts, just place it under {cmd}lsws/share/autoindex/{/}
directory. <br>

END_A

[END_QA]



[QA]
ID: qa_awstats
Q: AWStatsをLiteSpeed Web Serverで併用するには？

A: AWStats can be used as an add-on module of LiteSpeed web server.
It has been seamlessly integrated into our web administration
console, and the configuration and statistical updates has been automated as well. <br>
To install AWStats as an add-on module, please run script: <br>
   {cmd}lsws/admin/misc/awstats_install.sh{/} <br>
This script will try to download the latest AWStats package from <a href=http://www.awstats.org>www.awstats.org</a>, expand it
under {cmd}lsws/add-ons/{/} directory and create a symbolic link
from "./awstats-x.x" to "awstats". If it fails to download for any reason, you can manually do this step as well.<br>
<br>
Next step is to enable AWStats add-on module for the virtual host that
you would have AWStats analyze its access log.<br>
From the Web Admin console, just select the virtual host on left, click "Add-on" tab on the right, then fill in configurations in "AWStats Integration" table. Configurations are<br>
<ul>
	<li>{ITEM=VHAddOns_Help#updateMode}: Disabled, Static or Dynamic.</li>
	<li>{ITEM=VHAddOns_Help#workingDir}: The directory to be used to save
	AWStats configuration and statistical results.</li>
	<li>{ITEM=VHAddOns_Help#awstatsURI}: Where the statistical results can be accessed.</li>
	<li>{ITEM=VHAddOns_Help#siteDomain}: The main domain name of the virtual host.</li>
	<li>{ITEM=VHAddOns_Help#siteAliases}: All possible add-on domains, aliases and IP
	addresses.</li>
	<li>{ITEM=VHAddOns_Help#updateInterval}: Hourly or Daily.</li>
	<li>{ITEM=VHAddOns_Help#updateOffset}: When to start the update.</li>
	<li>{ITEM=VHAddOns_Help#securedConn}: the result is access via HTTP or
	HTTPS.</li>
	<li>{ITEM=VHAddOns_Help#awstatsRealm}: To protect the result with authentication.</li>
</ul>

After applying the configuration changes, you can access the statistical
results produced by AWStats by clicking "statistics" action link for
that virtual host under "Server Manager" page.<br>
<br>
Customize AWStats configuration file:<br>
<br>
AWStats configuration file is generated automatically based on a
model configuration file <working directory>/conf/awstats.model.conf,
which is copied from
lsws/add-ons/awstats/wwwroot/cgi-bin/awstats.model.conf. The following
configuration parameters are populated by LiteSpeed: "LogFile",
"LogType", "LogFormat", "SiteDomain", "HostAliases", "DirData",
"DirConfig" and "DirIcons". Other parameters can be customized by
changing awstats.model.conf.
<br>NOTE: Never edit the destination configuration
file as it is always overwritten by LiteSpeed before invoking AWStats updates.

END_A

[END_QA]



[QA]
ID: qa_perld
Q: 永続的なPerl CGIデーモンを使用するには？

A: Perl CGIデーモンの設定はPHPの設定と似ています。
Fast CGIアプリケーションとして設定し、Perlスクリプトに使用される "pl"やその他のサフィックスのスクリプトハンドラを追加する必要があります。
Perl CGIデーモンはlsws/fcgi-bin/lsperld.fplにあります。<br>
"lsperld.fpl"はFast CGIインターフェイスを利用するため、まずPerl Fast CGIモジュールFCGI.pmをインストールする必要があります。
<a href="http://www.fastcgi.com">http://www.fastcgi.com</a>またはCPANから入手できます。<br>
CPAN経由でFCGI.pmをインストールするには、次のコマンドを使用できます：
{cmd} perl -MCPAN -e 'install FCGI' {/} <br>
永続プロセスのメモリ使用量を増加させるために、Perlデーモンが処理できる要求の数は環境変数
{val}FCGI_PERL_MAX_REQ{/}によって制御されます。デフォルトは500です。<br>
例: {val}FCGI_PERL_MAX_REQ=1000{/}.

END_A

[END_QA]



[QA]
ID: qa_apimport
Q: Apacheの設定をインポートするには？

A: Apache構成移行ツール - {cmd}lsws/admin/misc/apimport.sh{/}は、既存のApache構成を移行するのに役立ちます。
インストール時にApacheの設定をインポートしなかった場合は、コマンドラインから次のマイグレーションツールを実行してください：<br>
<br>
<br>
	{cmd}lsws/admin/misc/apimport.sh /etc/httpd/conf/httpd.conf{/}<br>
<br>
次に、Web管理コンソールにログインし、設定を確認して微調整してから、LiteSpeed Web Serverを再起動します。
プロダクションWebサイトでは、インポートされたWebサイトを別のポートでテストすること（インポートされたバーチャルホストを他のリスナーにバインドすること）を推奨します。

END_A

[END_QA]



[QA]
ID: qa_pipedlogger
Q: パイプロガーを使用するには？

A: A パイプロガーは、WebサーバーがSTDINストリーム上のパイプを通じて送信したアクセスログデータを受信するスタンドアロンアプリケーションです。
これにより、データベースへのログインなど、柔軟なロギングが可能になります。
Perlで書かれたシンプルなパイプロガーがあります：<br>
<pre>

#!/usr/bin/perl
open LOG, '>> ../logs/pipedaccess.log';
select LOG;
$| = 1;
while (<>)
{
  print LOG $_;
}

</pre>
STDINからデータを受け取り、pipedaccess.logファイルに追加します。

パイプロガーを使用するには、まず「Piped Logger」タイプの外部アプリケーションを定義し、「Access Log」設定に行き、ドロップダウンリストから「Piped logger」を選択する必要があります。
パイプロガーが設定されると、アクセスログファイルにロガーが書き込まれません。


END_A

[END_QA]



[QA]
ID: qa_template
Q: 類似の設定でバーチャルホストのグループを設定するにはテンプレートを使用するには？

A: 1つのサーバーで複数のWebサイトをホストする場合、それらのほとんどが同様の構成を持つことがあります。
新しいバーチャルホストを追加するには、既存の設定を複製してから、少し変更を加えるだけです。
また、共通の構成を1つ変更する必要がある場合は、すべての構成ファイルを1つずつ編集する必要があります。
それは迷惑でエラーを起こしやすい。
LiteSpeedはこの優れた機能を提供します。バーチャルホストテンプレートは、上記の状況でウェブマスターの負担を軽減します。
<br>
<br>
たとえば、すべてのWebサイトが以下のようなハードドライブに格納されている場合:
<ul>
   <li>各Webサイトには、/ wwwrootディレクトリの下に独自のルートディレクトリがあります。</li>
   <li>Webサイトのルートディレクトリは、修飾されたドメイン名として指定されます。たとえば、 "www.example.com"のディレクトリは/wwwroot/www.example.com/です。</li>
   <li>ドキュメントルートは、Webサイトのルートディレクトリの下にある "html /"サブディレクトリです。
"www.example.com"の場合は/wwwroot/www.example.com/html/です。</li>
   <li>CGIスクリプトのディレクトリは、Webサイトのルートディレクトリの下にある "cgi-bin /"サブディレクトリです。
"www.example.com"の場合は/wwwroot/www.example.com/cgi-bin/です</li>
</ul> 
  
バーチャルホストテンプレートは以下のように設定する必要があります:
<ul>
	<li>"バーチャルホストルート"は、/wwwroot/$VH_NAME/"に設定する必要があります。</li>
	<li>"ドキュメントルート"は、"$VH_ROOT/html/"または "/wwwroot/$VH_NAME/html/"に設定する必要があり、前者が優先されます。</li>
	<li>"CGI"コンテキストを追加するには、 "URI"を "/ cgi-bin /"に設定、 "Path"を "$VH_ROOT/cgi-bin/"または "/wwwroot/$VH_NAME/cgi-bin"に設定する必要があり、前者が優先されます。</li>
</ul>	 

すべてのWebサイトがポート80で使用可能な場合は、リスナーを作成してポート80のすべてのインターフェースにバインドし、そのリスナーの名前を「マップされたリスナー」構成に追加することができます。.<br>
<br>
次に、各Webサイトのメンバーバーチャルホストを設定する必要があります。 メンバーバーチャルホストのプロパティは次のとおりです:
<ul>
	<li>バーチャルホスト名：バーチャルホストのルートを何らかの形で（例えば、その後にディレクトリの名前を付け、ドメイン名がバーチャルホスト名と同じように）判別できる場合は、おそらく唯一のプロパティーを設定する必要があります。 </li>
	<li>ドメイン：ウェブサイトの修飾ドメイン名が「バーチャルホスト名」と異なる場合に設定する必要があります。 </li>
	<li>エイリアス：このWebサイトのエイリアスがある場合は設定する必要があります。</li>
	<li>バーチャルホストルート：ウェブサイトのルートディレクトリは、「バーチャルホスト名」で判断できない場合にのみ設定する必要があります。</li>
</ul>
「バーチャルホスト名」が「ドメイン」に等しく、バーチャルホストのルートディレクトリが「バーチャルホスト名」にちなんで名付けられ、エイリアスがないため、「www.example.com」では、 「バーチャルホスト名」を「www.example.com」に設定します。
このように新しいバーチャルホストをすべて整理する場合は、メンバーバーチャルホストに適切な「バーチャルホスト名」を追加するだけです。 


END_A

[END_QA]



########## PAGE SECION #############


[PAGE]
ID: HowTo_QA 
NAME: HOW-TOs

PREV_NAV: security.html = SECURITY
NEXT_NAV: Faq_QA.html = FAQs
TOP_NAV: index.html = INDEX

DESCR: 
END_DESCR

[END_PAGE]


[END_QADOC]
