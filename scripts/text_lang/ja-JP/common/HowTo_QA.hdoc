[QADOC]


########## ITEM SECION #############


[QA]
ID: qa_incfd
Q: どのようにファイル記述子のオペレーティングシステムの制限を増やすのですか？

A: <p>TUNIXのようなオペレーティングシステムでは、システムレベルとプロセスレベルのファイル記述子の制限があります。
LiteSpeedサーバーは少数のサーバープロセスを使用してすべてのクライアントにサービスを提供し、各要求では最大4つのファイル記述子が必要になる場合があります。
したがって、サーバーが処理できる同時要求の最大数は、プロセスレベルのファイル記述子の制限によって制限される可能性があります。
この制限を高い値に設定することが重要です。</p>
<p>サーバーがrootユーザーによって起動された場合、サーバーの構成に基づいてこの制限を自動的に調整しようとします。
それ以外の場合は、この制限をroot特権で手動で調整する必要があります。</p>

<p>{cmd}ulimit -a{/}を使用して、プロセスファイル記述子あたりの現在の設定を確認してください。
この制限を変更するには、root特権が必要です。
マシンをリブートした後に自動的に制限を設定するために、スタートアップスクリプトにこの設定を入れることができます。</p> 

<ul>
	<li><p><strong>Linuxカーネル：</strong></p></li>
	開いているファイルのシステムレベルの制限を確認してください：<br>
	&nbsp;&nbsp;&nbsp;{cmd}more /proc/sys/fs/file-max{/}<br>
	それが低く見えたら、限界を以下のように増やしてください：<br>
	&nbsp;&nbsp;&nbsp;{cmd}echo 40000 > /proc/sys/fs/file-max{/}<br>
	カーネル2.2.xの場合は、次のものも必要です:<br>
	&nbsp;&nbsp;&nbsp;{cmd}echo 65535 > /proc/sys/fs/inode-max{/}<br>
	次に、現在のプロセス制限を次のように増加させます:<br>
	&nbsp;&nbsp;&nbsp;{cmd}ulimit -n 10000{/}<br>
	注：普通のユーザは、少なくともKernel 2.4.xでは{cmd} ulimit -n xxxx {/}を使って
    現在のプロセスの制限を変更することができます。
    しかし、以下の行を/etc/security/limits.confに追加する必要があります：<br>
	
	&nbsp;&nbsp;&nbsp;{cmd}soft nofile 2048{/}<br>
	&nbsp;&nbsp;&nbsp;{cmd}hard nofile 8192{/}<br><br>

	<li><p><strong>Solaris 2.4+:</strong></p></li>
	/etc/systemに次の行を追加する必要があります。:<br>
	* ファイル記述子にハードリミットを設定する： {cmd}set rlim_fd_max = XXXX{/}<br>
	* ファイル記述子にソフトリミットを設定する： {cmd}set rlim_fd_cur = XXXX{/}<br><br>
	
	<li><p><strong>FreeBSD:</strong></p></li>
	/boot/loader.confに次の行を追加します。<br>
	{cmd}set kern.maxfiles=XXXX{/}
</ul>

END_A

SEE_ALSO: 

[END_QA]



[QA]
ID: qa_namevh
Q: 名前ベースのバーチャルホスティングを設定するには？

A: 名前ベースの仮想ホスティングでは、あなたが持っているIPアドレスの数より多くのWebサイトをホストすることができます。
この場合、複数のドメイン名が同じIPアドレスを指しています。

名前ベースのバーチャルホスティングを設定するには、次のガイドラインを使用します。

<ol>
<li>DNSを正しく設定してください。
	<br>Webサイトのドメイン名をWebサーバーが使用するIPアドレスに転送します。
これは、通常、WebサイトのDNSゾーンに「A」という名前のエントリを追加することによって行われます。
</li>
<li>Web管理コンソールで設定します：
	<ol><li>Webサイトごとにバーチャルホストを作成します。</li>
	    <li>リスナーを作成します。<br>
	        1つのリスナーを作成して、すべてのローカルIPアドレスでリッスンすることができます。
            または、1つの特定のIPアドレスだけをリッスンする1つのリスナーで複数のリスナーを作成できます。
	    </li>
	    <li>バーチャルホストマッピングを割り当てます。<br>
            リスナー設定に移動し、{TBL=Listeners_Help＃virtualHostMapping}テーブルの[編集]をクリックします。
            マッピングする仮想ホストをすべて確認し、対応する{ITEM=Listeners_Help＃domainName}を指定します。<br>
		注：{val}your.domain{/}は{val}www.your.domain{/}と{val}your.domain{/}の両方に一致します。
        主要な "www" ドメイン名には無視されます。
	    </li>
	  </ol>
</li>
</ol>
END_A

SEE_ALSO: 

[END_QA]



[QA]
ID: qa_ipvh
Q: IPベースのバーチャルホスティングを設定するには？

A: IPベースのバーチャルホスティングには、各Webサイトに固有のIPアドレスが少なくとも1つ必要です。
1つのIPアドレスは1つのバーチャルホスト専用です。
これにより、 "http://192.168.0.1/index.html"のようなURLを持つ仮想ホストにアクセスすることができ、Webサーバーは対応するバーチャルホストコンテキストを使用してこの要求を処理します。
SSLを使用する場合は、IPベースのバーチャルホストごとに一意のSSL証明書を割り当てる必要があります。

<ol>
  <li>ホストするWebサイトごとに少なくとも1つのIPアドレスを割り当てます。<br>
     ヒント：1つのネットワークアダプタに複数のIPを割り当てるIPエイリアスを作成できます。</li>
  <li>Configure DNS properly.<br> Assign the domain name to its corresponding IP address.</li>
  <li>Create listeners. You have two choices:</li>
     <ul>
        <li>Create one listener that listens on all IPs and configure virtual host 
            mappings to share one listener as above.</li>
	<li>Another choice is to create one listener for each IP. Assign listener 
	    only to the corresponding virtual host with the wild card  domain name {val}*{/}.<br>
	    Unique SSL private key and certificate can be assigned to each listener, 
	    thus each web site can use its own certificate.
	</li>
    </ul>
</ol>

END_A

SEE_ALSO: 

[END_QA]



[QA]
ID: qa_dos
Q: How to be mitigate Denial of Service (DoS) and Distributed Denial of Service (DDoS) attacks?

A: LiteSpeed server is capable of reducing and even eliminating the impact of DoS and DDoS 
attacks at the HTTP protocol level. The following configuration will help against attacks.

<ul>
  <li>Under {PAGE=ServTuning_Help} configuration:</li>
     <ol>
        <li>Set {ITEM=ServTuning_Help#maxReqURLLen}, 
				{ITEM=ServTuning_Help#maxReqHeaderSize},
				{ITEM=ServTuning_Help#maxReqBodySize},  
				{ITEM=ServTuning_Help#maxDynRespHeaderSize}
				 and {ITEM=ServTuning_Help#maxDynRespSize}
           to a value that just above what you really need. This will help to reduce 
           memory usage and identify bad requests quickly.
        </li>
	<li>Set {ITEM=ServTuning_Help#connTimeout} around {val}30{/};<br>
	   set {ITEM=ServTuning_Help#keepAliveTimeout} around {val}15{/} or less;<br>
	   set {ITEM=ServTuning_Help#maxKeepAliveReq} to at least {val}100{/}.<br>
	   This will help to close dead connections as soon as possible and make 
	   connections available to other clients.
	</li>
     </ol>
     <br>
     
  <li>Under {PAGE=ServSecurity_Help} configuration:</li>
     <ol>
        <li>Block the IPs that abuse your web server by listing them in the 
            {TBL=ServSecurity_Help#accessControl} - {ITEM=ServSecurity_Help#accessControl_deny}.</li>
	<li>Use {TBL=ServSecurity_Help#perClientConnLimit} to control how many concurrent 
	    connections are allowed from one IP address. Once the limit is reached, 
	    the web server will close newly accepted connections from that IP address 
	    immediately and move on to next pending connection.<br>

	    Nowadays, almost all web browsers support persistent connections (multiple 
	    requests pipelined through one connection), so the number of connections 
	    required is very small. Essentially, one connection is enough. However, 
	    some web browsers try to establish additional connections to speed up downloading.<br>

	    Therefore, allowing 4 to 10 connections from one IP is recommended. 
	    Less than that will probably affect normal web services.<br>

	    With this per IP limit, the web server can serve more unique clients. 
	    The minimum number of unique clients can be derived from 
		{ITEM=ServTuning_Help#maxConnections}
	     divided by max connections per client.
	</li>
	<li>Enable IP level throttling:<br>
	    Set {ITEM=ServSecurity_Help#outBandwidth} greater than {val}0{/} 
	    (0 will disable throttling). The limit is rounded up to the closest 
	    boundary of 4KB/sec units.<br>
	
	    In this way, your limited network bandwidth will not be used up by a 
	    couple of clients with fast network connections; more clients will be served.
	</li>
	<li>If you server is flooded by hundreds of requests from different IPs but 
	    with same URL, you can create a
	    {TBL=Context_Help#generalContext} to 
		block access to that URL. 
	    The Context {ITEM=Context_Help#expuri} should match or include that URL and 
	    {ITEM=Context_Help#allowBrowse} is set to {val}No{/}.<br>
	    
	   For example, if the server is pounded with "/foo/bar.html", then you can add 
	   context with exact URI={val}/foo/bar.html{/}, or set URI={val}/foo/{/} to block 
	   all URLs that start with "/foo/".
	</li>
   </ol>
</ul>

END_A

SEE_ALSO: 

[END_QA]



[QA]
ID: qa_gzip
Q: How to use GZIP compression to save network bandwidth?

A: LiteSpeed web server can send compressed responses for both static and dynamically 
generated content. 
You can configure it on the server {TBL=ServTuning_Help#gzipTuning} page
through WebAdmin console.

<ul>
<li>{ITEM=ServTuning_Help#enableGzipCompress} setting is the overall
controller for both static and dynamic content.
</li>

<li>When a request for a static file comes in, the web server first 
looks for the corresponding gzip compressed version in the same directory
where the uncompressed file is located. The compressed file will be 
used only if it is newer and smaller than the original one. If the 
compressed file does not exist or out of date, the web server
can create/update the gzip compressed file automatically if
{ITEM=ServTuning_Help#gzipAutoUpdateStatic} is turned on. <br>

Because compression is a pretty server intensive, the web server
will only compress files with a potentially high compression rate based on following
rules:<br>
 the MIME type of the response body is text; 
the file size is between {ITEM=ServTuning_Help#gzipMinFileSize} and
{ITEM=ServTuning_Help#gzipMaxFileSize}.
</li>

<li>The web server can perform run-time compression for dynamically
generated content as well. <br>

To turn on compression for dynamic content, 
both {ITEM=ServTuning_Help#enableDynGzipCompress} and 
{ITEM=ServTuning_Help#enableGzipCompress} must be set to {val}Yes{/}.
</li>

<li>{ITEM=ServTuning_Help#gzipStaticCompressLevel} and 
{ITEM=ServTuning_Help#gzipCompressLevel} range from 
{val}1{/} (faster compression) to {val}9{/} (better compression). 
You should tune it based on available hardware resources such as
memory and CPU cycles.
</li>
</ul>
END_A

SEE_ALSO: 

[END_QA]



[QA]
ID: qa_perf
Q: How to measure web server performance?

A: First, Make sure your web server is tuned up for the maximum performance.
<ul>
   <li>Turn off throttling by setting {ITEM=ServSecurity_Help#outBandwidth} to {val}0{/}.</li>
   <li>Set the value of {ITEM=ServTuning_Help#maxKeepAliveReq} to a big number like {val}100000{/}.</li>
   <li>Set {ITEM=ServTuning_Help#maxConnections} as high as possible.</li>
   <li>Set {ITEM=ServSecurity_Help#softLimit} and 
		   {ITEM=ServSecurity_Help#hardLimit} to {val}1000{/} or
		   higher in {TBL=ServSecurity_Help#perClientConnLimit}, depending on 
       how many concurrent connections you need from one IP address.</li>
   <li>Set {ITEM=VirtualHosts_Help#allowSymbolLink} to {val}Yes{/} and 
		   {ITEM=VirtualHosts_Help#restrained} to {val}No{/} 
		   for the testing virtual host</li>
</ul>

There are three commonly used tools for benchmark: ApacheBench, Httperf and AutoBench.
<ul>
  <li><strong>Using ApacheBench:</strong></li>
  	ApacheBench is a command line performance-testing tool bundled with Apache httpd. 
  	It can simulate hundreds of HTTP/1.0 clients simultaneously accessing same resource on the server.<br>
  	
	You can simply run it with command:<br>
	
	{cmd}ab -n 10000 -c 100 http://localhost:8088/index.html{/}<br>

	or you can use keep-alive requests by<br>

	{cmd}ab -n 10000 -c 100 -k http://localhost:8088/index.html{/}<br>

	For detailed information, please check Apache document.<br><br>
	
   <li><strong>Using Httperf:</strong></li>
   	You can get httperf from <a href="http://www.hpl.hp.com/personal/David_Mosberger/httperf.html">
   	http://www.hpl.hp.com/personal/David_Mosberger/httperf.html</a>.<br>
   	
	Httperf uses HTTP/1.1 protocol by default and always use keep-alive requests. 
	It has more command options, for detailed information please refer to its document.<br>
	
	Here is an example:<br>
	
	{cmd}./httperf --server localhost --port 8088 --uri /index.html --rate 1000 --num-conn 100 --num-call 100 --timeout 50{/}<br><br>

   <li><strong>Using Autobench:</strong></li>
   	Autobench is a simple Perl script calling httperf that automates the benchmark process of a web server.<br>

	You can get autobench from <a href="http://www.xenoclast.org/autobench/">
	http://www.xenoclast.org/autobench/</a>For detailed information, please refer to its document.<br>
	
</ul>

It is not recommended to run the server and testing tool on the same machine, as it does not 
reflect the usage in real world. And the testing tool share the same CPU with web server, 
you should take that into account if you do so.

It is better to perform the test over a LAN using two or more computers. In order to reveal 
the actual performance of the web server, you need to make sure that the network and the client 
machines should not become a bottleneck. It is recommended to perform
the test on a Gigabits LAN, or multiple switched 100Mb connections. If
you only use one machine to simulate clients, make sure that it has equal 
or higher power than the server machine.

Start the test with small files and increase the file size gradually
until the network bandwidth is saturated.
END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_extapp
Q: How to set up an external application (Fast CGI, LSAPI App, Web Server or Servlet Engine)? 

A: All types of external applications can be set up at either server level or
virtual host level.  
The server level ones can be used by all virtual hosts.<br>

<ul>
<li>
Fast CGI and LSAPI applications running on the same machine could be
started by the Web Server on demand. We call this type of applications as
Local External Applications. Applications that are not started by the Web
server are referred as Remote External Applications, even when they are
running on the same machine.<br> 

Servlet Engine has to be started manually no matter whether it runs on the same
machine or not. <br>
</li><br>
<li>

An external application needs to be configured first, then it can be
referenced by its name in other places. It is configured 
under the {PAGE=ExtApp_Help} tab, either at server or virtual
host level.<br> 

For all external applications, you must specify 
{ITEM=ExtApp_Help#extAppName}, {ITEM=ExtApp_Help#extAppAddress} and
{ITEM=ExtApp_Help#maxConns}.<br>

{ITEM=ExtApp_Help#extAppName} is used to reference this app
internally. 
{ITEM=ExtApp_Help#extAppAddress} is the socket address used by 
the application, which web server needs to connect to. 
{ITEM=ExtApp_Help#maxConns} indicates the maximum 
concurrent connections that the external application would take.

For a local external application, you also need to specify 
{ITEM=ExtApp_Help#extAppPath}, 
{ITEM=ExtApp_Help#backlog},
{ITEM=ExtApp_Help#instances}
and {ITEM=ExtApp_Help#env} (optional). <br>

{ITEM=ExtApp_Help#extAppPath} is the command that launches the application, optional command parameters can be supplied. 
{ITEM=ExtApp_Help#backlog} is the queue size of the server
socket that it listens to.  
{ITEM=ExtApp_Help#instances} are the number of copies
(instances) that the server will spawn. 
{ITEM=ExtApp_Help#env} specifies additional environment
variables for the external application.<br>

</li>
<br>
<li>
A Multithreaded external application can process multiple requests 
concurrently within one process. Therefore it is unnecessary to create 
multiple instances for that kind of external applications. However, 
most external applications are not multithreaded and each process can
only process one request at the same time. In this case, multiple
instances have to be created to increase the level of concurrency. <br>

{ITEM=ExtApp_Help#instances} can control how many 
instances (processes) that the web server can spawn. 
And {ITEM=ExtApp_Help#maxConns} should be set to match the
{ITEM=ExtApp_Help#instances}. <br>

Some single-threaded Fast CGI process itself can fork children 
processes to handle multiple requests concurrently, such as 
PHP Fast CGI implementation. For that type of Fast CGI, 
set {ITEM=ExtApp_Help#instances} to {val}1{/} and 
use Fast CGI's configuration to control how many children 
processes should be created. For example, 
PHP use a special {ITEM=ExtApp_Help#env} variable 
{val}PHP_FCGI_CHILDREN{/} for this purpose.<br>
</li>
<br>
<li>
External applications cannot be used directly; they have to be 
configured as either {PAGE=ScriptHandler_Help} or 
{PAGE=Context_Help} handler.
When configured as a script handler, the web server 
will forward a request to it if the request
refers to a static  
file with matching {ITEM=ScriptHandler_Help#suffix}. 
When configured as a context handler, the web server will 
forward a request to it as long as the 
request's URL matches the Context {ITEM=Context_Help#expuri}.
</li>
</ul>
END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_php
Q: How to configure PHP support?

A: PHP is fully supported by LiteSpeed web server out of box, no
additional configuration is required. Normally, there is no need to change
the default settings. 
Two types of PHP SAPI interfaces are supported by LiteSpeed:<br>
<ul>
	<li>LiteSpeed</li>
    <li>FastCGI</li>
</ul>

<p>LiteSpeed SAPI is a new PHP SAPI module that communicates with
LiteSpeed Web Server based on our LSAPI protocol. LiteSpeed SAPI has
similar architecture to the FastCGI SAPI with two major enhancements:
<ol>
<li>upto 50% better performance</li>
<li>support for dynamic PHP configuration changes
through web server configuration and .htaccess files.</li>
</ol>
</p>

<p> 
Unlike Apache's mod_php that
embeds PHP engine inside web server processes, LiteSpeed 
web server talks to standalone PHP Engine processes via Fast CGI or LSAPI
protocol. A pre-built PHP executable with minimum features configured
is installed to {cmd}[lsws_home]/fcgi-bin/php{/}. 
If additional features are required, you should replace it with your own
customized PHP executable.</p>

<p>PHP support is configured in two steps: 1. adding an
  	external PHP application; 2. adding a script
  	handler using the PHP application just defined in step 1.</p>

<p>PHP application can be defined at server level or virtual host
  	level, application defined at server level is
  	available to all virtual hosts. 
	PHP engine can run on localhost or on a remote machine. When running
  	on local machine, PHP processes can be started by third party
  	FastCGI/LSAPI manager or by the web server itself, the latter
  	is preferred.</p>

<p>Before adding/changing PHP application configuration, you need to
  	know which PHP SAPI is built into the PHP binary.  
  	Command: {cmd}[lsws_home]/fcgi-bin/php -v{/} will display the 
	information. For LiteSpeed SAPI, you should define a LSAPI
  	application, for CGI/FCGI SAPI, you should define a FastCGI application.
	</p>


<p>After a PHP application is configured, a {PAGE=ScriptHandler_Help}
	needs to be configured in order to have PHP script handled by the PHP
	application. The default {ITEM=ScriptHandler_Help#suffix} 
	for PHP script is set to {val}php{/};  
	{ITEM=ScriptHandler_Help#shType} is set to either {val}Fast CGI{/}
	or {val}LiteSpeed API{/}; {ITEM=ScriptHandler_Help#shHandlerName}
	is set to the name of the PHP application. You can specify
	multiple suffixes in a comma-separated list like
	{val}php,php4,phtml{/}. {PAGE=ScriptHandler_Help} can be set at
	server level or virtual host level. Virtual host level setting
	overrides the server level setting for the same suffix. </p> 

<p>There are a few environment variables can be used to customize PHP
via LSAPI, for detail information please refer to the README file in 
php/sapi/litespeed directory. </p>

<p>There are several environment variables can
  	be used to customize the PHP FCGI application: </p>
<ul>
	<li>{val}PHP_FCGI_CHILDREN=XX{/}</li>
	<p>This controls how many child processes the PHP engine process spawns. 
	You can use {ITEM=ExtApp_Help#instances} or this environment 
	variable to control the concurrency of PHP engine. 
	{ITEM=ExtApp_Help#maxConns} setting should be set 
	to the same value as the number of children processes.</p>
		
	<li>{val}PHP_FCGI_MAX_REQUESTS=XXXX{/}</li>
	<p>This controls how many requests each child process will handle
	before exit. It protects against memory leak inside PHP. Web
	server needs to reestablish a connection with a new child
	process. So set it as high as possible to increase the performance.</p>
		
	<li>{val}FCGI_WEB_SERVER_ADDRS=127.0.0.1,192.168.0.1{/}</li>
	<p>This controls who can connect to the PHP engine over the
	network when TCP socket is used. Only 127.0.0.1 and 192.168.0.1 is
	allowed in the above example. This option is not necessary when
	PHP engine run on localhost with proper
	{ITEM=ExtApp_Help#extAppAddress} setting. Both Unix domain socket
	and TCP socket can be used when running on localhost, Unix domain
	socket is preferred for better performance. If TCP socket has to
	be used, then let PHP only listen on the local loopback interface
	by setting {ITEM=ExtApp_Help#extAppAddress} to
	{val}localhost:XXXX{/}. </p> 
</ul>
	
END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_phplsapi
Q: How to build PHP binary with LiteSpeed SAPI?

A: Usually, you do not need to build your own PHP binary unless you
  need some PHP modules that are not built into the pre-built
  binary. <br>
<p>First, you need to download the latest PHP source code. If
  php/sapi/litespeed/ directory does not exist in the expanded source
  code tree, you need to download our patch available at 
 <a href="http://www.litespeedtech.com/lsapi/">http://www.litespeedtech.com/lsapi/</a>
  </p>
<p>Then, configure PHP with {cmd}--with-litespeed{/} plus other
  options you will need. Fast CGI related options
  {cmd}--enable-fastcgi--enable-discard-path --disable-path-info-check
  {/} should not be used together with {cmd}--with-litespeed{/}. </p>
<p>Build PHP binary with {cmd}make{/}, you should find an executable
  called "php" under sapi/litespeed/ directory after the compilation
  succeeds. Then copy the new binary with command 
  {cmd}cp php/sapi/litespeed/php lsws/fcgi-bin/lsphp{/}. We recommend renaming
  php to lsphp in order to distinguish it from FastCGI version of PHP
  binary.</p> 

<p>There are two environment variables that can be tweaked to control
the behavior of LiteSpeed PHP. </p> 
<ul>
<li>PHP_LSAPI_CHILDREN  (no default)</li>

<p>In order to handle multiple requests concurrently, LiteSpeed web
server can either spawn multiple PHP processes; or spawn one process,
and this process will create a number of child processes to handle
multiple requests simultaneously. 

The web server will create PHP processes specified by
{ITEM=ExtApp_Help#instances} in LSAPI application
configuration. For one PHP process launched by the server, if
PHP_LSAPI_CHILDREN is not set, it will not create any child process;
if PHP_LSAPI_CHILDREN is set, it will spawn a number of child
processes specified by PHP_LSAPI_CHILDREN. Usually, it should match
{ITEM=ExtApp_Help#maxConns} configured for the LSAPI
application, and both values should not be set over 100 in most
cases.</p><br> 

<li>PHP_LSAPI_MAX_REQUESTS (default value: 500)</li>

<p>This controls how many requests each child process will handle
before exit. When one process exits, another will be created. This
tuning is necessary because several PHP functions have been identified
having memory leaks. If the PHP processes were left around forever,
they could become very inefficient.</p>
</ul>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_phpfcgi
Q: How to build PHP binary with FCGI SAPI?

A: Usually there is no need to build your own PHP binary unless you
  need some particular PHP modules that are in the pre-built
  binary. <br>

  If you need to build your own PHP binary, see the following
  steps:<br><br>

	download the latest PHP distribution package; <br>

  	For PHP 4.3.4 and later releases, a small change should be made in source code {cmd}sapi/cgi/cgi_main.c{/}
  		around line 858 and 862. <br>
  <pre class="eg">
	if (env_path_info) {
		SG(request_info).request_uri = env_path_info;
	} else {
		SG(request_info).request_uri = env_script_name;
	} </pre>

Should be commented out and replaced with the code in the else clause and look like:
  <pre class="eg">
        SG(request_info).request_uri = env_script_name; </pre>

  Then configure php with
  {cmd}--enable-fastcgi--enable-discard-path --disable-path-info-check {/} 
  along with other options you need. Please disregard the statements
  about {cmd}--enable-discard-path 
  --disable-path-info-check{/} options in PHP documentation and
  README.FastCGI, as they are only applicable to Apache.<br><br>
  After PHP is successfully built, replace the stock PHP binary coming
  with the package by command:<br>
  {cmd}cp -f sapi/cgi/php [lsws_home]/fcgi-bin/php . {/}<br>
  The pre-built PHP
  executable is also configured with option
  {cmd}--with-config-file-path=../conf{/}, in this way different
  php.ini can be used for different PHP engine. It is just a
  recommendation. The default  php.ini is located at 
  {cmd}[lsws_home]/conf/php.ini{/}.   
  </p>


END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_phpacc
Q: How to setup PHP Accelerators?

A: "PHP accelerator", "Turck MMCache" and "Alternative PHP Cache (APC)"
have been tested and work well with LiteSpeed. 
"Zend accelerator" should work fine. For all accelerators, the PHP 
configuration file - php.ini should be changed. The default php.ini 
for the pre-built PHP engine is located at [lsws_home]/conf/php.ini.<br> 
Litespeed installer can enable "Turck MMCache" or "APC" with our
pre-built binaries. If you want to enable, disable or switch after
installation, just run [lsws_home]/admin/misc/enable_phpa.sh.<br> 
For detailed information regarding how to install the PHP Accelerators,
please follow the documentation from respective vendors. 
END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_suexec
Q: How to start CGI, FCGI, LSAPI and PHP in suEXEC mode?

A: When a script is started in "suEXEC" mode, the script can run on
behalf of a user other than the user that web server process running
as, this is an important security feature in shared hosting
environment which minimize possible damage of a vulnerable script to
whom this script belongs to.<br>
It is very easy to turn on "suEXEC" in LiteSpeed Web Server, what you
need to do is to set "CGI set UID mode" to "DocRoot UID" when you
create a virtual host, then change the owner of the document root
directory to target user. <br>
For traditional CGI script, you can also use "CGI File UID", but
"DocRoot UID" is recommended as it works with all scripts unless the
user ID of the CGI script is different from document root user ID.
END_A

SEE_ALSO:
[END_QA]



[QA]
ID: qa_sproxy
Q: How to set up LiteSpeed Web Server as a reverse proxy server?

A: LiteSpeed Web Server can be used as a transparent reverse proxy
server running in front of any web server or application server that
supports HTTP protocol, to help improve the scalability, 
performance and security of the whole system.<br>
Please set up in the WebAdmin console according to the following steps: <br>

<ol>
	<li> Define an {PAGE=ExtApp_Help} with 
		 {ITEM=ExtApp_Help#extAppType} {val}Web Server{/}.
		 Set {ITEM=ExtApp_Help#extAppAddress} to the IP address 
		 and port used by the backend web server.
	</li> 

	<li>Two choices:<br>
	<ul>
		<li>Define a {TBL=Context_Help#proxyContext} with 
			{ITEM=Context_Help#proxyWebServer} set to the
			{PAGE=ExtApp_Help} just defined.</li>

		<li>Define a {PAGE=ScriptHandler_Help} with 
			{ITEM=ScriptHandler_Help#shType} {val}Web Server{/},
			and {ITEM=ScriptHandler_Help#shHandlerName} set to the
			{PAGE=ExtApp_Help} just defined.</li>
	</ul>
</li>
</ol>

	For example, you may want to have Apache with mod_perl to handle
	Perl scripts instead of running them as CGI, assuming Apache
	is running on the same server machine on port 8080, pointing to
	the same {ITEM=VHGeneral_Help#docRoot}. </br>

	First, define an {PAGE=ExtApp_Help}, set 
	{ITEM=ExtApp_Help#extAppType} to {val}Web Server{/},
	{ITEM=ExtApp_Help#extAppName} to {val}ApachePerl{/} and 
	{ITEM=ExtApp_Help#extAppAddress} to {val}localhost:8080{/}.<br> 
	Then define a {PAGE=ScriptHandler_Help}, set 
	{ITEM=ScriptHandler_Help#suffix} to {val}pl{/},
	{ITEM=ScriptHandler_Help#shType} to {val}Web Server{/} and
	{ITEM=ScriptHandler_Help#shHandlerName} to {val}ApachePerl{/}.


END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_jsp
Q: How to setup Servlet/JSP?

A: LiteSpeed web server supports Servlet/JSP through AJPv13 protocol. 
You can choose a Servlet engine as long as it is AJPv13 compatible. 
Please use the following guidelines to set up:

<ol>
	<li> Install an AJPv13 compatible Servlet engine.</li><br>
	
	Tomcat 3.x, 4.x and Jetty 4.x support AJPv13 protocol. The AJPv13
	compatible connector of the Servlet engine must be enabled. Please
	refer to respective documents coming with the Servlet engine. Make
	sure the Servlet engine works properly through their build-in Http
	Server.<br><br>  
	
	<li>Make the web application files available to web server.</li><br>
	
	If the Servlet engine runs on a different machine, make a local
	copy of the web application files. Skip this step if the Servlet
	engine runs on the same machine. Only the specific web application
	directory is needed, not the whole web-apps/ directory.<br> 
	
	If the web application is packed in a war file, you need to expand it. 
	The WEB-INF/web.xml must exist along with the static files and JSP
	files. The Java class files under WEB-INF/ can be removed.<br><br>
	
	<li>Configure the Servlet engine using web administration
	console.</li><br> 
	
	Under the {PAGE=ExtApp_Help} tab at server level or virtual host
	level add a Servlet engine. Make sure the
	{ITEM=ExtApp_Help#extAppAddress} matches the AJP setting in
	Servlet engine.<br><br> 
	
	<li>Create a {TBL=Context_Help#javaWebAppContext} under 
	{PAGE=Context_Help} tab of the virtual host.</li><br>
	
	The Context {ITEM=Context_Help#expuri} should match the URI used
	by the Servlet engine. 
	Set {ITEM=Context_Help#javaWebApp_location} to the directory of
	web application. Select the {ITEM=Context_Help#servletEngine}
	just created.<br><br>
	
	<li> Set {PAGE=ScriptHandler_Help} for JSP.</li><br>

	Add a {PAGE=ScriptHandler_Help} for 
	{ITEM=ScriptHandler_Help#suffix} {val}jsp{/} for the virtual
	host. Set {ITEM=ScriptHandler_Help#shType} to {val}Servlet
	Engine{/} and set the {ITEM=ScriptHandler_Help#shHandlerName} 
	to the Servlet engine just created.
	
</ol>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_mapache
Q: How to migrate from Apache?

A: If your web site does not depend on any apache modules that the equivalent is not 
currently available in LiteSpeed web server, the migration is pretty easy.<br>

<ol>
<li>
It is recommended to run LiteSpeed web server parallel to Apache
first. 
</li>

<li>
Change the user and group to the same setting as Apache by running {cmd}install.sh{/} if the 
server is started by root. 
</li>

<li>
<B>Attention: Since 2.2 release, LSWS can use Apache httpd.conf
directly without duplicating vhost configuration in LSWS, you should
try that first, for more information, please checkout our Wiki
pages.</b><br>
Create a virtual host and configure it to the same settings:<br>
<ul>
	<li>Set the {ITEM=VHGeneral_Help#docRoot} to the same directory used by Apache 
	(be careful about the permission);</li>

	<li>Add {TBL=Context_Help#cgiContext} if CGI is used in
	Apache;</li>

	<li>Set up PHP or Servlet engine in {PAGE=ExtApp_Help} if needed. </li>
	<li>Create {TBL=Context_Help#generalContext} to match the "Alias"
	in Apache.</li>
</ul>
</li>

<li>
Restart web server and test the setup by sending same requests to both servers. 
After verifying that LiteSpeed web server is working properly, you can stop Apache 
and change the listener setting to use the TCP port that Apache used.
</li>
</ol>
END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_prvtkey
Q: How to generate a SSL private key?

A: <a href="http://www.openssl.org/">OpenSSL tool kit</a> is required to generate private key.

<ol>
	<li>Install OpenSSL if it is not installed already.</li>
	<li>Create RSA private key for your web server by using command<br>
	
	{cmd}openssl genrsa -out server.key 1024{/}<br>
	
	You can create a Triple-DES encrypted private key file by using<br>
	{cmd}openssl genrsa -des3 -out server.skey 1024{/}
	</li>
	<br>
	You need to give a password (pass-phase) for the private key file. 
	You will be prompt for the password when the private key file is used every time.<br>

	LiteSpeed web server only support private key files without encryption. 
	You probably think it is not safe for the private key. Well, in theory, it is not 
	as safe as the encrypt version. But in reality, it is impossible to let user input 
	password for the SSL keys whenever the server starts or restarts. Some web server can 
	save the password somehow and automate the pass-phase when the server starts, 
	but it is only as good as the machine is not compromised unless your password is 
	hardware protected. The private key file along with the certificate file should be placed 
	in a directory that is only readable by whom the server running as.
	
	<li>If you generated the encrypted key file, the pass-phase can be removed with 
	the following command:<br>
	
	{cmd}openssl rsa -in server.skey -out server.key{/}
	</li>
</ol>

1024 in above commands is the length of the private key in bits. The bigger private key 
is more secure. You can create bigger private key like 2048 bit. However, if you plan to get 
your certificate from certificate issuer, you may have to use 1024 bit private key as it is 
the biggest key they can process, check with the issuer first.

For more information about creating SSL private key please visit 
<a href="http://www.openssl.org/docs/HOWTO/keys.txt">http://www.openssl.org/docs/HOWTO/keys.txt</a>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_selfcert
Q: How to create self-signed certificate?

A: Self-signed certificates can be used to secure the web administration console. 
It is not recommended for a public web site.

When you use a self-signed certificate, the browser will ask the user whether to accept the 
certificate or not as self-signed certificates are not trusted by the browser.

<ol>
	<li> Create your private key.</li>
	<li> Create the self-signed certificate with the command,<br>
	{cmd}openssl req -new -x509 -key server.key -out server.crt -days 365{/}<br>
	
	You will be asked for more information about your organization and web site. 
	Please give correct information. You should give valid domain names of your web site 
	when you are asked for Common Name but not any aliases. To determine the valid domain 
	name, you can use commands such as {cmd}nslookup{/}, {cmd}dig{/} or {cmd}host{/}. 
	For example, if the web site can be accessed via both 
	http://foo.bar and http://www.foo.bar, usually foo.bar is the valid domain name 
	(canonical name), www.foo.bar is an alias; foo.bar should be used for the Common Name.
	</li>
</ol>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_cert
Q: How to get a SSL certificate from certificate issuers?

A: You need to generate a certificate request from your private key and send the request 
to a certificate issuer, like VeriSign or Thawte. The certificate issuer will sign the 
request and send back the certificate. To generate a certificate request:

<ol>
	<li>Create your private key.</li>
	<li> Create the certificate request with command,<br>
	
	{cmd}openssl req -new -key server.key -out server.csr{/}<br>
	
	You will be asked for more information about your organization and web site. 
	Please give correct information. You should give valid domain names of your web site 
	when you are asked for Common Name but not any aliases. To determine the valid domain 
	name, you can use commands such as {cmd}nslookup{/}, {cmd}dig{/} or {cmd}host{/}. 
	For example, if the web site can be accessed via both 
	http://foo.bar and http://www.foo.bar, usually foo.bar is the valid domain name 
	(canonical name), www.foo.bar is an alias; foo.bar should be used for the Common Name.

	</li>
</ol>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_confssl
Q: How to configure SSL using the private key and certificate in LiteSpeed web server?

A: After you get your certificate, you can configure 
   {TBL=Listeners_Help#sslSetting} for your web server.

<ol>
   <li> Create a listener with {ITEM=Listeners_Help#listenerSecure}
		set to {val}Yes{/}. The official port for SSL is 443, 
		but other port can be used too.</li>

   <li> Click on the newly created listener, then go to the 
		{TBL=Listeners_Help#sslSetting}. Then edit the
		{ITEM=Listeners_Help#keyFile} and  
		{ITEM=Listeners_Help#certFile}. <br>
      
	  	Give the path of the SSL private key file and certificate file in the 
		pop-up window. Click "Finish" button to save your changes.
   </li>

   <li> You can specify {ITEM=Listeners_Help#sslVersion} 
		and {ITEM=Listeners_Help#sslEncryptionLevel}  on the same page.
   </li>

   <li> Set {TBL=Listeners_Help#virtualHostMapping} in listener
   	General tab. In the pop-up window, select the 
	{ITEM=Listeners_Help#virtualHostName} that you 
   	want to access through this listener and 
	input the valid {ITEM=Listeners_Help#domainName}
   </li>
   
   <li> Click "Apply Changes" link below the banner. If the new listener 
   uses {ITEM=Listeners_Help#listenerPort} number less than
   {val}1024{/} click {ITEM=ServerStat_Help#restart} in {ITEM=ServerStat_Help#servAction}, 
   otherwise just click {ITEM=ServerStat_Help#reload}.
   </li>
   
   <li> Test your SSL configuration with your browser by accessing 
   https://your.domain:your_port/. The "s" after "http" at the beginning of the address 
   indicates the browser to use SSL protocol.
   </li>
   
   If you use a self-signed certificate, the browser will prompt you to accept 
   the certificate. Otherwise the browser will accept the certificate automatically 
   without bothering you.

</ol>

Now you should be able to see your web pages loaded through the secured SSL connection.

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_frontpage
Q: How to install Microsoft FrontPage Server Extension 2002 with LiteSpeed web server?

A: Please follow the following steps:
<ol>
   <li> Download the corresponding Microsoft FrontPage Server
   Extension for your platform from 
   <a href="http://www.rtr.com/fpsupport/fp2002sr1_download.htm">rtr.com</a>, 
   save it to directory lsws/add-ons/frontpage/.</li>

   <li> run FrontPage installation script as root user:<br>
		{cmd}lsws/admin/misc/fp_install.sh <path_to_frontpage_package>{/}
		</li>

   <li> Restart LSWS with root user account. </li>
</ol>
Now you can enable FrontPage extension for your web site. The most
important configuration is the {val}Domain Names{/}, it must match
the domain name part of the URL that you used to access the web page,
and otherwise it will not work. Port number should be specified, example:
{val}your.domain.name:80{/} <br>
If you enable FrontPage Server Extension for one virtual host from
LiteSpeed web admin console, LiteSpeed Web Server will try to
install it to the document root of that virtual host when restart web
server. If it is successful, you can access admin page
of that virtual host from: <br>
	{cmd}http://your.doamin.name/_vti_bin/_vti_adm/fpadmcgi.exe{/}<br>
The default login username is "admin" and password is "fp123456". You should
change the password immediately after the extension is enabled.<br>
<br>
If you changed {val}Domain Names{/} setting, you need to reinstall
FrontPage extension. What you need to do is just remove all "_vti_..."
files under the document root of your web site, then restart web server.

If you want to setup Admin Page for all virtual hosts, run the
following command at command line as root user:<br>
{cmd}/usr/local/frontpage/version5.0/bin/owsadm.exe -o setadminport -p
&lt;PORT&gt; -s &lt;path_to_/lsws/add-ons/frontage/conf/httpd.conf&gt; -username
&lt;USERNAME&gt; -pw &lt;PASSWD&gt;{/}<br>

Then add a virtual host with {ITEM=VHGeneral_Help#docRoot} pointing to
{val}/usr/local/frontpage/version5.0/admin-exes/{/} from the web admin
console. Now you can manage FrontPage Server Extension for all 
virtual hosts from this virtual host.<br>


END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_autoindex
Q: How to customize auto index script?

A: LiteSpeed web server uses an external script to generate the 
index page for a directory with no index file on the fly. The URI to the auto
index script is configurable by field {ITEM=VHGeneral_Help#autoIndexURI} at virtual host level
under general tab. Whenever a directory
with no index file is accessed, LiteSpeed Web server will perform an
internal redirect to that URI. <br>
In order to share the script among all virtual hosts, a
{TBL=Context_Help#generalContext} with {ITEM=Context_Help#expuri}
{val}/_autoindex/{/} and {ITEM=Context_Help#location}
{val}$SERVER_ROOT/share/autoindex/{/} 
is automatically created for every virtual host. <br>

A default php script is provided with same Look and Feel as
Apache's mod_autoindex. The script is located at <br>
	   {cmd}lsws/share/autoindex/default.php{/}<br>
Permission is granted to copy and change the default auto index
script. It is recommended to make changes on a copy of the default
script, the default script will be overwritten during next upgrade. 
When you write your own script, just remember that the path to
the directory to be indexed is passed to the script in a CGI
environment variable: {cmd}"LS_AI_PATH"{/}. The script can be placed at
anywhere you like, but if you want to share it among all virtual
hosts, just place it under {cmd}lsws/share/autoindex/{/}
directory. <br>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_awstats
Q: How to use AWStats together with LiteSpeed Web Server?

A: AWStats can be used as an add-on module of LiteSpeed web server.
It has been seamlessly integrated into our web administration
console, and the configuration and statistical updates has been automated as well. <br>
To install AWStats as an add-on module, please run script: <br>
   {cmd}lsws/admin/misc/awstats_install.sh{/} <br>
This script will try to download the latest AWStats package from <a href=http://www.awstats.org>www.awstats.org</a>, expand it
under {cmd}lsws/add-ons/{/} directory and create a symbolic link
from "./awstats-x.x" to "awstats". If it fails to download for any reason, you can manually do this step as well.<br>
<br>
Next step is to enable AWStats add-on module for the virtual host that
you would have AWStats analyze its access log.<br>
From the Web Admin console, just select the virtual host on left, click "Add-on" tab on the right, then fill in configurations in "AWStats Integration" table. Configurations are<br>
<ul>
	<li>{ITEM=VHAddOns_Help#updateMode}: Disabled, Static or Dynamic.</li>
	<li>{ITEM=VHAddOns_Help#workingDir}: The directory to be used to save
	AWStats configuration and statistical results.</li>
	<li>{ITEM=VHAddOns_Help#awstatsURI}: Where the statistical results can be accessed.</li>
	<li>{ITEM=VHAddOns_Help#siteDomain}: The main domain name of the virtual host.</li>
	<li>{ITEM=VHAddOns_Help#siteAliases}: All possible add-on domains, aliases and IP
	addresses.</li>
	<li>{ITEM=VHAddOns_Help#updateInterval}: Hourly or Daily.</li>
	<li>{ITEM=VHAddOns_Help#updateOffset}: When to start the update.</li>
	<li>{ITEM=VHAddOns_Help#securedConn}: the result is access via HTTP or
	HTTPS.</li>
	<li>{ITEM=VHAddOns_Help#awstatsRealm}: To protect the result with authentication.</li>
</ul>

After applying the configuration changes, you can access the statistical
results produced by AWStats by clicking "statistics" action link for
that virtual host under "Server Manager" page.<br>
<br>
Customize AWStats configuration file:<br>
<br>
AWStats configuration file is generated automatically based on a
model configuration file <working directory>/conf/awstats.model.conf,
which is copied from
lsws/add-ons/awstats/wwwroot/cgi-bin/awstats.model.conf. The following
configuration parameters are populated by LiteSpeed: "LogFile",
"LogType", "LogFormat", "SiteDomain", "HostAliases", "DirData",
"DirConfig" and "DirIcons". Other parameters can be customized by
changing awstats.model.conf.
<br>NOTE: Never edit the destination configuration
file as it is always overwritten by LiteSpeed before invoking AWStats updates.

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_perld
Q: How to use the persistent Perl CGI daemon?

A: The configuration of Perl CGI daemon is similar to that of PHP
configuration. You need to configure it as a Fast CGI
application, and then add a script handler for "pl" or whatever suffixes
used for Perl scripts. The Perl CGI daemon is located at 
lsws/fcgi-bin/lsperld.fpl. <br>
As "lsperld.fpl" utilizes the Fast CGI interface, you need to install Perl
Fast CGI module FCGI.pm first. It is available at <a
href="http:://www.fastcgi.com">http://www.fastcgi.com</a> or through CPAN. <br>
The following command can be used to install FCGI.pm through CPAN:
{cmd} perl -MCPAN -e 'install FCGI' {/} <br>
In order to deal with increasing memory usage of a persistent process, 
number of requests that a Perl daemon can process is controlled by an
environment variable {val}FCGI_PERL_MAX_REQ{/}, default is 500. <br>
For example: {val}FCGI_PERL_MAX_REQ=1000{/}.

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_apimport
Q: How to import Apache configuration?

A: An Apache configuration migration tool -
{cmd}lsws/admin/misc/apimport.sh{/} is available to help you
migrate existing Apache configurations. If you did not import your
Apache configuration during installation, just run the migration tool
from command line:<br>
<br>
<br>
	{cmd}lsws/admin/misc/apimport.sh /etc/httpd/conf/httpd.conf{/}<br>
<br>
Then you may want to log into web admin console, check and fine tune
the configuration, then restart LiteSpeed Web Server.
For production web sites, it is recommended to test imported web sites
on a different port (bind imported virtual hosts to other listeners).

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_pipedlogger
Q: How to use piped logger?

A: A piped logger is a standalone application that receives access log
data sent by web server through a pipe on its STDIN stream.
This makes flexible logging possible, like logging into a database. 
Here is a simple piped logger written in Perl:<br>
<pre>

#!/usr/bin/perl
open LOG, '>> ../logs/pipedaccess.log';
select LOG;
$| = 1;
while (<>)
{
  print LOG $_;
}

</pre>
It will receive data from STDIN and append to file pipedaccess.log.

To use a piped logger, first, you need to define an external application with
type "Piped Logger", then go to "Access Log" configuration and select the "Piped
logger" from the drop down list. Once a piped
logger is set, access log data will no logger be written to the access
log file.


END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_template
Q: How to use template to configure a group of virtual hosts with similar configuration?

A: When you host multiple web sites on one server, you may find that
most of them have similar configuration. To add a new virtual host,
you have to duplicate existing configuration and then just make some
minor changes. Also if you need to change one common configuration, you
have to edit all the configuration files one by one. It is annoying and
error-prone. LiteSpeed provides this excellent feature: virtual host
template, which will reduce the burden of a web master in above situations.
<br>
<br>
For example, if all web sites are stored on a hard drive like below:
<ul>
   <li>Each web site has it own root directory under /wwwroot
   directory.</li>
   <li>Web site's root directory is named as its qualified domain
   name, for example, directory for "www.example.com" is
   /wwwroot/www.example.com/</li>
   <li>Document root is "html/" sub-directory under the web
   site's root directory. For "www.example.com", it is
   /wwwroot/www.example.com/html/</li>
   <li>The directory for CGI scripts is "cgi-bin/" sub-directory under
   the web site's root directory. For "www.example.com", it is 
   /wwwroot/www.example.com/cgi-bin/</li>
</ul> 
  
The virtual host template should be configured like below:
<ul>
	<li>"Virtual host root" should be set to "/wwwroot/$VH_NAME/"</li>
	<li>"Document Root" should be set to "$VH_ROOT/html/" or 
    "/wwwroot/$VH_NAME/html/", the former is preferred.</li>
	<li>To add a "CGI" context, set "URI" to "/cgi-bin/", set "Path" to
    "$VH_ROOT/cgi-bin/" or "/wwwroot/$VH_NAME/cgi-bin", the former is 
	preferred.</li>
</ul>	 

If all web sites are available on port 80, you can create a listener
bind to all interfaces on port 80 and add the name of that listener to
"Mapped Listeners" configuration.<br>
<br>
Then the rest you need to do is to configure a member virtual host for
each web site. Properties for a member virtual host are:
<ul>
	<li>Virtual Host Name: This probably the only property need to be
	set if virtual host root can be somehow determined by it (like
	naming the directory after it, and the domain name is same as the virtual
	host name). </li>
	<li>Domain: need to be set when the qualified domain name of the
	web site is different from "Virtual Host Name". </li>
	<li>Aliases: need to be set if there are aliases for this web site. </li>
	<li>Virtual Host Root: The root directory for a web site, only
	need to be set when it cannot be determined by "Virtual Host Name".</li>
</ul>
For "www.example.com", because "Virtual Host Name" is equal to "Domain" and the
virtual host root directory is named after "Virtual Host Name", and
there is no alias, so all you need to do is to set "Virtual Host Name" to
"www.example.com". If you organize all your new virtual hosts in this way, then
all you need to do is to add a member virtual host with a proper
"Virtual host name". 


END_A

SEE_ALSO: 
[END_QA]



########## PAGE SECION #############


[PAGE]
ID: HowTo_QA 
NAME: HOW-TOs

PREV_NAV: security.html = SECURITY
NEXT_NAV: Faq_QA.html = FAQs
TOP_NAV: index.html = INDEX

DESCR: 
END_DESCR

CONT: qa_incfd qa_namevh qa_ipvh qa_dos qa_gzip qa_perf qa_extapp
qa_php qa_phplsapi qa_phpfcgi qa_phpacc qa_suexec qa_sproxy qa_jsp 
qa_mapache qa_prvtkey qa_selfcert
qa_cert qa_confssl qa_frontpage qa_autoindex qa_awstats qa_perld
qa_apimport qa_pipedlogger qa_template
END_CONT

SEE_ALSO: 
[END_PAGE]


[END_QADOC]
