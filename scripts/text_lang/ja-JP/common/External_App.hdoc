[HELPDOC]


########## New External App ##########


[ITEM]
ID: extAppType
NAME: タイプ
NS: L
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: 外部アプリケーションのタイプを指定します。 以下から選んでください
<ul>
<li>{val}FastCGI{/}: {val}Responder{/}ロールを持つFastCGIアプリケーションです。</li>
<li>{val}Servlet Engine{/}: tomcatなどのAJPv13コネクタを持つサーブレットエンジンです。</li>
<li>{val}HTTP Proxy{/}: HTTPプロトコルをサポートするWebサーバーまたはアプリケーションサーバーです。</li>
<li>{val}HTTPS Proxy{/}:HTTPSプロトコルをサポートするWebサーバーまたはアプリケーションサーバーです</li>
<li>{val}LSAPI App{/}: LSAPIプロトコルを使用してWebサーバーと通信するアプリケーションです。</li>
</ul>
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extAppType
NAME: タイプ
NS: EO
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: 外部アプリケーションのタイプを指定します。
アプリケーションタイプは、提供するサービスまたはサーバーとの通信に使用するプロトコルによって区別されます。
以下から選んでください。
<ul>
<li>{val}FastCGI{/}: {val}Responder{/}ロールを持つFastCGIアプリケーションです。</li>
<li>{val}FastCGI Authorizer{/}: {val}Authorizer{/}ロールを持つFastCGIアプリケーション</li>
<li>{val}Servlet Engine{/}: tomcatなどのAJPv13コネクタを持つサーブレットエンジンです。</li>
<li>{val}Web Server{/}: HTTPプロトコルをサポートするWebサーバーまたはアプリケーションサーバー。</li>
<li>{val}LiteSpeed SAPI App{/}: LSAPIプロトコルを使用してWebサーバーと通信するアプリケーションです。</li>
<li>{val}Load Balancer{/}:ワーカーアプリケーション間の負荷を分散できる仮想アプリケーションです。</li>
<li>{val}Piped Logger{/}: STDINストリームで受け取ったアクセスログエントリを処理できるアプリケーションです。</li>
</ul>
END_DESCR

EDITTIP: 外部Fast CGIアプリケーションとAJPv13（Apache JServ Protocol v1.3）互換サーブレットエンジンを設定できます。
END_EDITTIP

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: ほとんどのアプリケーションは、LSAPIまたはFastCGIプロトコルを使用します。
LSAPIはPHP、Ruby、Pythonをサポートしています。
PerlはFastCGIで使用できます。
（PHP、Ruby、およびPythonはFastCGIを使用して実行するように設定することもできますが、LSAPIを使用する方が高速です）。Javaはサーブレットエンジンを使用します。
END_TIPS

[END_ITEM]



########## App Definition ##########


[ITEM]
ID: extAppName
NAME: 名前
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR:この外部アプリケーションの一意の名前。
設定の他の部分でこの名前を使用するときは、この名前で参照します。
END_DESCR

EDITTIP: 覚えやすい名前をつけ、他の場所はその名前でこのアプリを参照します。
END_EDITTIP

SYNTAX: text
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extWorkers
NAME: ワーカー
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: 以前に外部ロードバランサで定義されたワーカーグループのリスト。
END_DESCR

EDITTIP: ロードバランサワーカーは、事前に定義されている必要があります。
END_EDITTIP

EDITTIP: 使用可能なExtAppタイプは、fcgi（高速CGIアプリケーション）、LSAPIアプリケーション（LSAPIアプリケーション）、サーブレット（サーブレット/JSPエンジン）、プロキシ（Webサーバー）です。
END_EDITTIP

EDITTIP: 1つの負荷分散クラスタに異なるタイプの外部アプリケーションを混在させることができます。
END_EDITTIP

SYNTAX: ExternalAppType::ExternalAppNameという形式のコンマ区切りリスト
END_SYNTAX

EXAMPLE: fcgi::localPHP, proxy::backend1
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: workerName
NAME: 名前
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: ワーカーグループの一意の名前。
END_DESCR

SYNTAX: text
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: workerGroupEnabled
NAME: 有効
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: このワーカーグループを有効にするかどうかを指定します。
END_DESCR

SYNTAX: ラジオボックスから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: sourceIP
NAME: ソースIP
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: バックエンドに接続するためのソースIPを指定します。
ワーカー。 ワーカーの設定で上書きすることができます。
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extAppAddress
NAME: アドレス
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: 外部アプリケーションによって使用される一意のソケットアドレス。
IPv4/IPv6ソケットとUnixドメインソケット（UDS）がサポートされています。
IPv4/IPv6ソケットは、ネットワークを介した通信に使用できます。
UDSは、外部アプリケーションがサーバーと同じマシンにある場合にのみ使用できます。
END_DESCR

EDITTIP: アドレスは、UDS：//tmp/lshttpd/myfcgi.sockのように192.168.1.3:7777およびlocalhost：7777のようなIPv4ソケットアドレス "IP：PORT"またはUnixドメインソケットアドレス "UDS：//path"とすることができます。
END_EDITTIP

EDITTIP: UDSはchroot環境でchrootされます。
END_EDITTIP

EDITTIP: ローカルアプリケーションの場合、セキュリティとパフォーマンスが向上するため、Unixドメインソケットが優先されます。
IPv4ソケットを使用する必要がある場合は、IP部分をlocalhostまたは127.0.0.1に設定します。したがって、アプリケーションは他のマシンからアクセスできません。
END_EDITTIP

SYNTAX: IPv4またはIPV6アドレス：ポートまたはUDS：//パス
END_SYNTAX

EXAMPLE: 127.0.0.1:5434

UDS://tmp/lshttpd/php.sock.
END_EXAMPLE

TIPS: [セキュリティ]外部アプリケーションが同じマシン上で実行される場合は、UDSが優先されます。
IPv4|IPV6ソケットを使用する必要がある場合は、IPアドレスを{val}localhost{/}または{val}127.0.0.1{/}に設定して、外部アプリケーションに他のマシンからアクセスできないようにします。

[Performance] Unixドメインソケットは、通常、IPv4ソケットよりも高いパフォーマンスを提供します。
END_TIPS

[END_ITEM]



[ITEM]
ID: expWSAddress
NAME: アドレス
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: 外部Webサーバーによって使用されるHTTPまたはHTTPSアドレス。
END_DESCR

SYNTAX: IPv4またはIPV6アドレス（：ポート）。
外部Webサーバーがhttpsを使用する場合は、先頭に「https：//」を追加します。
外部Webサーバーが標準ポート80または443を使用する場合、ポートはオプションです。 
END_SYNTAX

EXAMPLE: 192.168.0.10 

127.0.0.1:5434

https://10.0.8.9

https://127.0.0.1:5438
END_EXAMPLE

TIPS: [セキュリティ]同じマシン上で実行されている別のWebサーバーにプロキシする場合は、IPアドレスを{val}localhost{/}または{val}127.0.0.1{/}に設定します。
外部アプリケーションは他のマシンからはアクセスできません。

END_TIPS

[END_ITEM]



[ITEM]
ID: extSrcIP
NAME: タイプ
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: 利用可能なIPから選択します。
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: maxConns
NAME: 最大接続数
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: サーバーと外部アプリケーションの間で確立できる同時接続の最大数を指定します。
この設定は、外部アプリケーションによって同時に処理できる要求の数を制御しますが、実際の制限は外部アプリケーション自体によっても異なります。
この値を高く設定すると、外部アプリケーションの速度が不十分であるか、多数の同時要求に対応できない場合に役立ちません。
END_DESCR

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [パフォーマンス]高い値を設定しても、高いパフォーマンスに直接変換されるわけではありません。
制限を外部アプリケーションに負荷をかけない値に設定すると、最高のパフォーマンス/スループットが得られます。
END_TIPS

[END_ITEM]



[ITEM]
ID: env
NAME: 環境
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: 外部アプリケーション用の追加の環境変数を指定します。
END_DESCR

SYNTAX: Key=value. 複数の変数は "ENTER"で区切ることができます。
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: initTimeout
NAME: 初期要求タイムアウト（秒）
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: サーバーが、新しいアプリケーションが新しい確立された接続を介して最初の要求に応答するのを待つ最長時間を秒単位で指定します。
サーバーがこのタイムアウト制限内に外部アプリケーションからデータを受信しない場合、この接続は不良とマークされます。
これにより、外部アプリケーションとの通信の問題をできるだけ迅速に特定することができます。
処理に時間がかかるリクエストがある場合は、この制限を増やして503のエラー・メッセージを避けてください。
END_DESCR

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: retryTimeout
NAME: リトライタイムアウト（秒）
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: 以前の通信に問題があった外部アプリケーションを再試行する前に、サーバーが待機する時間を指定します。
END_DESCR

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: persistConn
NAME: 永続的な接続
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: 要求後に接続を開いたままにするかどうかを指定します。
処理されました。
永続的接続はパフォーマンスを向上させる可能性がありますが、一部のFastCGI外部アプリケーションは永続的接続を完全にサポートしません。
デフォルトは "オン"です。 
END_DESCR

SYNTAX: ラジオボックスから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: pcKeepAliveTimeout
NAME: キープアライブタイムアウト（秒）
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: アイドル状態の永続的な接続を開いたままにする最大時間を指定します。
"-1"に設定すると、接続はタイムアウトしません。
0以上に設定すると、この時間が経過した後に接続が閉じられます。
END_DESCR

SYNTAX: int
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: respBuffer
NAME: 応答バッファリング
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: 外部から受信した応答をバッファリングするかどうかを指定します。
アプリケーション。
"nph-" (Non-Parsed-Header)スクリプトが検出された場合、完全なHTTPヘッダーを持つ応答ではバッファリングがオフになります。
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS:
END_TIPS

[END_ITEM]



[ITEM]
ID: autoStart
NAME: 自動スタート
NS: E
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Webサーバーでアプリケーションを自動的に開始するかどうかを指定します。
同じマシン上で実行されているFastCGIおよびLSAPIアプリケーションのみを自動的に起動することができます。
{ITEM=extAppAddress}のIPはローカルIPでなければなりません。 メインサーバプロセスではなくLiteSpeed CGIデーモンを起動すると、システムのオーバーヘッドを軽減できます。
CGIデーモン非同期モード（非ブロッキングイベントドリブン方式）は、I/O待ち時間が長いサーバーにお勧めします。
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: autoStart
NAME: 自動スタート
NS: LO
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Webサーバーでアプリケーションを自動的に開始するかどうかを指定します。
同じマシン上で実行されているFastCGIおよびLSAPIアプリケーションのみを自動的に起動することができます。
{ITEM=extAppAddress}のIPはローカルIPでなければなりません。
メインサーバプロセスではなくLiteSpeed CGIデーモンを起動すると、システムのオーバーヘッドを軽減できます。
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extAppPath
NAME: コマンド
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: {ITEM=autoStart} 

DESCR: Specifies the full command line including parameters to execute
the external application. Required value if 
{ITEM=autoStart} is enabled. A parameter should be quoted with a
double or single quote if the parameter contains space or tab characters.
END_DESCR

SYNTAX: Full path to the executable with optional parameters.
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: backlog
NAME: Back Log
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies the backlog of the listening socket.  Required if {ITEM=autoStart} is enabled.
END_DESCR

EDITTIP: Local applications can be started by the web server. In this case, you need to specify the path, backlog and number of instances.
END_EDITTIP

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: instances
NAME: Instances
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum instances of the external application the server will
create. It is required if {ITEM=autoStart} is
enabled. Most FastCGI/LSAPI applications can only process one request
per process instance and for those types of applications, instances should
be set to match the value of {ITEM=maxConns}. Some FastCGI/LSAPI applications can 
spawn multiple child processes to handle multiple requests concurrently. 
For these types of applications, instances should be set to "1" and  
environment variables used to control how many child processes the application can spawn.
END_DESCR

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extUser
NAME: suEXEC User
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: extGroup

DESCR: Specifies username that the external application will run as. If not set, the external application will run as the user of the web server.   
END_DESCR

SYNTAX: 有効なユーザー名。
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS
[END_ITEM]



[ITEM]
ID: extGroup
NAME: suEXEC Group
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: extUser

DESCR: Specifies group name that the external application will run as.    
END_DESCR

SYNTAX: 有効なグループ名。
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS
[END_ITEM]



[ITEM]
ID: extUmask
NAME: umask
REQUIRED: 
APPLY: 3
SINCE: 5.0
SEE_ALSO: CGI {ITEM=ServSecurity_Help#umask} 

DESCR:この外部アプリケーションのプロセスのデフォルトumaskを設定します。
詳細は、{cmd}man 2 umask{/}を参照してください。
デフォルト値はサーバーレベルの{ITEM=ServSecurity_Help#umask}設定から取得されます。
END_DESCR

SYNTAX: 有効範囲[000]〜[777]の値。
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS
[END_ITEM]



[ITEM]
ID: runOnStartUp
NAME: Run On Start Up
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies whether to start the external application at server start
up. Only applicable to external applications that can manage their own child processes and where 
{ITEM=instances} value is set to "1".
If enabled, external processes will be created at server startup instead of run-time.   
END_DESCR

SYNTAX: ラジオボックスから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS:[Performance] If the configured external process has significant startup overhead, like a Rails app, then 
this option should be enabled to decrease first page response time. 
END_TIPS
[END_ITEM]



[ITEM]
ID: extMaxIdleTime
NAME: Max Idle Time
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum idle time before an external application
is stopped by the server. When set to "-1", the external application
will not be stopped by the server. The default value is "-1". This feature
allows resources used by idle applications to be freed. It is
especially useful in the mass hosting environment when you need to define
many applications running in "setuid" mode for the sake of maximum
security. 
END_DESCR

SYNTAX: ラジオボックスから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] This feature is especially useful in the mass hosting environment. 
In order to prevent files owned by one virtual host from being accessed by the 
external application scripts of another virtual host, mass hosting often requires 
many different applications running at the same time in SetUID mode. Set this Max 
Idle Time low to prevent these external applications from idling unnecessarily.
END_TIPS

[END_ITEM]



[ITEM]
ID: extAppPriority
NAME: Priority
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: Server {ITEM=ServGeneral_Help#serverPriority}

DESCR: Specifies priority of the external application process. Value ranges from
{val}-20{/} to {val}20{/}. A lower number means a higher priority. 
An external application process cannot have a higher priority than the web server. If this
priority is set to a lower number than the server's, the server's priority will be used for this value.
END_DESCR

SYNTAX: int
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: procSoftLimit
NAME: Process Soft Limit
NS: E
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Limits the total number of processes that can be created on behalf of a user. All existing processes will be counted against this limit, not just new 
processes to be started.


The limit can be set at the server level or at an individual external application level. The server-level limit will be used if it is not set at an 
individual application level. 
The operating system's default setting will be used if this value is 0 or absent at both levels.
END_DESCR

EDITTIP: Process soft/hard limit controls how many processes are allowed for one user. This includes all the processes spawned by CGI application. OS level limit is used if not set.
END_EDITTIP

EDITTIP: Set to 0 or empty will use operation system default value for all soft/hard limits.
END_EDITTIP

EDITTIP: The soft limit is the value that the kernel enforces for the corresponding resource. The hard limit acts as a ceiling for the soft limit
END_EDITTIP 

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
To control how many processes LSWS will make for users in suEXEC mode, use the suEXEC Max Conn setting. PHP scripts can call for forking processes 
and the number of processes needed for normal functioning can be above the suEXEC Max Conn setting. The main purpose of this limit is as a last line of 
defense to prevent fork bombs and other attacks caused by PHP processes creating other processes. 

Setting this setting too low can severely hurt functionality. The setting will thus be ignored below certain levels.

When using suEXEC Daemon mode, the actual process limit will be higher than this setting to make sure parent processes are not limited.

END_TIPS

[END_ITEM]



[ITEM]
ID: procSoftLimit
NAME: Process Soft Limit
NS: O
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Limits the total number of processes that can be created on behalf of a user. All existing processes will be counted against this limit, not just new 
processes to be started.

The limit can be set at the server level or at an individual external application level. The server-level limit will be used if it is not set at an 
individual application level. The operating system's default setting will be used if this value is 0 or absent at both levels.
END_DESCR

EDITTIP: Process soft/hard limit controls how many processes are allowed for one user. This includes all the processes spawned by CGI application. OS level limit is used if not set.
END_EDITTIP

EDITTIP: Set to 0 or empty will use operation system default value for all soft/hard limits.
END_EDITTIP

EDITTIP: The soft limit is the value that the kernel enforces for the corresponding resource. The hard limit acts as a ceiling for the soft limit
END_EDITTIP 

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
PHP scripts can call for forking processes. The main purpose of this limit is as a last line of defense to prevent fork bombs and 
other attacks caused by PHP processes creating other processes. 

Setting this setting too low can severely hurt functionality. The setting will thus be ignored below certain levels.

When using suEXEC Daemon mode, the actual process limit will be higher than this setting to make sure parent processes are not limited.
END_TIPS

[END_ITEM]



############# Tables #############


[TBL]
ID: extapp
NAME: External Application Settings
NS: EO

DESCR: 
END_DESCR

SEE_ALSO: 
[END_TBL]



[TBL]
ID: extFCGI
NAME: Fast CGI
NS: EO

DESCR: 
END_DESCR

SEE_ALSO: 
[END_TBL]



[TBL]
ID: extFCGIAuth
NAME: Fast CGI 認可者
NS: EO

DESCR: 
END_DESCR

SEE_ALSO: 
[END_TBL]



[TBL]
ID: extServlet
NAME: Servlet Engine
NS: EO

DESCR: 
END_DESCR

SEE_ALSO: 
[END_TBL]



[TBL]
ID: extWS
NAME: Webサーバー
NS: EO

DESCR: 
END_DESCR

SEE_ALSO: 
[END_TBL]



[TBL]
ID: extPL
NAME: Piped Logger
NS: EO

DESCR: 
END_DESCR

SEE_ALSO: 
[END_TBL]



[TBL]
ID: extLB
NAME: ロードバランサ
NS: EO

DESCR: 
END_DESCR

SEE_ALSO: 
[END_TBL]



################ Pages ################


[PAGE]
ID: ExtApp_Help 
NAME: External Application
NS: EO

DESCR: LiteSpeed web server can forward requests to external applications to 
process and generate dynamic content. 
 
Since 2.0, LiteSpeed Web Server has supported seven types of external
applications: CGI, FastCGI, web server, servlet engine, LiteSpeed SAPI
application, load balancer, and piped logger.

<ul>
<li>CGI stands for Common Gateway Interface. The current standard is CGI/1.1. 
   CGI applications run in standalone processes. A CGI process is started 
   for each request and will exit after finishing the request. 
</li>
<li>FastCGI is a fast, open, and secure web server interface that solves the 
  performance problems inherent in CGI without introducing the overhead and 
  complexity of proprietary APIs (Application Programming
  Interfaces).  For more information, please visit {ext-href}http://www.fastcgi.com{ext-href-end}http://www.fastcgi.com{ext-href-end-a}.

  On LiteSpeed Web Server, FastCGI applications can take two roles: 
  generating dynamic responses (a responder role) or authorizing requests 
  (an authorizer role). LiteSpeed Web Server further defines two types of 
  FastCGI applications: local FastCGI and remote FastCGI. 
  Local FastCGI applications are started automatically by the web server
  on demand. Remote FastCGI applications are not started by the web server. 
  (They can run on a remote machine or on the same machine.)
</li>
<li>a web server is a server application that supports HTTP 1.0/1.1
protocols. LiteSpeed web server can serve as a transparent reverse proxy
to accelerate and protect web servers and application servers. 
When communicating with backend web servers, LiteSpeed will
always try to utilize persistent connections in order to achieve the 
highest performance.</li>
<li>A servlet engine is an application, like Apache Tomcat and Jetty, 
that implements Java servlets and Java Server Pages. LiteSpeed can communicate
with servlet engines through AJPv1.3 (Apache JServ Protocol version 1.3).
Servlet engine cannot be started by the web server and can be setup to run on a
remote machine. </li>
<li>A LiteSpeed SAPI (LiteSpeed Server Application Programming Interface) 
application is an application that communicates with LiteSpeed Web Server through 
LSAPI, a fast, scalable server interface specifically designed for LiteSpeed Web 
Server to achieve maximum efficiency.

LSAPI's mechanism of action are similar to FastCGI, but LSAPI applications can be
up to 30% faster than comparable FastCGI applications. LSAPI is highly 
recommended over FastCGI for supported applications. 
(LSAPI currently supports applications written in PHP, Ruby, and Python.)

For more information about LSAPI, please visit
{ext-href}http://www.litespeedtech.com/products/litespeed-sapi/overview/{ext-href-end}http://www.litespeedtech.com/products/litespeed-sapi/overview/{ext-href-end-a}.
</li>
<li>A load balancer is a virtual external application, which assigns
requests to backend worker applications based on workload. Worker
applications can be CGI, FastCGI, web server, servlet engine, or LSAPI
applications. Different types of applications can
be mixed together under one load balancer. Load balancers and piped
loggers cannot be used as worker applications.</li>
<li>A piped logger is an application that can process access
logs in real-time, writing an access log into database or performing
real-time statistics calculations, for example.</li>
</ul>

Unlike CGI applications, FastCGI applications, LSAPI applications, and 
servlet engine do not exit after processing a request. The application process will stay/persist and serve 
as many requests as it can. The socket connection can be reused for multiple requests as well. 

External applications can be set up in the {PAGE=ExtApp_Help} section. 
External applications cannot, however, function on their own. Additional settings must 
be configured so that the web server knows which requests to send to which application. 
There are two ways to to configure this in LiteSpeed Web Server: 
<ol>
  <li> Set the external application as a handler for a specific context.</li> 
  <li> Set the external application as a handler of a script language via file suffix binding.</li>
</ol> 

FastCGI applications, LSAPI applications, web servers, servlet engines,
and load balancers have to be defined in the {PAGE=ExtApp_Help} 
section before you can configure them to handle a context or script suffix . 
It is not necessary to define CGI applications in the {PAGE=ExtApp_Help} section. 


External applications can be configured at the server level or at the virtual host level. 
When configured at the server level, the application can be used by all virtual hosts. When configured at the
virtual host level, it can only be used by that virtual host.

END_DESCR

SEE_ALSO: 
[END_PAGE]



[PAGE]
ID: External_FCGI
NAME: Fast CGI アプリ
NS: EO

DESCR:
END_DESCR

SEE_ALSO: 
[END_PAGE]



[PAGE]
ID: External_FCGI_Auth
NAME: Fast CGI 認証
NS: EO

DESCR:
END_DESCR

SEE_ALSO: 
[END_PAGE]



[PAGE]
ID: External_LSAPI
NAME: LiteSpeed SAPI アプリ
NS: EO
DESCR:
END_DESCR

SEE_ALSO: 
[END_PAGE]



[PAGE]
ID: External_Servlet
NAME: サーブレットエンジン
NS: EO

DESCR:
END_DESCR

SEE_ALSO: 
[END_PAGE]



[PAGE]
ID: External_WS
NAME: Webサーバ
NS: EO

DESCR:
END_DESCR

SEE_ALSO: 
[END_PAGE]



[PAGE]
ID: External_PL
NAME: Piped Logger
NS: EO

DESCR:
END_DESCR

SEE_ALSO: 
[END_PAGE]



[PAGE]
ID: External_LB
NAME: ロードバランサー
NS: EO

DESCR:
END_DESCR

SEE_ALSO: 
[END_PAGE]


[END_HELPDOC]
