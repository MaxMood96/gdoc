[HELPDOC]


########## New External App ##########


[ITEM]
ID: extAppType
NAME: タイプ
NS: L
SINCE: 

DESCR: 外部アプリケーションのタイプを指定します。 以下から選んでください
<ul>
<li>{val}FastCGI{/}: {val}Responder{/}ロールを持つFastCGIアプリケーションです。</li>
<li>{val}Servlet Engine{/}: tomcatなどのAJPv13コネクタを持つサーブレットエンジンです。</li>
<li>{val}HTTP Proxy{/}: HTTPプロトコルをサポートするWebサーバーまたはアプリケーションサーバーです。</li>
<li>{val}HTTPS Proxy{/}:HTTPSプロトコルをサポートするWebサーバーまたはアプリケーションサーバーです</li>
<li>{val}LSAPI App{/}: LSAPIプロトコルを使用してWebサーバーと通信するアプリケーションです。</li>
</ul>
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extAppType
NAME: タイプ
NS: EO
SINCE: 

DESCR: 外部アプリケーションのタイプを指定します。
アプリケーションタイプは、提供するサービスまたはサーバーとの通信に使用するプロトコルによって区別されます。
以下から選んでください。
<ul>
<li>{val}FastCGI{/}: {val}Responder{/}ロールを持つFastCGIアプリケーションです。</li>
<li>{val}FastCGI Authorizer{/}: {val}Authorizer{/}ロールを持つFastCGIアプリケーション</li>
<li>{val}Servlet Engine{/}: tomcatなどのAJPv13コネクタを持つサーブレットエンジンです。</li>
<li>{val}Web Server{/}: HTTPプロトコルをサポートするWebサーバーまたはアプリケーションサーバー。</li>
<li>{val}LiteSpeed SAPI App{/}: LSAPIプロトコルを使用してWebサーバーと通信するアプリケーションです。</li>
<li>{val}Load Balancer{/}:ワーカーアプリケーション間の負荷を分散できるバーチャルアプリケーションです。</li>
<li>{val}Piped Logger{/}: STDINストリームで受け取ったアクセスログエントリを処理できるアプリケーションです。</li>
</ul>
END_DESCR

EDITTIP: 外部Fast CGIアプリケーションとAJPv13（Apache JServ Protocol v1.3）互換サーブレットエンジンを設定できます。
END_EDITTIP

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: ほとんどのアプリケーションは、LSAPIまたはFastCGIプロトコルを使用します。
LSAPIはPHP、Ruby、Pythonをサポートしています。
PerlはFastCGIで使用できます。
（PHP、Ruby、およびPythonはFastCGIを使用して実行するように設定することもできますが、LSAPIを使用する方が高速です）。Javaはサーブレットエンジンを使用します。
END_TIPS

[END_ITEM]



########## App Definition ##########


[ITEM]
ID: extAppName
NAME: 名前
SINCE: 

DESCR:この外部アプリケーションの一意の名前。
設定の他の部分でこの名前を使用するときは、この名前で参照します。
END_DESCR

EDITTIP: 覚えやすい名前をつけ、他の場所はその名前でこのアプリを参照します。
END_EDITTIP

SYNTAX: text
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extWorkers
NAME: ワーカー
SINCE: 

DESCR: 以前に外部ロードバランサで定義されたワーカーグループのリスト。
END_DESCR

EDITTIP: ロードバランサワーカーは、事前に定義されている必要があります。
END_EDITTIP

EDITTIP: 使用可能なExtAppタイプは、fcgi（高速CGIアプリケーション）、LSAPIアプリケーション（LSAPIアプリケーション）、サーブレット（サーブレット/JSPエンジン）、プロキシ（Webサーバー）です。
END_EDITTIP

EDITTIP: 1つの負荷分散クラスタに異なるタイプの外部アプリケーションを混在させることができます。
END_EDITTIP

SYNTAX: ExternalAppType::ExternalAppNameという形式のコンマ区切りリスト
END_SYNTAX

EXAMPLE: fcgi::localPHP, proxy::backend1
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: workerName
NAME: 名前
SINCE: 

DESCR: ワーカーグループの一意の名前。
END_DESCR

SYNTAX: text
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: workerGroupEnabled
NAME: 有効
SINCE: 

DESCR: このワーカーグループを有効にするかどうかを指定します。
END_DESCR

SYNTAX: ラジオボックスから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: sourceIP
NAME: ソースIP
SINCE: 

DESCR: バックエンドに接続するためのソースIPを指定します。
ワーカー。 ワーカーの設定で上書きすることができます。
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extAppAddress
NAME: アドレス
SINCE: 

DESCR: 外部アプリケーションによって使用される一意のソケットアドレス。
IPv4/IPv6ソケットとUnixドメインソケット（UDS）がサポートされています。
IPv4/IPv6ソケットは、ネットワークを介した通信に使用できます。
UDSは、外部アプリケーションがサーバーと同じマシンにある場合にのみ使用できます。
END_DESCR

EDITTIP: アドレスは、UDS：//tmp/lshttpd/myfcgi.sockのように192.168.1.3:7777およびlocalhost：7777のようなIPv4ソケットアドレス "IP：PORT"またはUnixドメインソケットアドレス "UDS：//path"とすることができます。
END_EDITTIP

EDITTIP: UDSはchroot環境でchrootされます。
END_EDITTIP

EDITTIP: ローカルアプリケーションの場合、セキュリティとパフォーマンスが向上するため、Unixドメインソケットが優先されます。
IPv4ソケットを使用する必要がある場合は、IP部分をlocalhostまたは127.0.0.1に設定します。したがって、アプリケーションは他のマシンからアクセスできません。
END_EDITTIP

SYNTAX: IPv4またはIPV6アドレス：ポートまたはUDS：//パス
END_SYNTAX

EXAMPLE: 127.0.0.1:5434

UDS://tmp/lshttpd/php.sock.
END_EXAMPLE

TIPS: [セキュリティ]外部アプリケーションが同じマシン上で実行される場合は、UDSが優先されます。
IPv4|IPV6ソケットを使用する必要がある場合は、IPアドレスを{val}localhost{/}または{val}127.0.0.1{/}に設定して、外部アプリケーションに他のマシンからアクセスできないようにします。

[Performance] Unixドメインソケットは、通常、IPv4ソケットよりも高いパフォーマンスを提供します。
END_TIPS

[END_ITEM]



[ITEM]
ID: expWSAddress
NAME: アドレス
SINCE: 

DESCR: 外部Webサーバーによって使用されるHTTPまたはHTTPSアドレス。
END_DESCR

SYNTAX: IPv4またはIPV6アドレス（：ポート）。
外部Webサーバーがhttpsを使用する場合は、先頭に「https：//」を追加します。
外部Webサーバーが標準ポート80または443を使用する場合、ポートはオプションです。 
END_SYNTAX

EXAMPLE: 192.168.0.10 

127.0.0.1:5434

https://10.0.8.9

https://127.0.0.1:5438
END_EXAMPLE

TIPS: [セキュリティ]同じマシン上で実行されている別のWebサーバーにプロキシする場合は、IPアドレスを{val}localhost{/}または{val}127.0.0.1{/}に設定します。
外部アプリケーションは他のマシンからはアクセスできません。

END_TIPS

[END_ITEM]



[ITEM]
ID: extSrcIP
NAME: タイプ
SINCE: 

DESCR: 利用可能なIPから選択します。
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: maxConns
NAME: 最大接続数
SINCE: 

DESCR: サーバーと外部アプリケーションの間で確立できる同時接続の最大数を指定します。
この設定は、外部アプリケーションによって同時に処理できる要求の数を制御しますが、実際の制限は外部アプリケーション自体によっても異なります。
この値を高く設定すると、外部アプリケーションの速度が不十分であるか、多数の同時要求に対応できない場合に役立ちません。
END_DESCR

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [パフォーマンス]高い値を設定しても、高いパフォーマンスに直接変換されるわけではありません。
制限を外部アプリケーションに負荷をかけない値に設定すると、最高のパフォーマンス/スループットが得られます。
END_TIPS

[END_ITEM]



[ITEM]
ID: env
NAME: 環境
SINCE: 

DESCR: 外部アプリケーション用の追加の環境変数を指定します。
END_DESCR

SYNTAX: Key=value. 複数の変数は "ENTER"で区切ることができます。
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: initTimeout
NAME: 初期要求タイムアウト（秒）
SINCE: 

DESCR: サーバーが、新しいアプリケーションが新しい確立された接続を介して最初の要求に応答するのを待つ最長時間を秒単位で指定します。
サーバーがこのタイムアウト制限内に外部アプリケーションからデータを受信しない場合、この接続は不良とマークされます。
これにより、外部アプリケーションとの通信の問題をできるだけ迅速に特定することができます。
処理に時間がかかるリクエストがある場合は、この制限を増やして503のエラー・メッセージを避けてください。
END_DESCR

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: retryTimeout
NAME: リトライタイムアウト（秒）
SINCE: 

DESCR: 以前の通信に問題があった外部アプリケーションを再試行する前に、サーバーが待機する時間を指定します。
END_DESCR

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: persistConn
NAME: 永続的な接続
SINCE: 

DESCR: 要求後に接続を開いたままにするかどうかを指定します。
処理されました。
永続的接続はパフォーマンスを向上させる可能性がありますが、一部のFastCGI外部アプリケーションは永続的接続を完全にサポートしません。
デフォルトは "オン"です。 
END_DESCR

SYNTAX: ラジオボックスから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: pcKeepAliveTimeout
NAME: キープアライブタイムアウト（秒）
SINCE: 

DESCR: アイドル状態の永続的な接続を開いたままにする最大時間を指定します。
"-1"に設定すると、接続はタイムアウトしません。
0以上に設定すると、この時間が経過した後に接続が閉じられます。
END_DESCR

SYNTAX: int
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: respBuffer
NAME: 応答バッファリング
SINCE: 

DESCR: 外部から受信した応答をバッファリングするかどうかを指定します。
アプリケーション。
"nph-" (Non-Parsed-Header)スクリプトが検出された場合、完全なHTTPヘッダーを持つ応答ではバッファリングがオフになります。
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS:
END_TIPS

[END_ITEM]



[ITEM]
ID: autoStart
NAME: 自動スタート
NS: E
SINCE: 

DESCR: Webサーバーでアプリケーションを自動的に開始するかどうかを指定します。
同じマシン上で実行されているFastCGIおよびLSAPIアプリケーションのみを自動的に起動することができます。
{ITEM=extAppAddress}のIPはローカルIPでなければなりません。 メインサーバプロセスではなくLiteSpeed CGIデーモンを起動すると、システムのオーバーヘッドを軽減できます。
CGIデーモン非同期モード（非ブロッキングイベントドリブン方式）は、I/O待ち時間が長いサーバーにお勧めします。
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: autoStart
NAME: 自動スタート
NS: LO
SINCE: 

DESCR: Webサーバーでアプリケーションを自動的に開始するかどうかを指定します。
同じマシン上で実行されているFastCGIおよびLSAPIアプリケーションのみを自動的に起動することができます。
{ITEM=extAppAddress}のIPはローカルIPでなければなりません。
メインサーバプロセスではなくLiteSpeed CGIデーモンを起動すると、システムのオーバーヘッドを軽減できます。
END_DESCR

SYNTAX: ドロップダウンリストから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extAppPath
NAME: コマンド
SINCE: 

DESCR: 外部アプリケーションを実行するためのパラメータを含む完全なコマンドラインを指定します。
{ITEM=autoStart}が有効な場合は必須値です。
パラメータにスペースまたはタブ文字が含まれている場合は、パラメータを二重引用符または一重引用符で囲む必要があります。
END_DESCR

SYNTAX: オプションのパラメータを含む実行可能ファイルへのフルパス。
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: backlog
NAME: バックログ
SINCE: 

DESCR: リスニングソケットのバックログを指定します。
{ITEM=autoStart}が有効な場合は必須です。
END_DESCR

EDITTIP: ローカルアプリケーションは、Webサーバーによって開始できます。
この場合、パス、バックログ、インスタンス数を指定する必要があります。
END_EDITTIP

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: instances
NAME: インスタンス
SINCE: 

DESCR: サーバーが作成する外部アプリケーションの最大インスタンスを指定します。
{ITEM=autoStart}が有効な場合は必須です。
ほとんどのFastCGI/LSAPIアプリケーションは、プロセスインスタンスごとに1つの要求しか処理できません。これらのタイプのアプリケーションの場合、インスタンスは{ITEM=maxConns}の値に一致するように設定する必要があります。
一部のFastCGI / LSAPIアプリケーションでは、複数の子プロセスを生成して複数の要求を同時に処理できます。
これらのタイプのアプリケーションでは、インスタンスを "1"に設定し、環境変数を使用してアプリケーションが生成できる子プロセスの数を制御する必要があります。
END_DESCR

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extUser
NAME: suEXECユーザー
SINCE: 

DESCR: 外部アプリケーションが実行されるユーザー名を指定します。
設定されていない場合、外部アプリケーションはWebサーバーのユーザーとして実行されます。   
END_DESCR

SYNTAX: 有効なユーザー名。
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS
[END_ITEM]



[ITEM]
ID: extGroup
NAME: suEXECグループ
SINCE: 

DESCR: 外部アプリケーションが実行されるグループ名を指定します。    
END_DESCR

SYNTAX: 有効なグループ名。
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS
[END_ITEM]



[ITEM]
ID: extUmask
NAME: umask
SINCE: 5.0

DESCR:この外部アプリケーションのプロセスのデフォルトumaskを設定します。
詳細は、{cmd}man 2 umask{/}を参照してください。
デフォルト値はサーバーレベルの{ITEM=ServSecurity_Help#umask}設定から取得されます。
END_DESCR

SYNTAX: 有効範囲[000]〜[777]の値。
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS
[END_ITEM]



[ITEM]
ID: runOnStartUp
NAME: 起動時に実行
SINCE: 

DESCR: サーバーの起動時に外部アプリケーションを起動するかどうかを指定します。
自身の子プロセスを管理できる外部アプリケーション、および{ITEM=instances}の値が "1"に設定されている場合にのみ適用されます。
有効にすると、実行時ではなくサーバーの起動時に外部プロセスが作成されます。   
END_DESCR

SYNTAX: ラジオボックスから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS:[パフォーマンス] Railsアプリケーションのように、設定された外部プロセスに重大な起動オーバーヘッドがある場合、このオプションを有効にして最初のページ応答時間を短縮する必要があります。
[END_ITEM]



[ITEM]
ID: extMaxIdleTime
NAME: 最大アイドル時間
SINCE: 

DESCR: サーバーが外部アプリケーションを停止するまでの最大アイドル時間を指定します。
"-1"に設定すると、外部アプリケーションはサーバーによって停止されません。
デフォルト値は "-1"です。
この機能により、アイドル状態のアプリケーションが使用するリソースを解放することができます。
最大限のセキュリティを確保するために、setuidモードで動作する多くのアプリケーションを定義する必要がある場合には、マスホスティング環境で特に便利です。 
END_DESCR

SYNTAX: ラジオボックスから選択
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [パフォーマンス]この機能は、大規模なホスティング環境で特に便利です。
あるバーチャルホストが所有するファイルが別のバーチャルホストの外部アプリケーションスクリプトによってアクセスされないようにするため、大量ホスティングではSetUIDモードで同時に多くの異なるアプリケーションを実行する必要があります。
これらの外部アプリケーションが不必要にアイドリングしないように、この最大アイドル時間を低く設定します。
END_TIPS

[END_ITEM]



[ITEM]
ID: extAppPriority
NAME: 優先度
SINCE: 

DESCR: 外部アプリケーション・プロセスの優先度を指定します。
値の範囲は{val}−20{/}〜{val}20{/}です。
数字が小さいほど優先度が高くなります。
外部アプリケーションプロセスは、Webサーバーよりも高い優先度を持つことはできません。
この優先度がサーバーの数値より低い数値に設定されている場合は、サーバーの優先度がこの値に使用されます。
END_DESCR

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: procSoftLimit
NAME: プロセスソフトリミット
NS: E
SINCE: 

DESCR: ユーザーに代わって作成できるプロセスの総数を制限します。
既存のすべてのプロセスは、開始される新しいプロセスだけでなく、この限度に対してカウントされます。


制限は、サーバーレベルまたは個々の外部アプリケーションレベルで設定できます。
サーバーレベルの制限は、個々のアプリケーションレベルで設定されていない場合に使用されます。
この値が0または両方のレベルにない場合、オペレーティングシステムのデフォルト設定が使用されます。
END_DESCR

EDITTIP: プロセスソフト/ハードリミットは、1人のユーザーに許可されるプロセスの数を制御します。
これには、CGIアプリケーションによって生成されたすべてのプロセスが含まれます。
設定されていない場合、OSレベル制限が使用されます。
END_EDITTIP

EDITTIP: 0または空に設定すると、すべてのソフト/ハードリミットにオペレーティングシステムのデフォルト値が使用されます。
END_EDITTIP

EDITTIP: ソフトリミットは、カーネルが対応するリソースに対して実施する値です。
ハードリミットは、ソフトリミットの天井として機能します。
END_EDITTIP 

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
suEXECモードでLSWSがユーザーに対して行うプロセスの数を制御するには、suEXEC Max Conn設定を使用します。
PHPスクリプトはプロセスをフォークするために呼び出すことができ、通常の機能に必要なプロセスの数はsuEXEC Max Connの設定を上回る可能性があります。
この制限の主な目的は、フォーク爆弾や他のプロセスを作成するPHPプロセスによって引き起こされる他の攻撃を防ぐための最終防衛線です。

この設定を低すぎると、機能が著しく損なわれる可能性があります。
この設定は特定のレベル以下では無視されます。

suEXECデーモンモードを使用する場合、親プロセスが制限されないように、実際のプロセス制限はこの設定よりも高くなります。

END_TIPS

[END_ITEM]



[ITEM]
ID: procSoftLimit
NAME: プロセスソフトリミット
NS: O
SINCE: 

DESCR: ユーザーに代わって作成できるプロセスの総数を制限します。
既存のすべてのプロセスは、開始される新しいプロセスだけでなく、この限度に対してカウントされます。
制限は、サーバーレベルまたは個々の外部アプリケーションレベルで設定できます。

サーバーレベルの制限は、個々のアプリケーションレベルで設定されていない場合に使用されます。
この値が0または両方のレベルにない場合、オペレーティングシステムのデフォルト設定が使用されます。
END_DESCR

EDITTIP: プロセスソフト/ハードリミットは、1人のユーザーに許可されるプロセスの数を制御します。
これには、CGIアプリケーションによって生成されたすべてのプロセスが含まれます。
設定されていない場合、OSレベル制限が使用されます。
END_EDITTIP

EDITTIP: 0または空に設定すると、すべてのソフト/ハードリミットにオペレーティングシステムのデフォルト値が使用されます。
END_EDITTIP

EDITTIP: ソフトリミットは、カーネルが対応するリソースに対して実施する値です。
ハードリミットは、ソフトリミットの上限として機能します。
END_EDITTIP 

SYNTAX: 整数
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
PHPスクリプトはプロセスをフォークするために呼び出すことができます。
この制限の主な目的は、フォーク爆弾や他のプロセスを作成するPHPプロセスによって引き起こされる他の攻撃を防ぐための最終防衛線です。

この設定を低すぎると、機能が著しく損なわれる可能性があります。
この設定は特定のレベル以下では無視されます。

suEXECデーモンモードを使用する場合、親プロセスが制限されないように、実際のプロセス制限はこの設定よりも高くなります。
END_TIPS

[END_ITEM]



############# Tables #############


[TBL]
ID: extapp
NAME: 外部アプリケーション設定
NS: EO

DESCR: 
END_DESCR

[END_TBL]



[TBL]
ID: extFCGI
NAME: Fast CGI
NS: EO

DESCR: 
END_DESCR

[END_TBL]



[TBL]
ID: extFCGIAuth
NAME: Fast CGI 認可者
NS: EO

DESCR: 
END_DESCR

[END_TBL]



[TBL]
ID: extServlet
NAME: サーブレットエンジン
NS: EO

DESCR: 
END_DESCR

[END_TBL]



[TBL]
ID: extWS
NAME: Webサーバー
NS: EO

DESCR: 
END_DESCR

[END_TBL]



[TBL]
ID: extPL
NAME: Piped Logger
NS: EO

DESCR: 
END_DESCR

[END_TBL]



[TBL]
ID: extLB
NAME: ロードバランサ
NS: EO

DESCR: 
END_DESCR

[END_TBL]



################ Pages ################


[PAGE]
ID: ExtApp_Help 
NAME: 外部アプリケーション
NS: EO

DESCR: LiteSpeed Webサーバーは、動的コンテンツを処理および生成するために外部アプリケーションに要求を転送できます。
 
LiteSpeed Web Serverは、2.0以降、CGI、FastCGI、Webサーバー、サーブレットエンジン、LiteSpeed SAPIアプリケーション、ロードバランサ、およびパイプロガーの7種類の外部アプリケーションをサポートしています。

<ul>
<li>CGIはCommon Gateway Interfaceの略です。 現在の標準はCGI / 1.1です。  
CGIアプリケーションはスタンドアロンプロセスで動作します。
各要求に対してCGIプロセスが開始され、要求終了後に終了します。 
</li>
<li>FastCGIは、プロプライエタリなAPI（アプリケーションプログラミングインターフェイス）のオーバーヘッドと複雑さを導入することなく、CGIに内在するパフォーマンスの問題を解決する、高速でオープンで安全なWebサーバーインターフェイスです。
詳細については、{ext-href} http://www.fastcgi.com {ext-href-end} http://www.fastcgi.com {ext-href-end-a}をご覧ください。

LiteSpeed Web Serverでは、FastCGIアプリケーションは動的応答の生成（応答者の役割）または要求の承認（承認者の役割）の2つの役割を果たすことができます。
LiteSpeed Web Serverは、ローカルFastCGIとリモートFastCGIの2種類のFastCGIアプリケーションをさらに定義します。
ローカルFastCGIアプリケーションは、オンデマンドでWebサーバーによって自動的に開始されます。 リモートFastCGIアプリケーションは、Webサーバーによって開始されません。
   （これらはリモートマシン上または同じマシン上で実行できます。）
</li>
<li>WebサーバーはHTTP 1.0 / 1.1プロトコルをサポートするサーバーアプリケーションです。
LiteSpeed Webサーバーは、透過的な逆プロキシとして機能し、Webサーバーとアプリケーションサーバーを高速化および保護します。
バックエンドWebサーバーと通信する場合、LiteSpeedは常に最高のパフォーマンスを達成するために永続的な接続を利用しようとします。</li>
<li>サーブレットエンジンは、JavaサーブレットとJava Server Pagesを実装するApache TomcatやJettyのようなアプリケーションです。
LiteSpeedはAJPv1.3（Apache JServプロトコルバージョン1.3）を介してサーブレットエンジンと通信できます。
サーブレットエンジンはWebサーバーから起動できず、リモートマシン上で実行するように設定できます。
</li>
<li>LiteSpeed SAPI（LiteSpeed Server Application Programming Interface）アプリケーションは、LiteSpeed Web Serverと最大限の効率を達成するために特別に設計された高速でスケーラブルなサーバーインターフェイスであるLiteSpeed Web Serverと通信するアプリケーションです。

LSAPIの動作メカニズムはFastCGIに似ていますが、LSAPIアプリケーションは同等のFastCGIアプリケーションより最大30％高速です。
LSAPIは、サポートされるアプリケーションに対してFastCGIよりも強く推奨されます。
（LSAPIは現在、PHP、Ruby、Pythonで書かれたアプリケーションをサポートしています）。

LSAPIの詳細については、次のURLを参照してください。
{ext-href}http://www.litespeedtech.com/products/litespeed-sapi/overview/{ext-href-end}http://www.litespeedtech.com/products/litespeed-sapi/overview/{ext-href-end-a}.
</li>
<li>ロードバランサはバーチャル外部アプリケーションで、ワークロードに基づいてバックエンドワーカーアプリケーションに要求を割り当てます。
ワーカーアプリケーションは、CGI、FastCGI、Webサーバー、サーブレットエンジン、またはLSAPIアプリケーションです。
1つのロードバランサの下でさまざまな種類のアプリケーションを混在させることができます。
ロードバランサとパイプロガーはワーカーアプリケーションとして使用できません。</li>
<li>パイプロガーは、アクセスログをリアルタイムで処理したり、アクセスログをデータベースに書き込んだり、リアルタイム統計計算を実行したりするアプリケーションです。</li>
</ul>

CGIアプリケーションとは異なり、FastCGIアプリケーション、LSAPIアプリケーション、およびサーブレットエンジンは、要求の処理後に終了しません。
アプリケーションプロセスは維持され、持続し、できるだけ多くの要求を処理します。
ソケット接続は、複数のリクエストに対しても再利用できます。

外部アプリケーションは、{PAGE = ExtApp_Help}セクションで設定できます。
ただし、外部アプリケーションは単独では機能しません。
Webサーバーがどのアプリケーションにどの要求を送信するかを知るように、追加の設定を構成する必要があります。
LiteSpeed Web Serverでこれを設定するには、2つの方法があります: 
<ol>
  <li> 外部アプリケーションを特定のコンテキストのハンドラとして設定します。</li> 
  <li> ファイルサフィックスバインディングを使用して、外部アプリケーションをスクリプト言語のハンドラとして設定します。</li>
</ol> 

FastCGIアプリケーション、LSAPIアプリケーション、Webサーバー、サーブレットエンジン、およびロードバランサは、コンテキストまたはスクリプトサフィックスを処理するように構成する前に、{PAGE=ExtApp_Help}セクションで定義する必要があります。

{PAGE=ExtApp_Help}セクションでCGIアプリケーションを定義する必要はありません。 


外部アプリケーションは、サーバーレベルまたはバーチャルホストレベルで構成できます。
サーバーレベルで構成すると、アプリケーションはすべてのバーチャルホストで使用できます。
バーチャルホストレベルで設定すると、そのバーチャルホストだけが使用できます。

END_DESCR

[END_PAGE]



[PAGE]
ID: External_FCGI
NAME: Fast CGI アプリ
NS: EO

DESCR:
END_DESCR

[END_PAGE]



[PAGE]
ID: External_FCGI_Auth
NAME: Fast CGI 認証
NS: EO

DESCR:
END_DESCR

[END_PAGE]



[PAGE]
ID: External_LSAPI
NAME: LiteSpeed SAPI アプリ
NS: EO
DESCR:
END_DESCR

[END_PAGE]



[PAGE]
ID: External_Servlet
NAME: サーブレットエンジン
NS: EO

DESCR:
END_DESCR

[END_PAGE]



[PAGE]
ID: External_WS
NAME: Webサーバ
NS: EO

DESCR:
END_DESCR

[END_PAGE]



[PAGE]
ID: External_PL
NAME: Piped Logger
NS: EO

DESCR:
END_DESCR

[END_PAGE]



[PAGE]
ID: External_LB
NAME: ロードバランサー
NS: EO

DESCR:
END_DESCR

[END_PAGE]


[END_HELPDOC]
