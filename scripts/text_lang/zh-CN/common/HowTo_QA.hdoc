[QADOC]


########## ITEM SECION #############


[QA]
ID: qa_incfd
Q: 如何增加系统最大文件描述符限制?

A: <p>在类UNIX操作系统中存在系统级和进程级的文件描述符限制.
LiteSpeed服务只能用少量的服务器进程来提供所有的请求, 并且每个可能需要多达4个文件描述符
因此，服务器可以处理的最大并发数可能受到进程级文件描述符限制的限制.
设置一个高的值是很重要的</p>
<p>如果服务器是由root用户启动的, 当这个限制太低时，它会根据服务器配置自动调整
否则，必须使用root权限手动调整此限制。</p>

<p>使用{cmd}ulimit -a{/}来检查当前每个进程文件描述符的限制
你需要root权限才能改变这个限制。 你可能要这个设置放在你的启动脚本中，以便在重启机器后自动设置。</p> 

<ul>
	<li><p><strong>Linux内核:</strong></p></li>
	检测系统的的最大文件句柄数限制:<br>
	&nbsp;&nbsp;&nbsp;{cmd}more /proc/sys/fs/file-max{/}<br>
	如果看起来太低,使用:<br>
	&nbsp;&nbsp;&nbsp;{cmd}echo 40000 > /proc/sys/fs/file-max{/}<br>
	来增加限制
	对于2.2.x内核, 你也需要:<br>
	&nbsp;&nbsp;&nbsp;{cmd}echo 65535 > /proc/sys/fs/inode-max{/}<br>
	然后通过:<br>
	&nbsp;&nbsp;&nbsp;{cmd}ulimit -n 10000{/}<br>
	来增加限制
	Note: 至少在2.4.x内核及以上,普通用户可以使用 {cmd}ulimit -n xxxx{/} 来改变当前进程的限制, 但是你需要在/etc/security/limits.conf中添加:<br>
	
	&nbsp;&nbsp;&nbsp;{cmd}soft nofile 2048{/}<br>
	&nbsp;&nbsp;&nbsp;{cmd}hard nofile 8192{/}<br><br>

	<li><p><strong>Solaris 2.4+:</strong></p></li>
	The following lines need to be added in /etc/system:<br>
	* 设置文件描述符硬限制: {cmd}set rlim_fd_max = XXXX{/}<br>
	* 设置文件描述符软限制: {cmd}set rlim_fd_cur = XXXX{/}<br><br>
	
	<li><p><strong>FreeBSD:</strong></p></li>
	在/boot/loader.conf中添加,<br>
	{cmd}set kern.maxfiles=XXXX{/}
</ul>

END_A

SEE_ALSO: 

[END_QA]



[QA]
ID: qa_namevh
Q: 如何设置基于域名称的虚拟主机?

A: 使用基于域名称的虚拟主机，您可以托管比您拥有的IP地址数量更多的网站。
在这种情况下，多个域名都指向同一个IP地址。

使用以下内容来设置基于域名称的虚拟主机。

<ol>
<li>正确设置DNS.
	<br>将您的网站的域名解析到您的网站服务器的IP地址. 
	通常的做法是添加一个指向服务器IP的"A"解析.
</li>
<li>在控制台中进行设置。
	<ol><li>为每个网站创建一个虚拟主机.</li>
	    <li>创建监听器.<br>
	        你可以创建一个监听器，监听所有本地IP地址。
	        或者创建多个监听器，每个监听器只监听一个特定的IP地址。
	    </li>
	    <li>分配虚拟主机映射.<br>
	        前往监听器设置, 
	        点击在{TBL=Listeners_General_Help#virtualHostMapping}的"编辑" . 
	        选择所有需要被映射的虚拟主机, and specify 
	        然后设置相应的{ITEM=Listeners_General_Help#domainName}.<br>
	        
		Note: {val}your.domain{/}会同时映射{val}www.your.domain{/} 
		     和{val}your.domain{/}. 域名前面的"www."将被忽略。
	    </li>
	  </ol>
</li>
</ol>
END_A

SEE_ALSO: 

[END_QA]



[QA]
ID: qa_ipvh
Q: 如何设置基于IP的虚拟主机?

A: 基于IP的虚拟主机每个网站至少需要一个独立的IP.
一个IP地址专用于一个虚拟主机。这使您可以访问一个虚拟主机像
 "http://192.168.0.1/index.html",Web服务器将使用相应虚拟主机的context处理请求。
 如果要使用SSL，还需要为每个基于IP的虚拟主机分配唯一的SSL证书。

<ol>
  <li>为您计划托管的每个网站分配至少一个IP地址。<br>
     TIP: 您可以创建一个IP别名，将多个IP分配给一个网络适配器。</li>
  <li正确配置DNS.<br> 将域名指向对应的IP地址.</li>
  <li>创建监听器. 你有两种选择:</li>
     <ul>
        <li>创建一个侦听所有IP的侦听器，并配置虚拟主机映射到一个侦听器</li>
	<li>另一个选择是为每个IP创建监听器. 
	只将侦听器分配给具有通配符{val}*{/}的域名的相应虚拟主机.<br>
	    每个侦听器可以设置唯一的SSL私钥和证书，因此每个网站都可以使用自己的证书。
	</li>
    </ul>
</ol>

END_A

SEE_ALSO: 

[END_QA]



[QA]
ID: qa_dos
Q: 如何减轻拒绝服务(DoS)和分布式拒绝服务(DDoS)攻击?

A: LiteSpeed服务器能够在HTTP协议级别减少甚至消除DoS和DDoS攻击的影响。
以下配置将有助于抵御攻击。

<ul>
  <li>Under {PAGE=ServTuning_Help} 配置:</li>
     <ol>
        <li>设置 {ITEM=ServTuning_Help#maxReqURLLen}, 
				{ITEM=ServTuning_Help#maxReqHeaderSize},
				{ITEM=ServTuning_Help#maxReqBodySize},  
				{ITEM=ServTuning_Help#maxDynRespHeaderSize}
				 and {ITEM=ServTuning_Help#maxDynRespSize}
           的值设置为略微高于你真正需要的请求数
           这将有助于减少内存使用并快速识别错误请求。
        </li>
	<li>设置{ITEM=ServTuning_Help#connTimeout}在{val}30{/}附近;<br>
	   设置{ITEM=ServTuning_Help#keepAliveTimeout}为{val}15{/}附近或者更低;<br>
	   设置 {ITEM=ServTuning_Help#maxKeepAliveReq}至少为{val}100{/}.<br>
	   这将有助于尽快关闭死连接，并使其对其他客户端可用。
	</li>
     </ol>
     <br>
     
  <li>Under {PAGE=ServSecurity_Help}配置:</li>
     <ol>
        <li>通过将其列入
            {TBL=ServSecurity_Help#accessControl} - {ITEM=ServSecurity_Help#accessControl_deny}
            来阻止滥用您的网络服务器的IP.</li>
	<li>使用 {TBL=ServSecurity_Help#perClientConnLimit} 
		来控制一个IP地址允许多少并发。一旦达到限制, 
	    服务器将立即关闭来自该IP地址的新连接
	    并转到下一个挂起的连接.<br>

	    现在，几乎所有的浏览器都支持持久连接（通过一个连接传递多个请求），因此所需的连接数量非常少。一个连接基本就足够了。但有些浏览器仍试图建立额外的连接来加速下载。<br>

	    因此，建议允许一个IP 4到10个连接数。低于此值可能会影响正常的web服务.<br>

	    有了这个的限制，服务器可以为更多的客户端提供服务。可以从
		{ITEM=ServTuning_Help#maxConnections}
	     设置每个客户端的最大连接数
	</li>
	<li>启用IP级别的带宽限制:<br>
	    设置 {ITEM=ServSecurity_Help#outBandwidth} 的值为大于 {val}0{/} 
	    (设置为0将会关闭带宽限制). 限制向上舍入到以4KB/sec为单位的最近的值。<br>
	
	    这样，您有限的网络带宽将不会被几个具有快速网络连接的客户端占用;
	    所以能为更多的客户端提供服务。
	</li>
	<li>如果您的服务器被不同IP攻击但其访问相同URL，您可以创建一个
	    {TBL=Context_Help#generalContext} 来阻止访问那个URL
	    The Context {ITEM=Context_Help#expuri} 应匹配或包含该URL和
	    {ITEM=Context_Help#allowBrowse}设置为{val}No{/}.<br>
	    
	   例如, 如果"/foo/bar.html"被大量攻击,
	   然后可以添加具有精确URI的context为{val}/foo/bar.html{/},
	   或设置URI={val}/foo/{/}来封锁所有以"/foo/"开头的URL.
	</li>
   </ol>
</ul>

END_A

SEE_ALSO: 

[END_QA]



[QA]
ID: qa_gzip
Q: 如何使用GZIP压缩来节约宽带?

A: LiteSpeed服务器 可以为静态和动态内容发送压缩响应
你可以通过网络控制台的 {TBL=ServTuning_Help#gzipTuning} 页面配置.

<ul>
<li>{ITEM=ServTuning_Help#enableGzipCompress}为同时为静态和动态内容设置
</li>

<li>当请求静态文件时,服务器首先会在未压缩文件所在目录中查找gzip压缩版本
 压缩文件只会在比原始文件更新、更小的情况才下使用. 
 如果不存在压缩文件或者压缩文件已过期, 
 当{ITEM=ServTuning_Help#gzipAutoUpdateStatic}打开时,web服务器将自动创建/更新 gzip压缩文件 <br>

由于压缩是相当耗费服务器资源的, 
因此Web服务器将根据以下规则来仅压缩压缩率可能较高的文件:<br>
响应体的MIME类型是text;
文件大小 {ITEM=ServTuning_Help#gzipMinFileSize} 和
{ITEM=ServTuning_Help#gzipMaxFileSize}之间.
</li>

<li>web服务器也可以对运行的动态内容进行压缩. <br>

为了压缩动态内容,{ITEM=ServTuning_Help#enableDynGzipCompress}和
{ITEM=ServTuning_Help#enableGzipCompress} 必须设置成{val}Yes{/}.
</li>

<li>{ITEM=ServTuning_Help#gzipStaticCompressLevel}和
{ITEM=ServTuning_Help#gzipCompressLevel}范围为
{val}1{/} (快速压缩) 到 {val}9{/} (更好压缩). 
你应该根据服务器配置来填写(例如CPU和RAM)
</li>
</ul>
END_A

SEE_ALSO: 

[END_QA]



[QA]
ID: qa_perf
Q: 如何衡量web服务器的性能？

A: 首先，确保您的web服务器已调整到佳性能。
<ul>
   <li>关闭宽带限制,将{ITEM=ServSecurity_Help#outBandwidth}设置为 {val}0{/}.</li>
   <li>设置 {ITEM=ServTuning_Help#maxKeepAliveReq}为一个较大的值,例如{val}100000{/}.</li>
   <li>设置 {ITEM=ServTuning_Help#maxConnections}的值尽可能高.</li>
   <li>设置 {TBL=ServSecurity_Help#perClientConnLimit}中的
   			{ITEM=ServSecurity_Help#softLimit} 和 
		    {ITEM=ServSecurity_Help#hardLimit}的值为 {val}1000{/} 
		    或更高 , 这取决于你一个IP需要多少并发.</li>
   <li>设置要测试的虚拟主机 
   		   的{ITEM=VirtualHosts_Help#allowSymbolLink}为{val}Yes{/}
		   {ITEM=VirtualHosts_Help#restrained} 为 {val}No{/} 
		   </li>
</ul>

有三种常用的测试工具：ApacheBench、Httperf和AutoBench。
<ul>
  <li><strong>使用 ApacheBench:</strong></li>
	ApacheBench是一个与Apache httpd捆绑在一起的命令行性能测试工具。

	它可以模拟数百个HTTP/1.0客户端，同时访问服务器上的相同资源  	
	你可以使用:<br>
	
	{cmd}ab -n 10000 -c 100 http://localhost:8088/index.html{/}<br>
	命令来允许

	或者你可以通过<br>

	{cmd}ab -n 10000 -c 100 -k http://localhost:8088/index.html{/}<br>
	来使用持久连接请求
	对应更多的信息,请访问Apache的文档(<a href="https://httpd.apache.org/docs/2.4/programs/ab.html">ApacheBench</a>).<br><br>
	
   <li><strong>使用Httperf:</strong></li>
   	你可以从 <a href="http://www.hpl.hp.com/personal/David_Mosberger/httperf.html">
   	http://www.hpl.hp.com/personal/David_Mosberger/httperf.html</a> 获取httperf.<br>
   	
	Httperf 默认使用HTTP/1.1协议,并总是使用持久连接请求 
	它有更多命令选项,有关详细信息，请参阅其文档.<br>
	
	例子:<br>
	
	{cmd}./httperf --server localhost --port 8088 --uri /index.html --rate 1000 --num-conn 100 --num-call 100 --timeout 50{/}<br><br>

   <li><strong>使用 Autobench:</strong></li>
   	Autobench是一个简单的Perl脚本，称为httperf，可自动执行Web服务器的基准测试过程。<br>

	你可以从<a href="http://www.xenoclast.org/autobench/">
	http://www.xenoclast.org/autobench/</a>获取autobench
	有关详细信息，请参阅其文档.<br>
	
</ul>

不建议在同一台服务器上运行web服务器和测试工具，测试工具与Web服务器共享CPU,所以它不能反映实际使用情况。

最好使用两台或更多台计算机在LAN上执行测试. 
为了揭示Web服务器的实际性能，您需要确保网络和客户端计算机不会成为瓶颈。. 建议您在千兆局域网或多个100Mb带宽的主机上执行测试。
如果仅使用一台计算机来模拟客户端，请确保其带宽高于或等于服务器带宽。

从小文件开始测试，并逐渐增加文件大小，直到网络带宽达到饱和为止。
END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_extapp
Q: How to set up an external application (Fast CGI, LSAPI App, Web Server or Servlet Engine)? 

A: All types of external applications can be set up at either server level or
virtual host level.  
The server level ones can be used by all virtual hosts.<br>

<ul>
<li>
Fast CGI and LSAPI applications running on the same machine could be
started by the Web Server on demand. We call this type of applications as
Local External Applications. Applications that are not started by the Web
server are referred as Remote External Applications, even when they are
running on the same machine.<br> 

Servlet Engine has to be started manually no matter whether it runs on the same
machine or not. <br>
</li><br>
<li>

An external application needs to be configured first, then it can be
referenced by its name in other places. It is configured 
under the {PAGE=ExtApp_Help} tab, either at server or virtual
host level.<br> 

For all external applications, you must specify 
{ITEM=ExtApp_Help#extAppName}, {ITEM=ExtApp_Help#extAppAddress} and
{ITEM=ExtApp_Help#maxConns}.<br>

{ITEM=ExtApp_Help#extAppName} is used to reference this app
internally. 
{ITEM=ExtApp_Help#extAppAddress} is the socket address used by 
the application, which web server needs to connect to. 
{ITEM=ExtApp_Help#maxConns} indicates the maximum 
concurrent connections that the external application would take.

For a local external application, you also need to specify 
{ITEM=ExtApp_Help#extAppPath}, 
{ITEM=ExtApp_Help#backlog},
{ITEM=ExtApp_Help#instances}
and {ITEM=ExtApp_Help#env} (optional). <br>

{ITEM=ExtApp_Help#extAppPath} is the command that launches the application, optional command parameters can be supplied. 
{ITEM=ExtApp_Help#backlog} is the queue size of the server
socket that it listens to.  
{ITEM=ExtApp_Help#instances} are the number of copies
(instances) that the server will spawn. 
{ITEM=ExtApp_Help#env} specifies additional environment
variables for the external application.<br>

</li>
<br>
<li>
A Multithreaded external application can process multiple requests 
concurrently within one process. Therefore it is unnecessary to create 
multiple instances for that kind of external applications. However, 
most external applications are not multithreaded and each process can
only process one request at the same time. In this case, multiple
instances have to be created to increase the level of concurrency. <br>

{ITEM=ExtApp_Help#instances} can control how many 
instances (processes) that the web server can spawn. 
And {ITEM=ExtApp_Help#maxConns} should be set to match the
{ITEM=ExtApp_Help#instances}. <br>

Some single-threaded Fast CGI process itself can fork children 
processes to handle multiple requests concurrently, such as 
PHP Fast CGI implementation. For that type of Fast CGI, 
set {ITEM=ExtApp_Help#instances} to {val}1{/} and 
use Fast CGI's configuration to control how many children 
processes should be created. For example, 
PHP use a special {ITEM=ExtApp_Help#env} variable 
{val}PHP_FCGI_CHILDREN{/} for this purpose.<br>
</li>
<br>
<li>
External applications cannot be used directly; they have to be 
configured as either {PAGE=ScriptHandler_Help} or 
{PAGE=Context_Help} handler.
When configured as a script handler, the web server 
will forward a request to it if the request
refers to a static  
file with matching {ITEM=ScriptHandler_Help#suffix}. 
When configured as a context handler, the web server will 
forward a request to it as long as the 
request's URL matches the Context {ITEM=Context_Help#expuri}.
</li>
</ul>
END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_php
Q: How to configure PHP support?

A: PHP is fully supported by LiteSpeed web server out of box, no
additional configuration is required. Normally, there is no need to change
the default settings. 
Two types of PHP SAPI interfaces are supported by LiteSpeed:<br>
<ul>
	<li>LiteSpeed</li>
    <li>FastCGI</li>
</ul>

<p>LiteSpeed SAPI is a new PHP SAPI module that communicates with
LiteSpeed Web Server based on our LSAPI protocol. LiteSpeed SAPI has
similar architecture to the FastCGI SAPI with two major enhancements:
<ol>
<li>upto 50% better performance</li>
<li>support for dynamic PHP configuration changes
through web server configuration and .htaccess files.</li>
</ol>
</p>

<p> 
Unlike Apache's mod_php that
embeds PHP engine inside web server processes, LiteSpeed 
web server talks to standalone PHP Engine processes via Fast CGI or LSAPI
protocol. A pre-built PHP executable with minimum features configured
is installed to {cmd}[lsws_home]/fcgi-bin/php{/}. 
If additional features are required, you should replace it with your own
customized PHP executable.</p>

<p>PHP support is configured in two steps: 1. adding an
  	external PHP application; 2. adding a script
  	handler using the PHP application just defined in step 1.</p>

<p>PHP application can be defined at server level or virtual host
  	level, application defined at server level is
  	available to all virtual hosts. 
	PHP engine can run on localhost or on a remote machine. When running
  	on local machine, PHP processes can be started by third party
  	FastCGI/LSAPI manager or by the web server itself, the latter
  	is preferred.</p>

<p>Before adding/changing PHP application configuration, you need to
  	know which PHP SAPI is built into the PHP binary.  
  	Command: {cmd}[lsws_home]/fcgi-bin/php -v{/} will display the 
	information. For LiteSpeed SAPI, you should define a LSAPI
  	application, for CGI/FCGI SAPI, you should define a FastCGI application.
	</p>


<p>After a PHP application is configured, a {PAGE=ScriptHandler_Help}
	needs to be configured in order to have PHP script handled by the PHP
	application. The default {ITEM=ScriptHandler_Help#suffix} 
	for PHP script is set to {val}php{/};  
	{ITEM=ScriptHandler_Help#shType} is set to either {val}Fast CGI{/}
	or {val}LiteSpeed API{/}; {ITEM=ScriptHandler_Help#shHandlerName}
	is set to the name of the PHP application. You can specify
	multiple suffixes in a comma-separated list like
	{val}php,php4,phtml{/}. {PAGE=ScriptHandler_Help} can be set at
	server level or virtual host level. Virtual host level setting
	overrides the server level setting for the same suffix. </p> 

<p>There are a few environment variables can be used to customize PHP
via LSAPI, for detail information please refer to the README file in 
php/sapi/litespeed directory. </p>

<p>There are several environment variables can
  	be used to customize the PHP FCGI application: </p>
<ul>
	<li>{val}PHP_FCGI_CHILDREN=XX{/}</li>
	<p>This controls how many child processes the PHP engine process spawns. 
	You can use {ITEM=ExtApp_Help#instances} or this environment 
	variable to control the concurrency of PHP engine. 
	{ITEM=ExtApp_Help#maxConns} setting should be set 
	to the same value as the number of children processes.</p>
		
	<li>{val}PHP_FCGI_MAX_REQUESTS=XXXX{/}</li>
	<p>This controls how many requests each child process will handle
	before exit. It protects against memory leak inside PHP. Web
	server needs to reestablish a connection with a new child
	process. So set it as high as possible to increase the performance.</p>
		
	<li>{val}FCGI_WEB_SERVER_ADDRS=127.0.0.1,192.168.0.1{/}</li>
	<p>This controls who can connect to the PHP engine over the
	network when TCP socket is used. Only 127.0.0.1 and 192.168.0.1 is
	allowed in the above example. This option is not necessary when
	PHP engine run on localhost with proper
	{ITEM=ExtApp_Help#extAppAddress} setting. Both Unix domain socket
	and TCP socket can be used when running on localhost, Unix domain
	socket is preferred for better performance. If TCP socket has to
	be used, then let PHP only listen on the local loopback interface
	by setting {ITEM=ExtApp_Help#extAppAddress} to
	{val}localhost:XXXX{/}. </p> 
</ul>
	
END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_phplsapi
Q: How to build PHP binary with LiteSpeed SAPI?

A: Usually, you do not need to build your own PHP binary unless you
  need some PHP modules that are not built into the pre-built
  binary. <br>
<p>First, you need to download the latest PHP source code. If
  php/sapi/litespeed/ directory does not exist in the expanded source
  code tree, you need to download our patch available at 
  <a href="https://www.litespeedtech.com/open-source/litespeed-sapi/">
    https://www.litespeedtech.com/open-source/litespeed-sapi
  </a>
</p>
<p>Then, configure PHP with {cmd}--with-litespeed{/} plus other
  options you will need. Fast CGI related options
  {cmd}--enable-fastcgi--enable-discard-path --disable-path-info-check
  {/} should not be used together with {cmd}--with-litespeed{/}. </p>
<p>Build PHP binary with {cmd}make{/}, you should find an executable
  called "php" under sapi/litespeed/ directory after the compilation
  succeeds. Then copy the new binary with command 
  {cmd}cp php/sapi/litespeed/php lsws/fcgi-bin/lsphp{/}. We recommend renaming
  php to lsphp in order to distinguish it from FastCGI version of PHP
  binary.</p> 

<p>There are two environment variables that can be tweaked to control
the behavior of LiteSpeed PHP. </p> 
<ul>
<li>PHP_LSAPI_CHILDREN  (no default)</li>

<p>In order to handle multiple requests concurrently, LiteSpeed web
server can either spawn multiple PHP processes; or spawn one process,
and this process will create a number of child processes to handle
multiple requests simultaneously. 

The web server will create PHP processes specified by
{ITEM=ExtApp_Help#instances} in LSAPI application
configuration. For one PHP process launched by the server, if
PHP_LSAPI_CHILDREN is not set, it will not create any child process;
if PHP_LSAPI_CHILDREN is set, it will spawn a number of child
processes specified by PHP_LSAPI_CHILDREN. Usually, it should match
{ITEM=ExtApp_Help#maxConns} configured for the LSAPI
application, and both values should not be set over 100 in most
cases.</p><br> 

<li>PHP_LSAPI_MAX_REQUESTS (default value: 500)</li>

<p>This controls how many requests each child process will handle
before exit. When one process exits, another will be created. This
tuning is necessary because several PHP functions have been identified
having memory leaks. If the PHP processes were left around forever,
they could become very inefficient.</p>
</ul>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_phpfcgi
Q: How to build PHP binary with FCGI SAPI?

A: Usually there is no need to build your own PHP binary unless you
  need some particular PHP modules that are in the pre-built
  binary. <br>

  If you need to build your own PHP binary, see the following
  steps:<br><br>

	download the latest PHP distribution package; <br>

  	For PHP 4.3.4 and later releases, a small change should be made in source code {cmd}sapi/cgi/cgi_main.c{/}
  		around line 858 and 862. <br>
  <pre class="eg">
	if (env_path_info) {
		SG(request_info).request_uri = env_path_info;
	} else {
		SG(request_info).request_uri = env_script_name;
	} </pre>

Should be commented out and replaced with the code in the else clause and look like:
  <pre class="eg">
        SG(request_info).request_uri = env_script_name; </pre>

  Then configure php with
  {cmd}--enable-fastcgi--enable-discard-path --disable-path-info-check {/} 
  along with other options you need. Please disregard the statements
  about {cmd}--enable-discard-path 
  --disable-path-info-check{/} options in PHP documentation and
  README.FastCGI, as they are only applicable to Apache.<br><br>
  After PHP is successfully built, replace the stock PHP binary coming
  with the package by command:<br>
  {cmd}cp -f sapi/cgi/php [lsws_home]/fcgi-bin/php . {/}<br>
  The pre-built PHP
  executable is also configured with option
  {cmd}--with-config-file-path=../conf{/}, in this way different
  php.ini can be used for different PHP engine. It is just a
  recommendation. The default  php.ini is located at 
  {cmd}[lsws_home]/conf/php.ini{/}.   
  </p>


END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_phpacc
Q: How to setup PHP Accelerators?

A: "PHP accelerator", "Turck MMCache" and "Alternative PHP Cache (APC)"
have been tested and work well with LiteSpeed. 
"Zend accelerator" should work fine. For all accelerators, the PHP 
configuration file - php.ini should be changed. The default php.ini 
for the pre-built PHP engine is located at [lsws_home]/conf/php.ini.<br> 
Litespeed installer can enable "Turck MMCache" or "APC" with our
pre-built binaries. If you want to enable, disable or switch after
installation, just run [lsws_home]/admin/misc/enable_phpa.sh.<br> 
For detailed information regarding how to install the PHP Accelerators,
please follow the documentation from respective vendors. 
END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_suexec
Q: How to start CGI, FCGI, LSAPI and PHP in suEXEC mode?

A: When a script is started in "suEXEC" mode, the script can run on
behalf of a user other than the user that web server process running
as, this is an important security feature in shared hosting
environment which minimize possible damage of a vulnerable script to
whom this script belongs to.<br>
It is very easy to turn on "suEXEC" in LiteSpeed Web Server, what you
need to do is to set "CGI set UID mode" to "DocRoot UID" when you
create a virtual host, then change the owner of the document root
directory to target user. <br>
For traditional CGI script, you can also use "CGI File UID", but
"DocRoot UID" is recommended as it works with all scripts unless the
user ID of the CGI script is different from document root user ID.
END_A

SEE_ALSO:
[END_QA]



[QA]
ID: qa_sproxy
Q: How to set up LiteSpeed Web Server as a reverse proxy server?

A: LiteSpeed Web Server can be used as a transparent reverse proxy
server running in front of any web server or application server that
supports HTTP protocol, to help improve the scalability, 
performance and security of the whole system.<br>
Please set up in the WebAdmin console according to the following steps: <br>

<ol>
	<li> Define an {PAGE=ExtApp_Help} with 
		 {ITEM=ExtApp_Help#extAppType} {val}Web Server{/}.
		 Set {ITEM=ExtApp_Help#extAppAddress} to the IP address 
		 and port used by the backend web server.
	</li> 

	<li>Two choices:<br>
	<ul>
		<li>Define a {TBL=Context_Help#proxyContext} with 
			{ITEM=Context_Help#proxyWebServer} set to the
			{PAGE=ExtApp_Help} just defined.</li>

		<li>Define a {PAGE=ScriptHandler_Help} with 
			{ITEM=ScriptHandler_Help#shType} {val}Web Server{/},
			and {ITEM=ScriptHandler_Help#shHandlerName} set to the
			{PAGE=ExtApp_Help} just defined.</li>
	</ul>
</li>
</ol>

	For example, you may want to have Apache with mod_perl to handle
	Perl scripts instead of running them as CGI, assuming Apache
	is running on the same server machine on port 8080, pointing to
	the same {ITEM=VHGeneral_Help#docRoot}. </br>

	First, define an {PAGE=ExtApp_Help}, set 
	{ITEM=ExtApp_Help#extAppType} to {val}Web Server{/},
	{ITEM=ExtApp_Help#extAppName} to {val}ApachePerl{/} and 
	{ITEM=ExtApp_Help#extAppAddress} to {val}localhost:8080{/}.<br> 
	Then define a {PAGE=ScriptHandler_Help}, set 
	{ITEM=ScriptHandler_Help#suffix} to {val}pl{/},
	{ITEM=ScriptHandler_Help#shType} to {val}Web Server{/} and
	{ITEM=ScriptHandler_Help#shHandlerName} to {val}ApachePerl{/}.


END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_jsp
Q: How to setup Servlet/JSP?

A: LiteSpeed web server supports Servlet/JSP through AJPv13 protocol. 
You can choose a Servlet engine as long as it is AJPv13 compatible. 
Please use the following guidelines to set up:

<ol>
	<li> Install an AJPv13 compatible Servlet engine.</li><br>
	
	Tomcat 3.x, 4.x and Jetty 4.x support AJPv13 protocol. The AJPv13
	compatible connector of the Servlet engine must be enabled. Please
	refer to respective documents coming with the Servlet engine. Make
	sure the Servlet engine works properly through their build-in Http
	Server.<br><br>  
	
	<li>Make the web application files available to web server.</li><br>
	
	If the Servlet engine runs on a different machine, make a local
	copy of the web application files. Skip this step if the Servlet
	engine runs on the same machine. Only the specific web application
	directory is needed, not the whole web-apps/ directory.<br> 
	
	If the web application is packed in a war file, you need to expand it. 
	The WEB-INF/web.xml must exist along with the static files and JSP
	files. The Java class files under WEB-INF/ can be removed.<br><br>
	
	<li>Configure the Servlet engine using web administration
	console.</li><br> 
	
	Under the {PAGE=ExtApp_Help} tab at server level or virtual host
	level add a Servlet engine. Make sure the
	{ITEM=ExtApp_Help#extAppAddress} matches the AJP setting in
	Servlet engine.<br><br> 
	
	<li>Create a {TBL=Context_Help#javaWebAppContext} under 
	{PAGE=Context_Help} tab of the virtual host.</li><br>
	
	The Context {ITEM=Context_Help#expuri} should match the URI used
	by the Servlet engine. 
	Set {ITEM=Context_Help#javaWebApp_location} to the directory of
	web application. Select the {ITEM=Context_Help#servletEngine}
	just created.<br><br>
	
	<li> Set {PAGE=ScriptHandler_Help} for JSP.</li><br>

	Add a {PAGE=ScriptHandler_Help} for 
	{ITEM=ScriptHandler_Help#suffix} {val}jsp{/} for the virtual
	host. Set {ITEM=ScriptHandler_Help#shType} to {val}Servlet
	Engine{/} and set the {ITEM=ScriptHandler_Help#shHandlerName} 
	to the Servlet engine just created.
	
</ol>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_mapache
Q: How to migrate from Apache?

A: If your web site does not depend on any apache modules that the equivalent is not 
currently available in LiteSpeed web server, the migration is pretty easy.<br>

<ol>
<li>
It is recommended to run LiteSpeed web server parallel to Apache
first. 
</li>

<li>
Change the user and group to the same setting as Apache by running {cmd}install.sh{/} if the 
server is started by root. 
</li>

<li>
<B>Attention: Since 2.2 release, LSWS can use Apache httpd.conf
directly without duplicating vhost configuration in LSWS, you should
try that first, for more information, please checkout our Wiki
pages.</b><br>
Create a virtual host and configure it to the same settings:<br>
<ul>
	<li>Set the {ITEM=VHGeneral_Help#docRoot} to the same directory used by Apache 
	(be careful about the permission);</li>

	<li>Add {TBL=Context_Help#cgiContext} if CGI is used in
	Apache;</li>

	<li>Set up PHP or Servlet engine in {PAGE=ExtApp_Help} if needed. </li>
	<li>Create {TBL=Context_Help#generalContext} to match the "Alias"
	in Apache.</li>
</ul>
</li>

<li>
Restart web server and test the setup by sending same requests to both servers. 
After verifying that LiteSpeed web server is working properly, you can stop Apache 
and change the listener setting to use the TCP port that Apache used.
</li>
</ol>
END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_prvtkey
Q: How to generate a SSL private key?

A: <a href="http://www.openssl.org/">OpenSSL tool kit</a> is required to generate private key.

<ol>
	<li>Install OpenSSL if it is not installed already.</li>
	<li>Create RSA private key for your web server by using command<br>
	
	{cmd}openssl genrsa -out server.key 1024{/}<br>
	
	You can create a Triple-DES encrypted private key file by using<br>
	{cmd}openssl genrsa -des3 -out server.skey 1024{/}
	</li>
	<br>
	You need to give a password (pass-phase) for the private key file. 
	You will be prompt for the password when the private key file is used every time.<br>

	LiteSpeed web server only support private key files without encryption. 
	You probably think it is not safe for the private key. Well, in theory, it is not 
	as safe as the encrypt version. But in reality, it is impossible to let user input 
	password for the SSL keys whenever the server starts or restarts. Some web server can 
	save the password somehow and automate the pass-phase when the server starts, 
	but it is only as good as the machine is not compromised unless your password is 
	hardware protected. The private key file along with the certificate file should be placed 
	in a directory that is only readable by whom the server running as.
	
	<li>If you generated the encrypted key file, the pass-phase can be removed with 
	the following command:<br>
	
	{cmd}openssl rsa -in server.skey -out server.key{/}
	</li>
</ol>

1024 in above commands is the length of the private key in bits. The bigger private key 
is more secure. You can create bigger private key like 2048 bit. However, if you plan to get 
your certificate from certificate issuer, you may have to use 1024 bit private key as it is 
the biggest key they can process, check with the issuer first.

For more information about creating SSL private key please visit 
<a href="http://www.openssl.org/docs/HOWTO/keys.txt">http://www.openssl.org/docs/HOWTO/keys.txt</a>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_selfcert
Q: How to create self-signed certificate?

A: Self-signed certificates can be used to secure the web administration console. 
It is not recommended for a public web site.

When you use a self-signed certificate, the browser will ask the user whether to accept the 
certificate or not as self-signed certificates are not trusted by the browser.

<ol>
	<li> Create your private key.</li>
	<li> Create the self-signed certificate with the command,<br>
	{cmd}openssl req -new -x509 -key server.key -out server.crt -days 365{/}<br>
	
	You will be asked for more information about your organization and web site. 
	Please give correct information. You should give valid domain names of your web site 
	when you are asked for Common Name but not any aliases. To determine the valid domain 
	name, you can use commands such as {cmd}nslookup{/}, {cmd}dig{/} or {cmd}host{/}. 
	For example, if the web site can be accessed via both 
	http://foo.bar and http://www.foo.bar, usually foo.bar is the valid domain name 
	(canonical name), www.foo.bar is an alias; foo.bar should be used for the Common Name.
	</li>
</ol>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_cert
Q: How to get a SSL certificate from certificate issuers?

A: You need to generate a certificate request from your private key and send the request 
to a certificate issuer, like VeriSign or Thawte. The certificate issuer will sign the 
request and send back the certificate. To generate a certificate request:

<ol>
	<li>Create your private key.</li>
	<li> Create the certificate request with command,<br>
	
	{cmd}openssl req -new -key server.key -out server.csr{/}<br>
	
	You will be asked for more information about your organization and web site. 
	Please give correct information. You should give valid domain names of your web site 
	when you are asked for Common Name but not any aliases. To determine the valid domain 
	name, you can use commands such as {cmd}nslookup{/}, {cmd}dig{/} or {cmd}host{/}. 
	For example, if the web site can be accessed via both 
	http://foo.bar and http://www.foo.bar, usually foo.bar is the valid domain name 
	(canonical name), www.foo.bar is an alias; foo.bar should be used for the Common Name.

	</li>
</ol>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_confssl
Q: How to configure SSL using the private key and certificate in LiteSpeed web server?

A: After you get your certificate, you can configure 
   {TBL=Listeners_SSL_Help#sslCert} for your web server.

<ol>
   <li> Create a listener with {ITEM=Listeners_General_Help#listenerSecure}
		set to {val}Yes{/}. The official port for SSL is 443, 
		but other port can be used too.</li>

   <li> Click on the newly created listener, then go to the 
		{TBL=Listeners_SSL_Help#sslCert}. Then edit the
		{ITEM=Listeners_SSL_Help#keyFile} and  
		{ITEM=Listeners_SSL_Help#certFile}. <br>
      
	  	Give the path of the SSL private key file and certificate file in the 
		pop-up window. Click "Finish" button to save your changes.
   </li>

   <li> You can specify {ITEM=Listeners_SSL_Help#sslProtocol} 
		and {ITEM=Listeners_SSL_Help#ciphers}  on the same page.
   </li>

   <li> Set {TBL=Listeners_General_Help#virtualHostMapping} in listener
   	General tab. In the pop-up window, select the 
	{ITEM=Listeners_General_Help#virtualHostName} that you 
   	want to access through this listener and 
	input the valid {ITEM=Listeners_General_Help#domainName}
   </li>
   
   <li> Click "Apply Changes" link below the banner. If the new listener 
   uses {ITEM=Listeners_General_Help#listenerPort} number less than
   {val}1024{/} click {ITEM=ServerStat_Help#restart} in {ITEM=ServerStat_Help#servAction}, 
   otherwise just click {ITEM=ServerStat_Help#reload}.
   </li>
   
   <li> Test your SSL configuration with your browser by accessing 
   https://your.domain:your_port/. The "s" after "http" at the beginning of the address 
   indicates the browser to use SSL protocol.
   </li>
   
   If you use a self-signed certificate, the browser will prompt you to accept 
   the certificate. Otherwise the browser will accept the certificate automatically 
   without bothering you.

</ol>

Now you should be able to see your web pages loaded through the secured SSL connection.

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_frontpage
Q: How to install Microsoft FrontPage Server Extension 2002 with LiteSpeed web server?

A: Please follow the following steps:
<ol>
   <li> Download the corresponding Microsoft FrontPage Server
   Extension for your platform from 
   <a href="http://www.rtr.com/fpsupport/fp2002sr1_download.htm">rtr.com</a>, 
   save it to directory lsws/add-ons/frontpage/.</li>

   <li> run FrontPage installation script as root user:<br>
		{cmd}lsws/admin/misc/fp_install.sh <path_to_frontpage_package>{/}
		</li>

   <li> Restart LSWS with root user account. </li>
</ol>
Now you can enable FrontPage extension for your web site. The most
important configuration is the {val}Domain Names{/}, it must match
the domain name part of the URL that you used to access the web page,
and otherwise it will not work. Port number should be specified, example:
{val}your.domain.name:80{/} <br>
If you enable FrontPage Server Extension for one virtual host from
LiteSpeed web admin console, LiteSpeed Web Server will try to
install it to the document root of that virtual host when restart web
server. If it is successful, you can access admin page
of that virtual host from: <br>
	{cmd}http://your.doamin.name/_vti_bin/_vti_adm/fpadmcgi.exe{/}<br>
The default login username is "admin" and password is "fp123456". You should
change the password immediately after the extension is enabled.<br>
<br>
If you changed {val}Domain Names{/} setting, you need to reinstall
FrontPage extension. What you need to do is just remove all "_vti_..."
files under the document root of your web site, then restart web server.

If you want to setup Admin Page for all virtual hosts, run the
following command at command line as root user:<br>
{cmd}/usr/local/frontpage/version5.0/bin/owsadm.exe -o setadminport -p
&lt;PORT&gt; -s &lt;path_to_/lsws/add-ons/frontage/conf/httpd.conf&gt; -username
&lt;USERNAME&gt; -pw &lt;PASSWD&gt;{/}<br>

Then add a virtual host with {ITEM=VHGeneral_Help#docRoot} pointing to
{val}/usr/local/frontpage/version5.0/admin-exes/{/} from the web admin
console. Now you can manage FrontPage Server Extension for all 
virtual hosts from this virtual host.<br>


END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_autoindex
Q: How to customize auto index script?

A: LiteSpeed web server uses an external script to generate the 
index page for a directory with no index file on the fly. The URI to the auto
index script is configurable by field {ITEM=VHGeneral_Help#autoIndexURI} at virtual host level
under general tab. Whenever a directory
with no index file is accessed, LiteSpeed Web server will perform an
internal redirect to that URI. <br>
In order to share the script among all virtual hosts, a
{TBL=Context_Help#generalContext} with {ITEM=Context_Help#expuri}
{val}/_autoindex/{/} and {ITEM=Context_Help#location}
{val}$SERVER_ROOT/share/autoindex/{/} 
is automatically created for every virtual host. <br>

A default php script is provided with same Look and Feel as
Apache's mod_autoindex. The script is located at <br>
	   {cmd}lsws/share/autoindex/default.php{/}<br>
Permission is granted to copy and change the default auto index
script. It is recommended to make changes on a copy of the default
script, the default script will be overwritten during next upgrade. 
When you write your own script, just remember that the path to
the directory to be indexed is passed to the script in a CGI
environment variable: {cmd}"LS_AI_PATH"{/}. The script can be placed at
anywhere you like, but if you want to share it among all virtual
hosts, just place it under {cmd}lsws/share/autoindex/{/}
directory. <br>

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_awstats
Q: How to use AWStats together with LiteSpeed Web Server?

A: AWStats can be used as an add-on module of LiteSpeed web server.
It has been seamlessly integrated into our web administration
console, and the configuration and statistical updates has been automated as well. <br>
To install AWStats as an add-on module, please run script: <br>
   {cmd}lsws/admin/misc/awstats_install.sh{/} <br>
This script will try to download the latest AWStats package from <a href=http://www.awstats.org>www.awstats.org</a>, expand it
under {cmd}lsws/add-ons/{/} directory and create a symbolic link
from "./awstats-x.x" to "awstats". If it fails to download for any reason, you can manually do this step as well.<br>
<br>
Next step is to enable AWStats add-on module for the virtual host that
you would have AWStats analyze its access log.<br>
From the Web Admin console, just select the virtual host on left, click "Add-on" tab on the right, then fill in configurations in "AWStats Integration" table. Configurations are<br>
<ul>
	<li>{ITEM=VHAddOns_Help#updateMode}: Disabled, Static or Dynamic.</li>
	<li>{ITEM=VHAddOns_Help#workingDir}: The directory to be used to save
	AWStats configuration and statistical results.</li>
	<li>{ITEM=VHAddOns_Help#awstatsURI}: Where the statistical results can be accessed.</li>
	<li>{ITEM=VHAddOns_Help#siteDomain}: The main domain name of the virtual host.</li>
	<li>{ITEM=VHAddOns_Help#siteAliases}: All possible add-on domains, aliases and IP
	addresses.</li>
	<li>{ITEM=VHAddOns_Help#updateInterval}: Hourly or Daily.</li>
	<li>{ITEM=VHAddOns_Help#updateOffset}: When to start the update.</li>
	<li>{ITEM=VHAddOns_Help#securedConn}: the result is access via HTTP or
	HTTPS.</li>
	<li>{ITEM=VHAddOns_Help#awstatsRealm}: To protect the result with authentication.</li>
</ul>

After applying the configuration changes, you can access the statistical
results produced by AWStats by clicking "statistics" action link for
that virtual host under "Server Manager" page.<br>
<br>
Customize AWStats configuration file:<br>
<br>
AWStats configuration file is generated automatically based on a
model configuration file <working directory>/conf/awstats.model.conf,
which is copied from
lsws/add-ons/awstats/wwwroot/cgi-bin/awstats.model.conf. The following
configuration parameters are populated by LiteSpeed: "LogFile",
"LogType", "LogFormat", "SiteDomain", "HostAliases", "DirData",
"DirConfig" and "DirIcons". Other parameters can be customized by
changing awstats.model.conf.
<br>NOTE: Never edit the destination configuration
file as it is always overwritten by LiteSpeed before invoking AWStats updates.

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_perld
Q: How to use the persistent Perl CGI daemon?

A: The configuration of Perl CGI daemon is similar to that of PHP
configuration. You need to configure it as a Fast CGI
application, and then add a script handler for "pl" or whatever suffixes
used for Perl scripts. The Perl CGI daemon is located at 
lsws/fcgi-bin/lsperld.fpl. <br>
As "lsperld.fpl" utilizes the Fast CGI interface, you need to install Perl
Fast CGI module FCGI.pm first. It is available at <a
href="http:://www.fastcgi.com">http://www.fastcgi.com</a> or through CPAN. <br>
The following command can be used to install FCGI.pm through CPAN:
{cmd} perl -MCPAN -e 'install FCGI' {/} <br>
In order to deal with increasing memory usage of a persistent process, 
number of requests that a Perl daemon can process is controlled by an
environment variable {val}FCGI_PERL_MAX_REQ{/}, default is 500. <br>
For example: {val}FCGI_PERL_MAX_REQ=1000{/}.

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_apimport
Q: How to import Apache configuration?

A: An Apache configuration migration tool -
{cmd}lsws/admin/misc/apimport.sh{/} is available to help you
migrate existing Apache configurations. If you did not import your
Apache configuration during installation, just run the migration tool
from command line:<br>
<br>
<br>
	{cmd}lsws/admin/misc/apimport.sh /etc/httpd/conf/httpd.conf{/}<br>
<br>
Then you may want to log into web admin console, check and fine tune
the configuration, then restart LiteSpeed Web Server.
For production web sites, it is recommended to test imported web sites
on a different port (bind imported virtual hosts to other listeners).

END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_pipedlogger
Q: How to use piped logger?

A: A piped logger is a standalone application that receives access log
data sent by web server through a pipe on its STDIN stream.
This makes flexible logging possible, like logging into a database. 
Here is a simple piped logger written in Perl:<br>
<pre>

#!/usr/bin/perl
open LOG, '>> ../logs/pipedaccess.log';
select LOG;
$| = 1;
while (<>)
{
  print LOG $_;
}

</pre>
It will receive data from STDIN and append to file pipedaccess.log.

To use a piped logger, first, you need to define an external application with
type "Piped Logger", then go to "Access Log" configuration and select the "Piped
logger" from the drop down list. Once a piped
logger is set, access log data will no logger be written to the access
log file.


END_A

SEE_ALSO: 
[END_QA]



[QA]
ID: qa_template
Q: How to use template to configure a group of virtual hosts with similar configuration?

A: When you host multiple web sites on one server, you may find that
most of them have similar configuration. To add a new virtual host,
you have to duplicate existing configuration and then just make some
minor changes. Also if you need to change one common configuration, you
have to edit all the configuration files one by one. It is annoying and
error-prone. LiteSpeed provides this excellent feature: virtual host
template, which will reduce the burden of a web master in above situations.
<br>
<br>
For example, if all web sites are stored on a hard drive like below:
<ul>
   <li>Each web site has it own root directory under /wwwroot
   directory.</li>
   <li>Web site's root directory is named as its qualified domain
   name, for example, directory for "www.example.com" is
   /wwwroot/www.example.com/</li>
   <li>Document root is "html/" sub-directory under the web
   site's root directory. For "www.example.com", it is
   /wwwroot/www.example.com/html/</li>
   <li>The directory for CGI scripts is "cgi-bin/" sub-directory under
   the web site's root directory. For "www.example.com", it is 
   /wwwroot/www.example.com/cgi-bin/</li>
</ul> 
  
The virtual host template should be configured like below:
<ul>
	<li>"Virtual host root" should be set to "/wwwroot/$VH_NAME/"</li>
	<li>"Document Root" should be set to "$VH_ROOT/html/" or 
    "/wwwroot/$VH_NAME/html/", the former is preferred.</li>
	<li>To add a "CGI" context, set "URI" to "/cgi-bin/", set "Path" to
    "$VH_ROOT/cgi-bin/" or "/wwwroot/$VH_NAME/cgi-bin", the former is 
	preferred.</li>
</ul>	 

If all web sites are available on port 80, you can create a listener
bind to all interfaces on port 80 and add the name of that listener to
"Mapped Listeners" configuration.<br>
<br>
Then the rest you need to do is to configure a member virtual host for
each web site. Properties for a member virtual host are:
<ul>
	<li>Virtual Host Name: This probably the only property need to be
	set if virtual host root can be somehow determined by it (like
	naming the directory after it, and the domain name is same as the virtual
	host name). </li>
	<li>Domain: need to be set when the qualified domain name of the
	web site is different from "Virtual Host Name". </li>
	<li>Aliases: need to be set if there are aliases for this web site. </li>
	<li>Virtual Host Root: The root directory for a web site, only
	need to be set when it cannot be determined by "Virtual Host Name".</li>
</ul>
For "www.example.com", because "Virtual Host Name" is equal to "Domain" and the
virtual host root directory is named after "Virtual Host Name", and
there is no alias, so all you need to do is to set "Virtual Host Name" to
"www.example.com". If you organize all your new virtual hosts in this way, then
all you need to do is to add a member virtual host with a proper
"Virtual host name". 


END_A

SEE_ALSO: 
[END_QA]



########## PAGE SECION #############


[PAGE]
ID: HowTo_QA 
NAME: HOW-TOs

PREV_NAV: security.html = SECURITY
NEXT_NAV: Faq_QA.html = FAQs
TOP_NAV: index.html = INDEX

DESCR: 
END_DESCR

CONT: qa_incfd qa_namevh qa_ipvh qa_dos qa_gzip qa_perf qa_extapp
qa_php qa_phplsapi qa_phpfcgi qa_phpacc qa_suexec qa_sproxy qa_jsp 
qa_mapache qa_prvtkey qa_selfcert
qa_cert qa_confssl qa_frontpage qa_autoindex qa_awstats qa_perld
qa_apimport qa_pipedlogger qa_template
END_CONT

SEE_ALSO: 
[END_PAGE]


[END_QADOC]
