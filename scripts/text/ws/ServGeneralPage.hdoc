[HELPDOC]


[ITEM]
ID: runningAs
NAME: Running As
REQUIRED: 
APPLY: 1
SINCE: 
SEE_ALSO: 

DESCR: Specifies the user/group that the server process runs as. 
This value was set during installation. To change it, 
you have to download the installation package and perform an upgrade via command line.
END_DESCR

SYNTAX: 
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Security] Server should not run as a privileged user such as "root". 
It is critical that the server is configured to run with a un-privileged user/group combination 
that does not have login/shell access. A user/group of {val}nobody{/} is generally a good choice.
END_TIPS

[END_ITEM]


[ITEM]
ID: cpuAffinity
NAME: CPU Affinity
REQUIRED: 
APPLY: 1
SINCE: 
SEE_ALSO: 

DESCR: CPU affinity binds a process to one or more CPUs (cores). It is beneficial for a process to always use 
the same CPU because then the process can make use of data left in CPU cache. If the process moves to a different CPU, 
there is no use of CPU cache and unnecessary overhead is required.


The CPU Affinity setting controls how many CPUs (cores) one LiteSpeed Web Server process will be associated with. 
The minimum value is {val}0{/}, which is the default value and will disable this feature. The maximum value is the number of cores the server has. Generally, {val}1{/} is the best 
setting because because it creates the strictest use of CPU affinity and thus makes the most use of CPU cache.
END_DESCR

SYNTAX: Integer value from 1 to the number of cores the server has. 0 will disable it.
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS:
END_TIPS

[END_ITEM]



[ITEM]
ID: maxConnections
NAME: Max Connections
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum number of concurrent connections that the server can accept. 
This includes both plain TCP connections and SSL connections. This setting should not be set to exceed 
the hard limit set by the server software edition or license: {val}150{/} for Standard Edition, {val}500{/} 
for VPS license, {val}800{/} for Ultra VPS license. Once the maximum concurrent connections limit is reached, 
the server will close Keep-Alive connections when they complete active requests. 
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: When the server is started by "root" user, the server will try to
adjust the per-process file descriptor limits automatically, however,
if this fails, you may need to increase this limit manually.
END_TIPS

[END_ITEM]




[ITEM]
ID: loadApacheConf
NAME: Load Apache Configuration
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies whether LiteSpeed will read and use a Apache configuration file to configure
the web server. Native configurations will have higher priority when 
there is conflict between LiteSpeed internal and Apache-based configurations. 

END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: autoReloadApacheConf
NAME: Auto Reload On Changes
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: {ITEM=apacheBinPath}

DESCR: Specifies how to apply Apache configuration changes. When set to "Yes",
LSWS will perform a graceful restart whenever the Apache configuration file
has been modified. This may cause LSWS to restart multiple times when
updating Apache configurations. A better solution (introduced in version 3.3.8)
 is "Use Apache binary wrapper". This will replace Apache httpd binary
with a wrapper script. Whenever Apache is requested to start/stop/restart, the
script will tell LSWS to take corresponding action. 
{ITEM=apacheBinPath} must be set to use this setting. Default is "No" for 
standard installations. For cPanel servers, the default is "Use Apache binary wrapper". 
("Override cPanel restart HTTPD script" is an optional workaround that should only 
be used if the option "Use Apache binary wrapper" is having problems.) 
For other control panels default is "Yes". 

END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]






[ITEM]
ID: apacheBinPath
NAME: Apache Binary Path
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: {ITEM=autoReloadApacheConf}

DESCR: Specifies the location of the Apache binary. Usually, it is located at
/usr/local/apache/bin/httpd or /usr/local/apache2/bin/httpd, etc. This option
must be set when "Use Apache binary wrapper" is used for {ITEM=autoReloadApacheConf}.

END_DESCR

SYNTAX: 
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]








[ITEM]
ID: apachePortOffset
NAME: Apache Port Offset
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies an offset to be added to listening TCP ports specified
in the Apache configuration file. In the testing phase, this allows LiteSpeed to run alongside 
Apache on a different port instead of switching back and forth between LiteSpeed and Apache 
on a production server. 

If set to {val}0{/} or not set, LiteSpeed will use the ports specified in the Apache configuration file. 
When testing, make this setting a non-zero value. LiteSpeed will then add this offset value to 
the port specified in the Apache configuration and use this port.
After confirming that everything works properly, you can stop
Apache, set this option back to {val}0{/}, and restart LiteSpeed.

END_DESCR

SYNTAX: 
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]





[ITEM]
ID: apacheIpOffset
NAME: Apache IP Offset
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies an offset to be added to listening IP address specified
in the Apache configuration file. This allows LiteSpeed to run alongside
Apache in the testing phase instead of switching back and forth between LiteSpeed and Apache
on a production server. The calculated IP address has to be available on this server. 

END_DESCR

SYNTAX: The offset should be set as an integer (allow negative number), not an IP address. 
Adding "256" will add 1 to the value of the C class subnet. This option
only works with IPv4 address. 

END_SYNTAX

EXAMPLE:  
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]






[ITEM]
ID: apacheConfFile
NAME: Apache Configuration File
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies the location of Apache configuration 
file. Usually, it is located at
/usr/local/apache/conf/httpd.conf or /etc/httpd/conf/httpd.conf.
END_DESCR

SYNTAX: 
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]




[ITEM]
ID: apacheHandledContent
NAME: Apache Handled Content
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies resources to be passed to and processed by 
Apache on the backend. 
This feature requires running Apache parallel to LiteSpeed on either another
IP or a different port, so either "Apache Port Offset" or "Apache IP Offset" 
should be set to a non-zero value. 


END_DESCR

SYNTAX: Resources are specified by a comma delimited list of URI, file suffixes, or regular
expressions. A URI starts with "/"; a suffix starts with ".", a regular expression starts with "exp:". 
For example: "/svn/, .shtml" lets Apache handle requests with a URI
starting with "/svn/" or ending with ".shtml". The same effect can be achieved
with the regular expression "exp:^/svn/, exp:\.shtml$".
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: apacheIgnoredModules
NAME: Ignore Apache Modules
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies a list of names of Apache modules that should be ignored by LiteSpeed 
while parsing the Apache configuration file. LiteSpeed will treat the listed modules as 
unsupported. This will cause configuration directives related to these modules enclosed 
in matching &lt;IfModule&gt; or &lt;IfDefined&gt; tags to be ignored.
END_DESCR

SYNTAX: comma delimited list of module names
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]




[ITEM]
ID: jitConfig
NAME: Just In Time Configuration
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: With just in time configuration, the web server only finalizes vhost configurations when that virtual host 
is accessed for the first time, instead of loading all configurations at start up. This allows the web server to save 
memory and speed up server start up.
END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]






[ITEM]
ID: phpSuExec
NAME: PHP suEXEC
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: {ITEM=ServSecurity_Help#forceGID}

DESCR: Specifies whether to run PHP script in suEXEC mode when "user"
and "group" are specified for a virtual host. When set to {val}Yes{/}, PHP
scripts will be executed under the user (and group unless {ITEM=ServSecurity_Help#forceGID} is set) specified.
When set to {val}User's Home Directory Only{/}, scripts outside a user's 
home directory will run as the global user/group that the web server
run as. When using DirectAdmin, {val}User's Home Directory Only{/} is recommended.
Default is {val}No{/}.

END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]







[ITEM]
ID: phpSuExecMaxConn
NAME: PHP suEXEC Max Conn
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum number of concurrent PHP processes that can be created by LSWS for each user when running PHP scripts in suEXEC mode. Default value is {val}5{/}.

END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: This limit is per user per lshttpd process. Thus, if you have a 2-CPU license, this limit will be doubled. The limit will be 4x for a 4-CPU license, and so on.
END_TIPS

[END_ITEM]



[ITEM]
ID: apacheEnvVars
NAME: Apache Environment Variables
REQUIRED: 
APPLY: 2
SINCE: 4.1.8
SEE_ALSO: Apache Env Syntax <a href="http://httpd.apache.org/docs/2.2/configuring.html#syntax">reference</a> 

DESCR: For shell environment variables used inside the Apache configuration file, LSWS will replace "${ENVVAR}" 
with the values set here. If the ENVVAR variable is not set here, "${ENVVAR}" occurrences are left unchanged.
END_DESCR

SYNTAX: Name and value pairs, one pair per line in the form of ENV=VALUE
END_SYNTAX

EXAMPLE:  
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: apacheEnableFP
NAME: Enable FrontPage Extension
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies whether to explicitly enable Microsoft Front Page Server
Extension or not. Usually, LSWS will enable it when module "frontpage" has
been loaded in Apache httpd.conf. However, when mod_frontpage is statically
linked into the Apache binary, configuration for the FrontPage module is not in
httpd.conf, and you need to enable it explicitly here. Default is "disabled".

END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: apacheConf
NAME: Apache Style Configurations
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies Apache configuration directives (supported by LiteSpeed) that 
you want to use in LiteSpeed native configuration file. 
For example, to override the default PHP configurations (php.ini entries) 
the server will need four directives: "php_value", "php_flag", 
"php_admin_value" and "php_admin_flag".
END_DESCR

SYNTAX: Same as Apache configuration file.
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]

[ITEM]
ID: useAIO
NAME: Use AIO
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: {ITEM=AIOBlockSize}

DESCR: Specifies whether to use AIO to serve static files. AIO will help if
your server has a high I/O wait. For 64bit operation system, there is an option to keep 
files mapped in process address space to improve AIO performance.

END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]

[ITEM]
ID: AIOBlockSize
NAME: AIO Block Size
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: {ITEM=useAIO}

DESCR: Specifies the sent block size for AIO. 
This block size multiplied by the total files being processed should be less than the physical 
memory of the server, otherwise, AIO will not help. If your server has enough memory, 
you can choose a bigger size. Default value is "1M".

END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: suffix
NAME: Suffix
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR:  Specifies the script file suffixes that will be handled by this 
script handler. Suffixes must be unique. 
END_DESCR

EDITTIP: If the web site supports php or jsp, please set up here.
END_EDITTIP

SYNTAX: Comma delimited list with period "." character prohibited.
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: The server will automatically add a special MIME type ("application/x-httpd-[suffix]") for the first 
suffix in the list. For example, MIME type "application/x-httpd-php53" will be added 
for suffix "php53". Suffixes after the first need to set up in the {ITEM=mime} settings.

Though we list suffixes in this field, the script handlers use MIME types, not suffixes, 
to decide which scripts to handle. You can thus use the Apache configuration directives 
"AddType" and "ForceType" (which control file MIME types) in .htaccess files to change 
which script handler certain files will use. For example, with the directive 
{cmd} AddType application/x-httpd-php53 .php{/} in a properly placed .htaccess file, 
you can stipulate that php files in this directory have the MIME type "application/x-httpd-php53" and 
thus will be handled by the script handler that uses MIME type "application/x-httpd-php53" 
(suffix "php53"). This then allows you to assign different script handlers, not only for 
different file suffixes, but also based on the locations of files.

[Performance & Security] Only specify the suffixes you really need.
END_TIPS

[END_ITEM]



[ITEM]
ID: allowOverride
NAME: Allow Override
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies what directives in an access control file are allowed. 
An access control file can be placed in a directory to control the accessibility 
of files under that directory. 

<ul>
	<li>When nothing is checked, inherited default settings will be
	used. </li>
	<li>When {val}None{/} is checked, access control files will be
	ignored.
	</li>
	<li>When {val}Limit{/} is checked, directives "Order",
	"Allow from" and "Deny from" are allowed. </li>
	<li>When {val}Auth{/} is checked, directives
	"AuthGroupFile",  "AuthName", "AuthType", 
	"AuthUserFile", and "Require" are allowed.</li>
	<li>When {val}FileInfo{/} is checked, directives
	"Satisfy", AddDefaultCharset", "AddType",
	"DefaultType", "ForceType", "ExpiresActive", "ExpiresDefault",
	"ExpiresByType", "Redirect", "RedirectTemp", "RedirectPermanent",
	"RewriteEngine", "RewriteOptions", "RewriteBase", "RewriteCond"
	and "RewriteRule" are allowed</li>
	<li>When {val}Indexes{/} is checked, directive
	"DirectoryIndex" is allowed</li>
	<li>When {val}Options{/} is checked, directive
	"Options" is allowed</li>
</ul>

Allow Override configuration is available at three levels: server, 
virtual host and context. If a configuration is not checked at the server level, 
the controlled directives will be disabled for the whole server whether or not 
it is enabled at lower levels. If something is enabled at the server level, virtual hosts will 
inherit same settings by default. Similarly context level settings will be inherited from virtual host settings. 
Lower levels can disable a setting that is enabled at an upper level, but cannot 
enable a setting that is disabled at an upper level.
END_DESCR

SYNTAX: checkbox
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] If there is no need for directory level
configuration customization, check {val}None{/}.
END_TIPS

[END_ITEM]



[ITEM]
ID: allowOverrideContext
NAME: Allow Override
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies what directives in an access control file are allowed. 
An access control file can be placed in a directory to control the accessibility 
of files under that directory. 

<ul>
	<li>When nothing is checked, inherited default settings will be
	used. </li>
	<li>When {val}None{/} is checked, access control files will be
	ignored.
	</li>
	<li>When {val}Limit{/} is checked, directives "Order",
	"Allow from" and "Deny from" are allowed. </li>
	<li>When {val}Auth{/} is checked, directives
	"AuthGroupFile",  "AuthName", "AuthType", 
	"AuthUserFile", and "Require" are allowed.</li>
	<li>When {val}FileInfo{/} is checked, directives
	"Satisfy", AddDefaultCharset", "AddType",
	"DefaultType", "ForceType", "ExpiresActive", "ExpiresDefault",
	"ExpiresByType", "Redirect", "RedirectTemp", "RedirectPermanent",
	"RewriteEngine", "RewriteOptions", "RewriteBase", "RewriteCond"
	and "RewriteRule" are allowed</li>
	<li>When {val}Indexes{/} is checked, directive
	"DirectoryIndex" is allowed</li>
	<li>When {val}Options{/} is checked, directive
	"Options" is allowed</li>
</ul>

Allow Override configuration is available at three levels: server, 
virtual host and context. If a configuration is not checked at the server level, 
the controlled directives will be disabled for the whole server whether or not 
it is enabled at lower levels. If something is enabled at the server level, virtual hosts will 
inherit same settings by default. Similarly context level settings will be inherited from virtual host settings. 
Lower levels can disable a setting that is enabled at an upper level, but cannot 
enable a setting that is disabled at an upper level.
END_DESCR

EDITTIP: Allow Override will be effective only if server/vhost level setting is enabled. Context will inherit virtual host settings by 
default when nothing is checked. When nothing but "None" is checked, access control file will be ignored. When "Access Control" is checked, 
directives "Order", "Allow" and "Deny" are allowed. When "Authentication" is checked, directives "AuthGroupFile", "AuthName", "AuthType", "AuthUserFile", 
"Require" are allowed.
END_EDITTIP

SYNTAX: checkbox
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] If there is no need for directory level
configuration customization, check {val}None{/}.
END_TIPS

[END_ITEM]



[ITEM]
ID: accessFileName
NAME: Access File Name
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: {ITEM=allowOverride}

DESCR: Specifies the name of access control files. These files will be used only if 
{ITEM=allowOverride} is enabled. Default name is {val}.htaccess{/}. 
You can configure this at server level and virtual host level. Server level is the default setting, and you 
 can override it at virtual host level.
END_DESCR

SYNTAX: File name with ".".
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]


[ITEM]
ID: listenerBinding
NAME: Binding
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: {ent_version} Specifies which lshttpd child
process the listener is assigned to. Enterprise Edition spawns
multiple child processes to take advantage of the multiple CPUs in a
SMP system. Different child processes can be used to handle requests to
different listeners by manually associating a listener with a
process. By default, a listener is assigned to all child processes.
END_DESCR

SYNTAX: checkbox
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: disableInitLogRotation
NAME: Disable Initial Log Rotation 
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies whether to disable rotation of server error log
file at startup. Initial log rotation is enabled by default for standard installations. 
Servers using cPanel, however, always write to the Apache error log and thus ignore this setting.

END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: extAppAbort
NAME: External Application Abort
REQUIRED: 
APPLY: 
SINCE: 4.2.3
SEE_ALSO: 

DESCR: When a client breaks a connection with the server, LiteSpeed Web Server can automatically abort external application processes generating responses for that client. Some users, however, may have (long-running) processes that they wish to continue running whether or not the client is still connected.


There are three options for this:
<ul>
<li>No Abort: Never abort external applications because of a broken connection.</li>
<li>Enable Abort for Requests from External IPs: Only processes started by requests from external IPs will be automatically aborted because of a broken connection. This is the default setting. It is a good setting if you have some internal long-running processes, like some cron jobs.</li>
<li>Enable Abort for All Requests: External application processes will be automatically aborted if the connection is broken, regardless of the source of the request.</li>
</ul>
END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: ramDiskPath
NAME: RAM Disk Path
REQUIRED: 
APPLY: 
SINCE: 4.2.4
SEE_ALSO: 

DESCR: Setting the RAM Disk Path allows you to designate the location of a RAM disk. A RAM disk 
is a world-writable directory stored in memory. A server with excess RAM can reduce disk I/O by serving 
content from this RAM disk. Accessing content from RAM is much faster than reading data from the disk. 
LSWS will use this RAM disk to optimize performance when there is enough memory available.


(The RAM disk must be designated in your OS setup before it can be used by the web server. 
Many Linux distributions assign /dev/shm as a RAM disk by default, but these settings depend on your OS.) 
END_DESCR

SYNTAX: path
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



############################ TBL #########################



[TBL]
ID: htaccess
NAME: HT Access

DESCR: 
The following directives are supported in a directory level
access control file (.htaccess file).
<ul>
  <li>Authentication
    <ul>
    <li>AuthType</li>
    <li>AuthName</li>
    <li>AuthUserFile</li>
    <li>AuthGroupFile</li>
    <li>Require</li>
    </ul>
  </li>
  <li>Access Control
    <ul>
    <li>Allow from</li>
    <li>Deny from</li>
    <li>Order</li>
    </ul>
  </li>
  <li>File Info
    <ul>
    <li>AddDefaultCharset</li>
    <li>AddType</li>
    <li>DefaultType</li>
    <li>ExpiresActive</li>
    <li>ExpiresDefault</li>
    <li>ExpiresByType</li>
    <li>ForceType</li>
    <li>Redirect</li>
    <li>RedirectTemp</li>
    <li>RedirectPermanent</li>
    <li>RewriteEngine</li>
    <li>RewriteOptions</li>
    <li>RewriteBase</li>
    <li>RewriteCond</li>
    <li>RewriteRule</li>
    <li>Satisfy</li>
    </ul>
  </li>
  <li>Other
    <ul>
	<li>&lt;Limit&gt;</li>
	<li>&lt;LimitExcept&gt;</li>
    <li>DirectoryIndex</li>
    <li>Options</li>
    </ul>
  </li>
</ul>

END_DESCR

EDITTIP: Allow Override configuration is available in three levels: server level, virtual host level and context level. Server level is 
the overall control, i.e. lower level can disable a setting which is enabled by upper level, but cannot enable a setting which is disabled by upper level.
END_EDITTIP

EDITTIP: When all checkboxes are unchecked, default setting will be used.
END_EDITTIP

EDITTIP: When nothing but "None" is checked, access control file will be ignored.
END_EDITTIP

EDITTIP: When "Access Control" is checked, directives "Order", "Allow" and "Deny" are allowed.
END_EDITTIP

EDITTIP: When "Authentication" is checked, directives "AuthGroupFile", "AuthName", "AuthType", "AuthUserFile", "Require" are allowed. 
END_EDITTIP

EDITTIP: It is recommended to use a hidden access file, simply put file name starting with ".", like ".htaccess". LiteSpeed web server does not serve hidden files.
END_EDITTIP

CONT: allowOverride accessFileName 
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: apacheConfigFile
NAME: Using Apache Configuration File

DESCR: 
END_DESCR

CONT: loadApacheConf autoReloadApacheConf apacheBinPath apacheConfFile
apachePortOffset apacheIpOffset apacheHandledContent apacheIgnoredModules jitConfig phpSuExec
phpSuExecMaxConn apacheEnableFP apacheEnvVars
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: apacheConfig
NAME: Apache Style Configuration

DESCR: 
END_DESCR

CONT: apacheConf 
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: servProcess
NAME: Server Process

DESCR: 
END_DESCR

CONT: serverName runningAs serverPriority cpuAffinity servChrootPath enableChroot
enableLVE inMemBufSize swappingDir autoFix503 enableh2c gracefulRestartTimeout
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: servGeneral
NAME: General Settings

DESCR: 
END_DESCR

EDITTIP: MIME settings can be edited from previous page. You can specify the mime configuration file location which can be either be an absolute path or relative 
to $SERVER_ROOT.
END_EDITTIP

CONT: mime mimesuffix mimetype disableInitLogRotation showVersionNumber 
hideSigInErrorPage enableIpGeo useIpInProxyHeader extAppAbort  
autoUpdateInterval autoUpdateDownloadPkg adminEmails 
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: osTuning
NAME: OS Optimization

DESCR: 
END_DESCR

CONT: eventDispatcher ramDiskPath SSLCryptoDevice SSLStrongDhKey
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: connTuning
NAME: Connection Tuning

DESCR: 
END_DESCR

CONT: maxConnections maxSSLConnections connTimeout maxKeepAliveReq
smartKeepAlive keepAliveTimeout sndBufSize rcvBufSize
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: staticTuning
NAME: Static File Delivery Optimization

DESCR: 
END_DESCR

CONT: maxCachedFileSize totalInMemCacheSize maxMMapFileSize totalMMapCacheSize
useSendfile useAIO AIOBlockSize fileETag
END_CONT

SEE_ALSO: 
[END_TBL]



############### PAGE ####################

[PAGE]
ID: ServGeneral_Help 
NAME: Server General

DESCR: General settings for the whole server. When path information is required in a setting, 
it can be either absolute or relative to $SERVER_ROOT. $SERVER_ROOT is the 
location where LiteSpeed web server has been installed (your_home_dir/lsws or 
/opt/lsws, for example). The server executable is under $SERVER_ROOT/bin. 
END_DESCR

CONT: servProcess  servGeneral servIndex htaccess servLog servAcLog 
 expire geolocationDB apacheConfigFile apacheConfig
END_CONT

SEE_ALSO: 
[END_PAGE]



[PAGE]
ID: VHGeneral_Help 
NAME: Virtual Host General

DESCR: 
END_DESCR

CONT: vhGeneral vhLog vhAcLog vhIndex errPage scriptHandler htaccess
vhExpire apacheConfig 
END_CONT

SEE_ALSO: 
[END_PAGE]



[END_HELPDOC]
