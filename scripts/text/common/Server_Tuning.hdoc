[HELPDOC]


############# OS Optimization #############


[ITEM]
ID: eventDispatcher
NAME: I/O Event Dispatcher 
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies which I/O event dispatcher to use. Different
operating systems support different types of event dispatcher:
<ul>
  <li>Linux kernel 2.4.x supports:
     <ul><li>poll</li></ul>
  </li>
  <li>Linux kernel 2.6.x supports:
     <ul><li>poll</li><li>epoll</li></ul>
  </li>
  <li>FreeBSD supports:
     <ul><li>poll</li><li>kqueue</li></ul>
  </li>
  <li>Solaris supports:
     <ul><li>poll</li><li>devpoll</li></ul>
  </li>
  <li>Mac OS X 10.3 and above supports:
     <ul><li>poll</li><li>kqueue</li></ul>
  </li>
</ul>
  {val}poll{/} is supported by all platforms, and is the default selection. 
  For high traffic web sites, an altenative event dispatcher can be used to improve the 
  scalability of the {ws_lb}. 
END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: SSLCryptoDevice
NAME: SSL Hardware Accelerator
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: {ent_version} Specifies which SSL hardware acceleration device to use. Only
devices supported by OpenSSL can be used. Select {val}OpenSSL internal
engine{/} if no device is installed. 
END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: SSLStrongDhKey
NAME: SSL Strong DH Key
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies whether to use 2048 or 1024 bit DH keys for SSL handshakes. If set to "Yes", 2048 bit DH keys will be used for 2048 bit SSL keys and certificates. 
1024 bit DH keys will still be used in other situations. Default is "Yes".

Earlier versions of Java do not support DH key size higher than 1024 bits. If Java client compatibility is required, setting should be set to "No".
END_DESCR

SYNTAX: radio
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



############# Connection #############

[ITEM]
ID: maxSSLConnections
NAME: Max SSL Connections
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum number of concurrent SSL connections the server will accept. 
Since total concurrent SSL and non-SSL connections cannot exceed the limit specified by 
{ITEM=maxConnections}, the actual number of concurrent SSL connections allowed 
must be lower than this limit.
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: connTimeout
NAME: Connection Timeout (secs)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: <ITEM=keepAliveTimeout>

DESCR: Specifies the maximum connection idle time allowed during processing one request. 
The connection will be closed if it has been idle, i.e. no I/O activity, for this period 
of time. 
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Security] Set this as low as you can to help recover dead 
connections during a potential DoS attack.
END_TIPS

[END_ITEM]



[ITEM]
ID: maxKeepAliveReq
NAME: Max Keep-Alive Requests
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: Virtual Host {ITEM=VirtualHosts_Help#vhMaxKeepAliveReq}

DESCR: Specifies the maximum number of requests that can be served through a keep-alive (persistent) 
session. The connection will be closed once this limit is reached. You
can set this limit for each virtual host as well. 
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] Set this to a reasonably high value. A value of "1" or "0" will disable keep-alive.
END_TIPS

[END_ITEM]



[ITEM]
ID: smartKeepAlive
NAME: Smart Keep-Alive
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: Virtual Host {ITEM=VirtualHosts_Help#vhSmartKeepAlive}
DESCR: Specifies whether to turn on Smart Keep-Alive. This option is
effective only if {ITEM=maxKeepAliveReq} is greater than 1. If enabled,
you can also enable/disable it at the virtual host level. Smart keep-alive
will only establish keep-alive connections for requests of JavaScript,
CSS Style Sheet, and image files. For html pages, the connection will not be kept alive. This
will help serve more users more efficiently. Normally a web page
contains multiple images and scripts that will be cached by the browser after the initial request. 
It is more efficient to send those non-html static files through a single keep-alive
connection and have the text/html file sent through another non-keep-alive connection. This
method will reduce idle connections and in turn increase the capacity to handle more concurrent requests
and users.
END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] Enable this for high-load web sites.
END_TIPS

[END_ITEM]



[ITEM]
ID: keepAliveTimeout
NAME: Keep-Alive Timeout (secs)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum idle time between requests from a keep-alive connection. 
If no new request is received during this period of time, the connection will be closed.
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Security & Performance] We recommend you to set the value just long enough to handle 
all requests for a single page view. It is unnecessary to keep connections alive
for an extended period of time. A smaller value can reduce idle
connections, increase capacity to service more users, and guard against DoS attacks. {val}2-5{/} seconds is a 
reasonable range for most applications. LiteSpeed is highly efficient in a non-keep-alive environment.
END_TIPS

[END_ITEM]



[ITEM]
ID: sndBufSize
NAME: Send Buffer Size (bytes)
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: The sending buffer size of each TCP socket. Set to {val}0{/} to use the default 
buffer size of the operating system. {val}65535{/} is the maximum allowed buffer size.
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] If your web site serves large static files, increase the send buffer
 size to improve performance.
END_TIPS

[END_ITEM]



[ITEM]
ID: rcvBufSize
NAME: Receive Buffer Size (bytes)
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: The receiving buffer size of each TCP socket. Set to {val}0{/} to use the default 
buffer size of the operating system. {val}65535{/} is the maximum allowed buffer size.
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] A large receive buffer will increase performance when processing
 incoming requests with large payloads, i.e. file uploads.
END_TIPS

[END_ITEM]



############# Request/Response #############


[ITEM]
ID: maxReqURLLen
NAME: Max Request URL Length (bytes)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum size of a request URL. URL is the full text address used to access
a server resource including the query string. {val}8192{/} bytes is the hard limit.
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Security & Performance] Set it reasonably low to reduce memory usage 
and help identify bogus requests and DoS attacks. 

2-3K is big enough for most web sites unless the HTTP GET method is used with large query strings instead of POST.
END_TIPS

[END_ITEM]



[ITEM]
ID: maxReqHeaderSize
NAME: Max Request Header Size (bytes)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum size of a HTTP request header including request URL. 
Hard limit is {val}16380{/} bytes. 
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Security & Performance] Set it reasonably low to reduce memory usage and 
help identify bogus requests and DoS attacks.

4-8K is big enough for most web sites.
END_TIPS

[END_ITEM]



[ITEM]
ID: maxReqBodySize
NAME: Max Request Body Size (bytes)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum size of a HTTP request body. For a 32Bit OS, {val}2GB{/} is the hard limit.
 For a 64Bit OS, it is virtually unlimited. 
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Security] To help prevent DoS attacks, try to constrain this limit to only what is really needed. 
Your swapping space must have enough free space to accommodate this limit.
END_TIPS

[END_ITEM]



[ITEM]
ID: maxDynRespHeaderSize
NAME: Max Dynamic Response Header Size (bytes)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum header size of a dynamically generated response. Hard limit is {val}8KB{/}.
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Reliability & Performance] Set it reasonably low to help recognize bad 
responses dynamically generated by external applications. 
END_TIPS

[END_ITEM]



[ITEM]
ID: maxDynRespSize
NAME: Max Dynamic Response Body Size (bytes)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum body size of a dynamically generated response. Hard limit is {val}2047MB{/}.
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Reliability & Performance] Set the limit reasonably low to help 
identify bad responses. It is not uncommon to malformed scripts to contain an 
infinite loop which leads to infinity-sized responses.
END_TIPS

[END_ITEM]



############# Static File Delivery Optimization #############


[ITEM]
ID: maxCachedFileSize
NAME: Max Cached Small File Size (bytes)
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies the largest static file that will be cached in a
pre-allocated memory buffer. Static files can be served in four different
ways: memory buffer cache, memory-mapped cache, plain read/write, and sendfile().
Files whose size is smaller than this setting are served
from memory buffer cache. Files whose size is larger than this setting, but smaller than the
{ITEM=maxMMapFileSize} will be served from memory-mapped cache.
Files whose size is larger than the {ITEM=maxMMapFileSize} will be served via
plain read/write or sendfile(). It is optimal to serve static files smaller than 4K from the memory
buffer cache. 
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: totalInMemCacheSize
NAME: Total Small File Cache Size (bytes)
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies the total memory that can be allocated to the 
buffer cache in order to cache/serve small static files.
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: maxMMapFileSize
NAME: Max MMAP File Size (bytes)
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR:  Specifies the largest static file that will be memory mapped
(MMAP). 
 Static files can be served in four different
ways: memory buffer cache, memory-mapped cache, plain read/write, and sendfile(). 
Files whose size is smaller than the {ITEM=maxCachedFileSize} are served
from memory buffer cache. Files whose size is larger than the 
 {ITEM=maxCachedFileSize}, but smaller than the Max MMAP File Size 
 will be served from memory-mapped cache.
Files whose size is larger than the Max MMAP File Size will be served via
plain read/write or sendfile(). 
Since the server has a 32bit address space (2GB), it is not recommended to memory map
very large files. 
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: totalMMapCacheSize
NAME: Total MMAP Cache Size (bytes)
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies the total memory that can be allocated for memory-
mapped cache in order to cache/serve medium sized static files. 
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: useSendfile
NAME: Use sendfile()
REQUIRED: 
APPLY: 2
SINCE: 
SEE_ALSO: 

DESCR: Specifies whether to use the sendfile()
system call to serve static files. Static files can be served in four different
ways: memory buffer cache, memory-mapped cache, plain read/write, and sendfile().
Files smaller than the {ITEM=maxCachedFileSize} are served from memory buffer cache. 
Files larger than the {ITEM=maxCachedFileSize} but smaller than the  
{ITEM=maxMMapFileSize} will be served from memory-mapped cache. 
Files larger than the {ITEM=maxMMapFileSize} will be served via
plain read/write or sendfile(). Sendfile() is a "zero copy" system
call that can greatly reduce CPU utilization when serving very large
static files. Sendfile() requires an optimized network card kernel driver
and thus may not be suitable for some small-vendor network adapters.
 
END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: fileETag
NAME: File ETag
REQUIRED: 
APPLY: 2
SINCE: 4.2.2
SEE_ALSO: 

DESCR: Specifies whether to use a file's inode, last-modified time, and size attributes 
to generate the ETag HTTP response header for static files.  
All three attributes are enabled by default. 
If you plan to serve the same file out of mirrored servers, you should not include 
inode; otherwise, the ETag generated for one file will be different on different servers.

END_DESCR

SYNTAX: checkbox
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



############# GZIP Compression #############


[ITEM]
ID: enableGzipCompress
NAME: Enable Compression
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Controls GZIP compression for both static and dynamic HTTP responses. 
END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] Enable it to save network bandwidth. Text-based responses such as 
html, css, and javascript files benefit the most and on average can be compressed to half 
of their original size.
END_TIPS

[END_ITEM]



[ITEM]
ID: enableDynGzipCompress
NAME: Enable Dynamic Compression
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Controls GZIP compression for dynamically generated HTTP response. 
{ITEM=enableGzipCompress} must be set to {val}Yes{/} in order to enable dynamic GZIP compression.
END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] Compressing dynamic responses increases CPU and memory 
utilization but saves network bandwidth. 
END_TIPS

[END_ITEM]



[ITEM]
ID: gzipCompressLevel
NAME: Compression Level (Dynamic Content)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the level of compression for dynamic content. Ranges 
from {val}1{/} (lowest) to {val}9{/} (highest). The default is {val}2{/}.
END_DESCR

SYNTAX: Number between 1 and 9.
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] Higher compression level will use more memory and CPU cycles. 
You can set it to a higher level if your machine has additional power. There is not much difference
between 6 and 9, except 9 uses many more CPU cycles.
END_TIPS

[END_ITEM]



[ITEM]
ID: compressibleTypes
NAME: Compressible Types
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies what MIME types are allowed to be compressed. 
END_DESCR

SYNTAX: MIME type list separated by commas. Wild card "*" and 
negate sign "!" are allowed, such as text/*, !text/js.
END_SYNTAX

EXAMPLE: If you want to compress text/* but not text/css, you can have a rule like 
{val}text/*, !text/css{/}. "!" will exclude that MIME type.
END_EXAMPLE

TIPS: [Performance] Only allow types that will benefit from GZIP compression. Binary 
files such as gif/png/jpeg images and flash files do not benefit from compression.
END_TIPS

[END_ITEM]



[ITEM]
ID: gzipAutoUpdateStatic
NAME: Auto Update Static File
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies whether to let the {ws_lb} should automatically create/update 
GZIP-compressed versions of compressible static files. If set to {val}Yes{/}, 
when a file with a MIME type listed in {ITEM=compressibleTypes} is requested, 
the {ws_lb} may create or update the corresponding compressed version of 
the file depending on the compressed file's timestamp. This compressed file 
is created under the {ITEM=gzipCacheDir}. The file name is based on a MD5 
hash of the path of the original file. 
END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: gzipCacheDir
NAME: Static GZIP Cache Directory
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the path of the directory used to store compressed
files for static content. The default is {ITEM=swappingDir}.
END_DESCR

SYNTAX: Directory Path
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: gzipStaticCompressLevel
NAME: Compression Level (Static Content)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the level of compression for static content. Ranges 
from {val}1{/} (lowest) to {val}9{/} (highest). The default is {val}6{/}.
END_DESCR

SYNTAX: Number between 1 and 9.
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: gzipMaxFileSize
NAME: Max Static File Size (bytes)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum size of a static file for which the
{ws_lb} will create a compressed file automatically. 
END_DESCR

SYNTAX: Number in bytes not less than 1K.
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Performance] It is not recommended to have {ws_lb} create/update
compressed files for large files. Compressing blocks an entire server process and 
no further requests can be processed until the compression is completed.
END_TIPS

[END_ITEM]



[ITEM]
ID: gzipMinFileSize
NAME: Min Static File Size (bytes)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the minimum size of a static file for which the
{ws_lb} will create a corresponding compressed file. 
END_DESCR

SYNTAX: Number in bytes not less than 200.
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: It is not necessary to compress very small files as the bandwidth saving is negligible.
END_TIPS

[END_ITEM]


[END_HELPDOC]