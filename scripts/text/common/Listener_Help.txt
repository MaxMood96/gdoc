[HELPDOC]




[ITEM]
ID: listenerName
NAME: Listener Name
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: A unique name for this listener.
END_DESCR

SYNTAX: text
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]





[ITEM]
ID: listenerIP
NAME: IP Address
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the IP of this listener. All available IP addresses are listed. 
IPv6 addresses are enclosed in "[]". To listen on all IPv4 IP addresses, select 
{val}ANY{/}. To listen on all IPv4 and IPv6 IP addresses,
select {val}[ANY]{/}. In order to serve both IPv4 and IPv6
clients, an IPv4-mapped IPv6 address should be used instead of a
plain IPv4 address. An IPv4-mapped IPv6 address is written as [::FFFF:x.x.x.x].
END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Security] If your machine has multiple IPs on different sub-networks, 
you can select a specific IP to only allow traffic from the corresponding sub-network.
END_TIPS

[END_ITEM]





[ITEM]
ID: listenerPort
NAME: Port
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the TCP port of the listener. Only the super user ("root") can use ports  
lower than {val}1024{/}. Port {val}80{/} is the default HTTP port. Port {val}443{/} 
is the default HTTPS port. 
END_DESCR

SYNTAX: uint
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]






[ITEM]
ID: listenerSecure
NAME: Secure
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies whether this is a secure (SSL) listener. 
For secure listeners, additional SSL settings need to be set properly.
END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]





[ITEM]
ID: virtualHostName
NAME: Virtual Host
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the name of a virtual host. 
END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]





[ITEM]
ID: domainName
NAME: Domains
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the mapping domain names. Domain names are case 
insensitive and the leading "www." will be removed. The wildcard 
characters "*" and "?" are allowed. "?" only represents one character. 
"*" represents any numbers of characters. 
Duplicated domain names are not allowed. 
END_DESCR

SYNTAX: Comma-separated list.
END_SYNTAX

EXAMPLE: www?.example.com

"*.mydomain.com" will match all subdomains of mydomain.com.

"*" by itself is the catchall domain and will match any unmatched domain names.
END_EXAMPLE

TIPS: [Performance] If a listener is dedicated to one virtual host, 
always use {val}*{/} for the domain name to avoid unnecessary
checking. Domain names with wildcard characters  (other than the catchall domain) 
should be avoided whenever possible.
END_TIPS

[END_ITEM]





[ITEM]
ID: certFile
NAME: Certificate File
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the file name of the SSL certificate file.
END_DESCR

SYNTAX: file2
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Security] The certificate file should be placed in a secured directory, 
which allows read-only access to the user that the server runs as.
END_TIPS

[END_ITEM]





[ITEM]
ID: certChain
NAME: Chained Certificate
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies whether the certificate is a chained certificate or
not. The file that stores a certificate chain must be in PEM format,
and the certificates must be in the chained order, from the lowest level
(the actual client or server certificate) to the highest level (root) CA.
END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]





[ITEM]
ID: keyFile
NAME: Private Key File
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the file name of the SSL private key file. The key file should not be encrypted.
END_DESCR

SYNTAX: file2
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Security] The private key file should be placed in a secured directory that 
allows read-only access to the user the server runs as.
END_TIPS

[END_ITEM]



[ITEM]
ID: CACertPath
NAME: CA Certificate Path
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the directory where the certificates of certification 
authorities (CAs) are kept. Those certificates are used for client certificate authentication  
and constructing the server certificate chain, which will be sent to browsers in
addition to the server certificate. 
END_DESCR

SYNTAX: path
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]





[ITEM]
ID: CACertFile
NAME: CA Certificate File
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the file that contains all certificates of certification
authorities (CAs) for chained certificates. 
This file is simply the concatenation of PEM-encoded certificate 
files, in order of preference. This can be used as an alternative or
in addition to {ITEM=CACertPath}. Those certificates are used for client certificate authentication
and constructing the server certificate chain, which will be sent to browsers in
addition to the server certificate.
END_DESCR

SYNTAX: file2
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: clientVerify
NAME: Client Verification
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR:{ent_version} Specifies the type of client certifcate authentication.
Available types are:
<ul>
<li>None: No client certificate is required.</li>
<li>Optional: Client certificate is optional.</li>
<li>Require: The client must has valid certificate.</li>
<li>Optional_no_ca: Same as optional.</li>
</ul>
The default is "None". 
END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS:  "None" or "Require" are recommended.
END_TIPS

[END_ITEM]


[ITEM]
ID: verifyDepth
NAME: Verify Depth
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR:{ent_version} Specifies how deeply a certificate should be verified before 
determining that the client does not have a valid certificate.
The default is "1".
END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]




[ITEM]
ID: crlPath
NAME: Client Revocation Path
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR:{ent_version} Specifies the directory containing PEM-encoded CA CRL files for revoked 
client certificates. The files in this directory have to be PEM-encoded. 
These files are accessed through hash file names, hash-value.rN.
Please refer to openSSL or Apache mod_ssl documentation regarding creating the hash filename.
END_DESCR

SYNTAX: path 
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]







[ITEM]
ID: crlFile
NAME: Client Revocation File
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR:{ent_version} Specifies the file containing PEM-encoded CA CRL files enumerating revoked 
client certificates. This can be used as an alternative or in addition to 
{ITEM=crlPath}. 
END_DESCR

SYNTAX: file2
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: renegProtection
NAME: SSL Renegotiation Protection
REQUIRED: 
APPLY: 3
SINCE: 4.1.13
SEE_ALSO: 

DESCR: Specifies whether to enable SSL Renegotiation Protection to 
defend against SSL handshake-based attacks. The default value is "Yes".
END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]





[ITEM]
ID: sslProtocol
NAME: SSL Protocol Version
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies which version of SSL protocol will be used. You can choose from 
{val}SSL v3.0{/} and {val}TLS v1.0{/}. Since OpenSSL 1.0.1, {val}TLS v1.1{/} and {val}TLS v1.2{/} are also supported. 
END_DESCR

SYNTAX: 
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS:
END_TIPS

[END_ITEM]





[ITEM]
ID: ciphers
NAME: Encryption Level
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the strength level of SSL encryption.
END_DESCR

SYNTAX: Check all the encryption methods that you want to accept.
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [Security & Performance] Stronger encryption consumes more CPU
cycles. 
END_TIPS

[END_ITEM]


[ITEM]
ID: enableStapling
NAME: Enable OCSP Stapling
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Determines whether to enable OCSP stapling, a more efficient way of verifying public key certificates.
END_DESCR

SYNTAX: bool
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: ocspRespMaxAge
NAME: OCSP Response Max Age (secs)
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: This option sets the maximum allowable age for an OCSP response. If an OCSP response is older than this maximum age, the server will contact the OCSP responder for a new response. The default value is {val}86400{/}. Maximum age can be turned off by setting this value to {val}-1{/}.
END_DESCR

SYNTAX: Integer of seconds
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]


[ITEM]
ID: ocspResponder
NAME: OCSP Responder
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the URL of the OCSP responder to be used. 
If not set, the server will attempt to contact the OCSP responder 
detailed in the certificate authority's issuer certificate. 
Some issuer certificates may not have an OCSP responder URL specified.
END_DESCR

SYNTAX: URL starting with {val}http://{/}
END_SYNTAX

EXAMPLE: {val}http://rapidssl-ocsp.geotrust.com {/}
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: ocspCACerts
NAME: OCSP CA Certificates
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the location of the file where OCSP certificate authority (CA) 
certificates are stored. These certificates are used to check responses 
from the OCSP responder (and make sure those responses are not spoofed or 
otherwise compromised). This file should contain the whole certificate chain. 
If this file does not contain the root certificate, LSWS should be able to find 
the root certificate in your system directory without you adding it to the file, 
but, if this validation fails, you should try adding your root certificate to this file. 


This setting is optional. If this setting is not set, the server will automatically check {ITEM= CACertFile}. 
END_DESCR

SYNTAX: File name which can be an absolute path or relative to $SERVER_ROOT.
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]




[TBL]
ID: listenerGeneral
NAME: General

DESCR: 
END_DESCR

CONT: listenerName listenerIP listenerPort listenerBinding listenerSecure 
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: LB_listenerGeneral
NAME: General

DESCR: 
END_DESCR

CONT: listenerName listenerIP listenerPort listenerSecure 
END_CONT

SEE_ALSO: 
[END_TBL]




[TBL]
ID: virtualHostMapping
NAME: Virtual Host Mappings

DESCR: Specifies the relationship between the listener and virtual hosts. 
Listeners and virtual hosts are associated by domain names.  
An HTTP request will be routed to a virtual host with a matching domain name.  
One listener can map to multiple virtual hosts for different domain names.  
One virtual host can also be mapped from different listeners. 
One listener can allow one catchall virtual host with the domain name value "*".  
When there is no explicitly matched domain name in the listener's mapping, 
the listener will forward the request to that catchall virtual host.
END_DESCR

TIPS: [Performance] Only add necessary mappings. If the listener is mapped  
to only one virtual host, then only set up a catchall mapping "*".
END_TIPS

CONT: virtualHostName domainName 
END_CONT

SEE_ALSO: 
[END_TBL]




[TBL]
ID: sslCert
NAME: SSL Private Key & Certificate

DESCR: Every SSL listener requires a paired SSL private key and SSL certificate. 
Multiple SSL listeners can share the same key and certificate. 


You can generate SSL private keys yourself using an SSL software package, 
such as OpenSSL. SSL certificates can also be purchased from an authorized certificate 
issuer like VeriSign or Thawte. You can also sign the certificate yourself. 
That certificate will not be trusted by web browsers and should not be used on public web 
sites containing critical data. However, a self-signed certificate is good 
enough for internal use, e.g. for encrypting traffic 
to LiteSpeed Web Server's WebAdmin console.
END_DESCR

CONT: keyFile certFile certChain CACertPath CACertFile
END_CONT

SEE_ALSO: 
[END_TBL]


[TBL]
ID: sslProtocolSetting
NAME: SSL Protocol

DESCR: Customizes SSL protocols accepted by the listener.
END_DESCR

CONT: sslProtocol ciphers 
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: sslOCSP
NAME: OCSP Stapling

DESCR: Online Certificate Status Protocol (OCSP) is a more efficient method 
of checking whether a digital certificate is valid. It works by communicating 
with another server — the OCSP responder — to get verification that the certificate 
is valid instead of checking through certificate revocation lists (CRL).


OCSP stapling is a further improvement on this protocol, allowing the server to 
check with the OCSP responder at regular intervals instead of every time a certificate 
is requested. See the <a href="http://en.wikipedia.org/wiki/OCSP_Stapling">OCSP Wikipedia page</a> for more details.
END_DESCR

CONT: enableStapling ocspRespMaxAge ocspResponder ocspCACerts
END_CONT

SEE_ALSO: 
[END_TBL]


[TBL]
ID: sslClientVerify
NAME: Client Verification

DESCR: 
END_DESCR

CONT: clientVerify verifyDepth crlPath crlFile 
END_CONT

SEE_ALSO: 
[END_TBL]




[END_HELPDOC]
