[HELPDOC]


########## Rack//Rails Settings ##########


[ITEM]
ID: rubyBin
NAME: Ruby Path
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Path to Ruby executable. Generally, it is /usr/bin/ruby
or /usr/local/bin/ruby depending on where Ruby has been installed to.
END_DESCR

EDITTIP: <b>Ruby Path</b> is the absolute path of a ruby executable. For e.g., /usr/local/bin/ruby.
END_EDITTIP

SYNTAX: path1
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: wsgiBin
NAME: WSGI Path
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Path to Python Web Server Gateway Interface executable.
END_DESCR

EDITTIP: 
END_EDITTIP

SYNTAX: path1
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS



[END_ITEM]


[ITEM]
ID: nodeBin
NAME: Node Path
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Path to Node.js executable. 
END_DESCR

EDITTIP: 
END_EDITTIP

SYNTAX: path1
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: railsEnv
NAME: Run-Time Mode
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies which mode Rack/Rails will be running as: "Development", 
"Production", or "Staging". The default is "Production".
END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: appserverEnv
NAME: Run-Time Mode
NS: EO
REQUIRED:
APPLY: 3
SINCE:
SEE_ALSO:

DESCR: Specifies which mode the application will be running as: "Development",
"Production", or "Staging". The default is "Production".
END_DESCR

SYNTAX: select
END_SYNTAX

EXAMPLE:
END_EXAMPLE

TIPS:
END_TIPS

[END_ITEM]



########## Rack/Rails Shared Hosting ##########


[ITEM]
ID: enableRailsHosting
NAME: Enable Shared Hosting
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies whether to enable Rack/Rails shared hosting. The default is "Disabled".

END_DESCR

SYNTAX: bool 
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: 
END_TIPS

[END_ITEM]



[ITEM]
ID: railsAppLimit
NAME: Max Apps Per Account
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum number of Rack/Rails applications that can be
created per account. The default is "1". 

END_DESCR

SYNTAX: uint 
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS: [P] Rack/Rails applications can take a 
large amount of system resources. Thus it is not recommended to set this limit too high, 
otherwise it may affect the performance of whole server if one user abuses it.
END_TIPS

[END_ITEM]



[ITEM]
ID: rubyProcLimit
NAME: Max Ruby Processes Per Account
REQUIRED: 
APPLY: 3
SINCE: 
SEE_ALSO: 

DESCR: Specifies the maximum number of Ruby processes that can be
created per account. The default is "10". If one account runs multiple Rack/Rails
applications, the total number of Ruby processes of all applications
cannot exceed this limit. Each ruby process will take
large amount of system resource, it is not recommended to set a high
limit, otherwise, it will affect the performance of whole server if
one user abuse it.

END_DESCR

SYNTAX: uint 
END_SYNTAX

EXAMPLE: 
END_EXAMPLE

TIPS:  [P] Ruby processes can take a
large amount of system resources. Thus it is not recommended to set this limit too high,
otherwise it may affect the performance of the whole server if one user abuses it.
END_TIPS

[END_ITEM]



############# Tables #############


[TBL]
ID: railsDefaults
NAME: Rack/Rails Default Settings
NS: EO

DESCR: Default configurations for Rack/Rails applications. These settings can be overriden at the context level.
END_DESCR

CONT: rubyBin appserverEnv maxConns env initTimeout
retryTimeout pcKeepAliveTimeout respBuffer 
extMaxIdleTime backlog runOnStartUp extAppPriority 
memSoftLimit memHardLimit procSoftLimit procHardLimit
 
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: railsHosting
NAME: Rack/Rails Shared Hosting
NS: EO

DESCR: LiteSpeed's Rack/Rails Shared Hosting settings allow users 
using our high performance, highly scalable Ruby LSAPI module to 
easily control their customers' Ruby usage.


LiteSpeed Rack/Rails hosting solution can deliver the best
performance with minimum server resource requirement. In addition,
it is compatible with all existing web hosting control panels. 


The user-manageable Rack/Rails configuration file (".ls_rails_config") 
is located in the user's home directory or virtual host root directory.  
Syntax is as follows: 

<blockquote>
#RailsApp <name> <App Path> <Rails Evn> <Children Processes> <RunOnStart>

RailsApp testApp "/lsws/testrails" "development" 4 1 


#RailsAppMap <name> <domain> <URI> 

RailsAppMap testApp "testrails.com" "/" 

RailsAppMap testApp "test.testrails.com" "/" 
</blockquote>

The "App Path" is relative to the user's home directory or the virtual
host root directory.


Whenever this file is touched, Rack/Rails applications will be restarted.
END_DESCR

CONT: enableRailsHosting railsAppLimit rubyProcLimit 
END_CONT

SEE_ALSO: 
[END_TBL]



[TBL]
ID: wsgiDefaults
NAME: Python WSGI Default Settings
NS: EO

DESCR: Default configurations for Python WSGI applications. These settings can be overriden at the context level.
END_DESCR

CONT: wsgiBin appserverEnv maxConns env initTimeout
retryTimeout pcKeepAliveTimeout respBuffer
extMaxIdleTime backlog runOnStartUp extAppPriority
memSoftLimit memHardLimit procSoftLimit procHardLimit

END_CONT

SEE_ALSO:
[END_TBL]



[TBL]
ID: nodeDefaults
NAME: Node.js App Default Settings
NS: EO

DESCR: Default configurations for Node.js applications. These settings can be overriden at the context level. 
END_DESCR

CONT: nodeBin appserverEnv maxConns env initTimeout
retryTimeout pcKeepAliveTimeout respBuffer
extMaxIdleTime backlog runOnStartUp extAppPriority
memSoftLimit memHardLimit procSoftLimit procHardLimit

END_CONT

SEE_ALSO:
[END_TBL]



################ Pages ################


[PAGE]
ID: App_Server_Help
NAME: App Server Settings
NS: E

DESCR:
END_DESCR

CONT: railsDefaults railsHosting wsgiDefaults nodeDefaults
END_CONT

SEE_ALSO:
[END_PAGE]


[PAGE]
ID: App_Server_Help
NAME: App Server Settings
NS: O

DESCR:
END_DESCR

CONT: railsDefaults wsgiDefaults nodeDefaults
END_CONT

SEE_ALSO:
[END_PAGE]


[END_HELPDOC]
