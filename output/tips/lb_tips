<?php 
		$this->db['CACertFile'] = new DATTR_HELP_ITEM("CA Certificate File", 'Specifies the file that contains all certificates of certification authorities (CAs) for chained certificates.  This file is simply the concatenation of PEM-encoded certificate  files, in order of preference. This can be used as an alternative or in addition to &quot;{ITEM=CACertPath}&quot;. Those certificates are used for client certificate authentication and constructing the server certificate chain, which will be sent to browsers in addition to the server certificate.', '', '', '');
		$this->db['CACertPath'] = new DATTR_HELP_ITEM("CA Certificate Path", 'Specifies the directory where the certificates of certification  authorities (CAs) are kept. Those certificates are used for client certificate authentication   and constructing the server certificate chain, which will be sent to browsers in addition to the server certificate.', '', '', '');
		$this->db['DHParam'] = new DATTR_HELP_ITEM("DH Parameter", 'Specifies the location of the Diffie-Hellman parameter file necessary for DH key exchange.', '', '', '');
		$this->db['GroupDBLocation'] = new DATTR_HELP_ITEM("Group DB Location", 'Specifies the location of the group database. <br/>Group information can be set either in the user database or in this standalone group DB. For user authentication, the user DB will be checked first. If the user DB also contains group information, then the group DB will not be checked. <br/><br/>For the DB type Password File, the group DB location should be the path to  the flat file containing group definitions. You can edit this file through the  WebAdmin console by clicking on the file name. <br/><br/>Each line of a group file should contain a groupname followed by a colon,   followed by space delimited group of usernames. Example:<br/><blockquote><code>testgroup: user1 user2 user3</code></blockquote> <br/><br/>For the DB type LDAP, the group DB location should be the LDAP URL to query  for group information. For each valid group, one and only one record should be returned in the LDAP search request based on  this URL and the group name specified in &quot;{ITEM=Context_Help#required}&quot;. &quot;$k&quot; must be specified in the filter part of the URL and it will be replaced with the group name. The name of the attribute that  specifies members in this group is specified by &quot;{ITEM=groupDB_attrGroupMember}&quot;.<br/><br/>Example: If objectClass posixGroup is being used to store group information. The following URL could be used: <br/><blockquote><code>ldap://localhost/ou=GroupDB,dc=example,dc=com???(&(objectClass=*)(cn=$k))</code></blockquote>', '[Security] It is recommended to store a group file outside the document tree.  If it has to be placed inside document tree, simply name it with a leading &quot;.ht&quot;  like .htgroup, to prevent the file being served as a static file.  LiteSpeed Web Server  does not serve files prefixed with &quot;.ht&quot;.', '', '');
		$this->db['LB_extAppType'] = new DATTR_HELP_ITEM("Type", 'Specifies the type of external application. Choose from <ul> <li>FastCGI: a FastCGI application with Responder role.</li> <li>Servlet Engine: a Servlet engine with AJPv13 connector, such as tomcat.</li> <li>Web Server: a web server or application server that support HTTP protocol.</li> <li>LSAPI App: an application that communicate with web server in LSAPI protocol.</li> <li>Piped Logger: an application that can process access log entries received on its STDIN stream.</li> </ul>', '', '', '');
		$this->db['LDAPBindDN'] = new DATTR_HELP_ITEM("LDAP Bind DN", 'Specifies a DN used to bind to the server. If the LDAP server  requires authentication, a bind DN and password must be specified. If not specified, anonymous bind will be used.', '', '', '');
		$this->db['LDAPBindPasswd'] = new DATTR_HELP_ITEM("LDAP Bind Password", 'Specifies a password used to bind to the server. If the LDAP Server  requires authentication, a bind DN and password must be specified.', '', '', '');
		$this->db['SSLCryptoDevice'] = new DATTR_HELP_ITEM("SSL Hardware Accelerator", ' Specifies which SSL hardware acceleration device to use. Only devices supported by OpenSSL can be used. Select OpenSSL internal engine if no device is installed.', '', '', '');
		$this->db['TABLEClusterErrMsg'] = new DATTR_HELP_ITEM("Custom Error Messages", 'Specify a custom error message in case error occured during distributing request to backend servers. Custom error messages configured at virtual host level will override this configuration.', '', '', '');
		$this->db['TABLEHAReplication'] = new DATTR_HELP_ITEM("Replication", 'Set the port for replication and replication cluster for this LSLB server. You can also configure Heart Beat settings and  enable/disable Gzip for load balancer traffic.', '', '', '');
		$this->db['TABLEaccessControl'] = new DATTR_HELP_ITEM("Access Control", 'Specifies what sub networks and/or IP addresses can access the server.  At the server-level, this setting will affect all virtual hosts. You can also set up  access control unique to each virtual host at the virtual host-level. Virtual host settings will NOT  override server settings. <br/><br/>Whether to block/allow an IP is determined by the combination of the allowed list and the denied list.  If you want to block only certain IPs or sub-networks, put * or ALL in  the &quot;&quot;&quot;{ITEM=accessControl_allow}&quot;&quot;&quot; and list the blocked IPs or sub-networks in the &quot;&quot;{ITEM=accessControl_deny}&quot;&quot;.  If you want to only allow certain IPs or sub-networks, put * or ALL  in the &quot;&quot;{ITEM=accessControl_deny}&quot;&quot; and list the allowed IPs or sub-networks in the &quot;&quot;&quot;{ITEM=accessControl_allow}&quot;&quot;&quot;.  The setting of the smallest scope that fits for an IP will be used to determine whether  to block or allow that IP. <br/><br/><b>Server-level:</b> Trusted IPs or sub-networks must be specified in the &quot;&quot;&quot;{ITEM=accessControl_allow}&quot;&quot;&quot; by adding a  trailing &quot;T&quot;. Trusted IPs or sub-networks are not affected by connection/throttling limits.  Only server-level access control can set up trusted IPs/sub-networks.', '[Security] Use this at the server-level for general restrictions that apply to all virtual hosts.', '', '');
		$this->db['TABLEerrPage'] = new DATTR_HELP_ITEM("Customized Error Pages", 'Whenever the server has a problem in processing a request,  the server will return an error code and an html page as the error message  to web client. Error codes are defined in the HTTP protocol (see RFC 2616).  LiteSpeed server has a built-in default error page for each error code. A customized page can be configured for each error code. In LiteSpeed server,  error pages can be further customized to be unique for each virtual host.', '', '', '');
		$this->db['TABLEgeolocationDB'] = new DATTR_HELP_ITEM("IP to Geolocation DB", ' Multiple MaxMind geolocation databases can be specified here. MaxMind has the following type of DBs: Country, Region, City, Organization, ISP and Netspeed.  If multiple databases of types &quot;Country&quot;, &quot;Region&quot;, and &quot;City&quot; are configured, the last one will be effective.', '', '', '');
		$this->db['TABLEloadBalancerContext'] = new DATTR_HELP_ITEM("Load Balancer Context", 'A Load Balancer Context can be used to forward one URI or a group of URIs to another location.  The destination URI can be either on the same web site or an absolute URI pointing to another web site.', '', '', '');
		$this->db['TABLEperClientConnLimit'] = new DATTR_HELP_ITEM("Per Client Throttling", 'These are connection control setting on a per client/IP basis.  These settings help to mitigate DoS (Denied of Service) and DDoS (Distributed Denied of Service) attacks.', '', '', '');
		$this->db['TABLErealms'] = new DATTR_HELP_ITEM("Authorization Realms", 'Lists all authorization realms for this virtual host.  Authorization realms are used to block unauthorized users from accessing protected web pages. A realm is a user directory containing usernames and passwords with optional  group classifications. Authorization is performed at context level.  Since different contexts can share the same realm (user database), so realms are  defined separately from the contexts that use them.  You can refer to a realm by these names in context configuration.', '', '', '');
		$this->db['TABLEredirectContext'] = new DATTR_HELP_ITEM("Redirect Context", 'A Redirect Context can be used to forward one URI or a group of URIs to another location.  The destination URI can be either on the same web site (internal redirect) or an absolute URI pointing to another web site (external redirect).', '', '', '');
		$this->db['TABLEreqCensorshipRule'] = new DATTR_HELP_ITEM("Request Filtering Rule Set", 'Rules configured here only work for virtual hosts configured with a native LSWS configuration, not for virtual hosts using Apache httpd.conf.', '', '', '');
		$this->db['TABLEsslCert'] = new DATTR_HELP_ITEM("SSL Private Key & Certificate", 'Every SSL listener requires a paired SSL private key and SSL certificate.  Multiple SSL listeners can share the same key and certificate. <br/><br/>You can generate SSL private keys yourself using an SSL software package,  such as OpenSSL. SSL certificates can also be purchased from an authorized certificate  issuer like VeriSign or Thawte. You can also sign the certificate yourself.  That certificate will not be trusted by web browsers and should not be used on public web  sites containing critical data. However, a self-signed certificate is good  enough for internal use, e.g. for encrypting traffic  to LiteSpeed Web Server&#039;s WebAdmin console.', '', '', '');
		$this->db['TABLEsslOCSP'] = new DATTR_HELP_ITEM("OCSP Stapling", 'Online Certificate Status Protocol (OCSP) is a more efficient method  of checking whether a digital certificate is valid. It works by communicating  with another server — the OCSP responder — to get verification that the certificate  is valid instead of checking through certificate revocation lists (CRL).<br/><br/>OCSP stapling is a further improvement on this protocol, allowing the server to  check with the OCSP responder at regular intervals instead of every time a certificate  is requested. See the <a href=&quot;http://en.wikipedia.org/wiki/OCSP_Stapling&quot;>OCSP Wikipedia page</a> for more details.', '', '', '');
		$this->db['TABLEsslProtocolSetting'] = new DATTR_HELP_ITEM("SSL Protocol", 'Customizes SSL protocols accepted by the listener.', '', '', '');
		$this->db['TABLEvirtualHostMapping'] = new DATTR_HELP_ITEM("Virtual Host Mappings", 'Specifies the relationship between the listener and virtual hosts.  Listeners and virtual hosts are associated by domain names.   An HTTP request will be routed to a virtual host with a matching domain name.   One listener can map to multiple virtual hosts for different domain names.   One virtual host can also be mapped from different listeners.  One listener can allow one catchall virtual host with the domain name value &quot;*&quot;.   When there is no explicitly matched domain name in the listener&#039;s mapping,  the listener will forward the request to that catchall virtual host.', '[Performance] Only add necessary mappings. If the listener is mapped   to only one virtual host, then only set up a catchall mapping &quot;*&quot;.', '', '');
		$this->db['accessAllowed'] = new DATTR_HELP_ITEM("Access Allowed", 'Specifies which IPs or sub-networks are allowed to access resources under this context. Together with  &quot;{ITEM=accessDenied}&quot; and server/virtual host-level access control, accessibility is determined by  the smallest scope that a client&#039;s IP address falls into.', '', '', 'Sub-networks can be written as 192.168.1.0/255.255.255.0, 192.168.1 or 192.168.1.*.');
		$this->db['accessControl_allow'] = new DATTR_HELP_ITEM("Allowed List", 'Specifies the list of IPs or sub-networks allowed. * or ALL are accepted.', '[Security] Trusted IPs or sub-networks set at the server-level access  control will be excluded from connection/throttling limits.', '', 'Sub-networks: 192.168.1.0/255.255.255.0, 192.168.1.0/24, 192.168.1 or 192.168.1.*. <br/>IPv6 addresses: ::1 or [::1] <br/>IPv6 subnets: 3ffe:302:11:2:20f:1fff:fe29:717c/64 or  [3ffe:302:11:2:20f:1fff:fe29:717c]/64.');
		$this->db['accessControl_deny'] = new DATTR_HELP_ITEM("Denied List", 'Specifies the list of IPs or sub-networks disallowed.', '', '', 'Sub-networks:  192.168.1.0/255.255.255.0, 192.168.1.0/24, 192.168.1 or 192.168.1.*. <br/>IPv6 addresses: ::1 or [::1] <br/>IPv6 subnets: 3ffe:302:11:2:20f:1fff:fe29:717c/64 or  [3ffe:302:11:2:20f:1fff:fe29:717c]/64.');
		$this->db['accessDenied'] = new DATTR_HELP_ITEM("Access Denied", 'Specifies which IPs or sub-networks are NOT allowed to access resources under this context.  Together with &quot;{ITEM=accessAllowed}&quot; and server/virtual host-level access control, accessibility is  determined by the smallest scope that a client&#039;s IP address falls into.', '', '', 'Sub-networks can be written as 192.168.1.0/255.255.255.0, 192.168.1 or 192.168.1.*.');
		$this->db['accessLog_bytesLog'] = new DATTR_HELP_ITEM("Bytes Log", 'Specifies the path to the bandwidth bytes log file. When specified, a cPanel compatible bandwidth log will be created. This will log  the total bytes transferred for a request including both the request and reply body.', '[Performance] Put the log file on a separate disk.', '', '');
		$this->db['accessLog_compressArchive'] = new DATTR_HELP_ITEM("Compress Archive", 'Specifies whether to compress rotated log files in order to save disk space.', 'Log files are highly compressible and this is recommended to reduce disk usage for old logs.', '', '');
		$this->db['accessLog_fileName'] = new DATTR_HELP_ITEM("File Name", 'Specifies the file name of the access log file.', '[Performance] Put access log file on a separate disk.', '', '');
		$this->db['accessLog_keepDays'] = new DATTR_HELP_ITEM("Keep Days", 'Specifies how many days the access log file will be kept on disk.  Only rotated log files older than specified number of days will be deleted. The current  log file will not be touched regardless how many days&#039; data it contains.  If you do not want to auto-delete stale and very old log files, set this value to 0.', '', '', '');
		$this->db['accessLog_logFormat'] = new DATTR_HELP_ITEM("Log Format", ' Specifies the log format for the access log. When log format is set, it will override the &quot;{ITEM=accessLog_logHeader}&quot; setting.', '', '', 'Common Log Format (CLF)<br/>    &quot;%h %l %u %t \&quot;%r\&quot; %>s %b&quot;<br/><br/>Common Log Format with Virtual Host<br/>    &quot;%v %h %l %u %t \&quot;%r\&quot; %>s %b&quot;<br/><br/>NCSA extended/combined log format<br/>    &quot;%h %l %u %t \&quot;%r\&quot; %>s %b \&quot;%{Referer}i\&quot; \&quot;%{User-agent}i\&quot; <br/><br/>Log cookie value of Foobar<br/>    &quot;%{Foobar}C&quot;');
		$this->db['accessLog_logHeader'] = new DATTR_HELP_ITEM("Log Headers", 'Specifies whether to log HTTP request headers: Referer, UserAgent, and Host.', '[Performance] Turn this off if you do not need these headers in the access log.', '', '');
		$this->db['accessLog_pipedLogger'] = new DATTR_HELP_ITEM("Piped Logger", 'Specifies an external application that will receive the access log data sent by LiteSpeed through a pipe on its STDIN stream (file handle 0). When specified, access log will be sent only to the logger application but not the access log file specified in previous entry. <br> The LiteSpeed load balancer  performs simple load balancing among multiple logger applications if more than one instance of logger application is configured.  LiteSpeed server always attempts to keep the number of logger processes as low as possible. Only when  one logger application failed to process access log entries in time  will the server attempt to spawn another instance of logger application. <br> If a logger process crashes, the server will start another instance but the log data in the stream buffer will be lost. It is possible to lose log data if external loggers cannot keep up   with the speed and volume of the log stream. <br> File path to the logger application should be given here, and optionally, number of application instaces can be set before the file path, followed by &#039;|&#039;. Example, &quot;4|/path/to/logger/app&quot; tell server to start up to 4 logger processes, while, only one logger process will be started if &quot;/path/to/logger/app&quot; is used. <br>', '', '', '');
		$this->db['aclogUseServer'] = new DATTR_HELP_ITEM("Log Control", 'Specifies where to write the access log. There are three options:  1. Write to the server&#039;s access log; 2. Create an access log for this virtual host; 3. Disable access logging.', '', '', '');
		$this->db['addDefaultCharset'] = new DATTR_HELP_ITEM("Add Default Charset", 'Specifies whether to add a character set tag to the 	   &quot;Content-Type&quot; response header, when content type is either 	   &quot;text/html&quot; or &quot;text/plain&quot; without any parameters. 	   When set to Off,  this function is disabled. When set to 	   On, either the character set specified by 	   &quot;{ITEM=defaultCharsetCustomized}&quot; or the default &quot;iso-8859-1&quot; will be added.', '', '', '');
		$this->db['adminEmails'] = new DATTR_HELP_ITEM("Administrator Email", 'Specifies the server administrator&#039;s email address(es).  If specified, administrators will be notified by email of important events (for example,   when the LiteSpeed service is restarted automatically due to crash detection or when license is expiring).', 'Email alert feature will only work if the server has an active MX server such as postfix, exim, or sendmail.', '', '');
		$this->db['adminUser'] = new DATTR_HELP_ITEM("Admin User", 'Change the username and password for WebAdmin Console.  The old password has to be entered and verified in order to save the changes.', 'If you forget the admin password, you cannot change it from the WebAdmin console. Please use the following command from shell instead: [your install dir]/admin/misc/admpass.sh', '', '');
		$this->db['authName'] = new DATTR_HELP_ITEM("Authentication Name", 'Specifies an alternative name for the authorization realm for current context.  If it is not specified, the original realm name will be used. The authentication name is  displayed on the browser&#039;s login pop-up.', '', '', '');
		$this->db['autoUpdateDownloadPkg'] = new DATTR_HELP_ITEM("Download Updates", 'Specifies whether to auto-download a new product release package file when available. If a new package has been successfully downloaded, an online one-click upgrade can be performed via the WebAdmin console under Service Manager - &quot;{ITEM=ServerStat_Help#vermgr}&quot;.', '', '', '');
		$this->db['autoUpdateInterval'] = new DATTR_HELP_ITEM("Check For Update", 'Specifies how often the update agent will check for a new product release. Options are &quot;Daily&quot;, &quot;Weekly&quot;, and &quot;Monthly&quot;.', '', '', '');
		$this->db['banPeriod'] = new DATTR_HELP_ITEM("Banned Period (sec)", 'Specifies how long new connections will be rejected from an IP if, after the  &quot;{ITEM=gracePeriod}&quot; has elapsed, the number of connections is still more than  the &quot;{ITEM=softLimit}&quot;. If IPs are getting banned repeatedly, we suggest that you  increase your banned period to stiffen the penalty for abuse.', '', '', '');
		$this->db['cachePolicy:enableCache'] = new DATTR_HELP_ITEM("Enable Cache", 'Specifies whether to turn on cache for the current context, either at the server level, virtual host level, or directory level. <br/><br/>Virtual hosts configured through Apache httpd.conf can use the &quot;CacheEnable&quot; and  &quot;CacheDisable&quot; directives at the server, virtual host, directory, files, and location  level or in .htaccess. &quot;CacheEnable&quot; and &quot;CacheDisable&quot; directives are compatible  with Apache mod_cache directives. However, when used at the directory, file, or  location level or in a .htaccess, &quot;CacheEnable&quot; and &quot;CacheDisable&quot; will only be applied  to all directories below current level. URL parameters will be ignored.', '[Performance] It is not recommended to store large objects with low hit rates in the cache. This may result in high I/O wait and reduce overall server performance.', '', '');
		$this->db['cachePolicy:enablePrivateCache'] = new DATTR_HELP_ITEM("Enable Private Cache", 'Specifies whether to turn on private cache for the current context, either at server  level, virtual host level, or directory level. <br/><br/>Private cache will cache a copy per user based on IP and cookies.<br/>  Virtual hosts configured through Apache httpd.conf can use the &quot;CacheEnable private /url&quot; and &quot;CacheDisable private /url&quot; directives at server, virtual host, directory, files, and location  levels or in a .htaccess file. &quot;CacheEnable private&quot; and &quot;CacheDisable private&quot; are compatible with Apache&#039;s mod_cache directives and will be applied to all directories below the current level. However, when used at the directory, file, and location level or in  a .htaccess file, &quot;CacheEnable private&quot; and &quot;CacheDisable private&quot; will be applied to all directories below  the current level. URL parameters will be ignored.', '[Performance] It is not recommended to store large objects with low hit rates in the cache. This may result in high I/O wait and reduce overall server performance.', '', '');
		$this->db['cachePolicy:expireInSeconds'] = new DATTR_HELP_ITEM("Cache Expire Time (seconds)", 'Specifies how long an object will be cached. The default is &quot;86400&quot; seconds (one day).', '', '', '');
		$this->db['cachePolicy:ignoreReqCacheCtrl'] = new DATTR_HELP_ITEM("Ignore Request Cache-Control", 'Specifies whether to ignore Cache-Control request headers.  The default is &quot;No&quot;. If set to &quot;Yes&quot;, the server may serve a cached object when &quot;no-cache&quot; has been set in Cache-Control.', '', '', '');
		$this->db['cachePolicy:ignoreRespCacheCtrl'] = new DATTR_HELP_ITEM("Ignore Response Cache-Control", 'Specifies whether to ignore Cache-Control response headers.   The default is &quot;No&quot;. If set to &quot;Yes&quot;, the response can be cached by the server even when &quot;no-store&quot;, &quot;private&quot; has been set in a Cache-Control header.', '', '', '');
		$this->db['cachePolicy:maxCacheObjSize'] = new DATTR_HELP_ITEM("Max Object Size", 'Specifies the maximum size of an object that can be stored in the cache directory. The default value is &quot;128KB&quot;.', '[Performance] It is not recommended to store large objects with low hit rates in the cache. This may result in high I/O wait and reduce overall server performance.', '', '');
		$this->db['cachePolicy:maxStaleAge'] = new DATTR_HELP_ITEM("Cache Stale Age (seconds)", 'Specifies how long an object will continue to be served after its cache has expired  but bbefore the new cache is available. The default is &quot;10&quot; seconds.', '', '', '');
		$this->db['cachePolicy:privateExpireInSeconds'] = new DATTR_HELP_ITEM("Private Cache Expire Time (seconds)", 'Specifies how long an object will be cached in private cache. The default is &quot;60&quot; seconds.', '', '', '');
		$this->db['cachePolicy:qsCache'] = new DATTR_HELP_ITEM("Cache Request with Query String", 'Specifies whether to cache a request with a query string in the URL.  The default is &quot;No Cache&quot;. When a URL rewrite is involved, the server will check against the  rewritten URL.', '', '', '');
		$this->db['cachePolicy:reqCookieCache'] = new DATTR_HELP_ITEM("Cache Request with Cookie", 'Specifies whether to cache a request containing cookies. The default is &quot;No Cache&quot;.', '', '', '');
		$this->db['cachePolicy:respCookieCache'] = new DATTR_HELP_ITEM("Cache Response with Cookie", 'Specifies whether to cache a response containing cookies. The default is &quot;No Cache&quot;.', '', '', '');
		$this->db['cacheStorePath'] = new DATTR_HELP_ITEM("Storage Path", 'Specifies the directory for holding cached objects. Currently,  LiteSpeed Cache stores each object in its own file. The file name is a hash of  the object key. Multiple levels of directories will be created in order to  avoid holding too many files in one directory. This value must be set in  order to enable cache.', '[performance] Assign a dedicated disk or disk array as the cache storage. RAID0 is recommended.', '', '');
		$this->db['censorLogLevel'] = new DATTR_HELP_ITEM("Log Level", 'Specifies the level of detail of the request filtering engine&#039;s debug output. This value ranges from 0 - 9. 0 disables logging. 9 produces the most detailed log. The the server and virtual host&#039;s error log &quot;{ITEM=ServGeneral_Help#log_logLevel}&quot; must be set to at least INFO for this option to take effect. This is useful when testing your request filtering rules.', '', '', '');
		$this->db['censorRuleSet'] = new DATTR_HELP_ITEM("Rules Definition", 'Specifies a list of censorship rules.<br/><br/>If you are using an Apache config file, you have to set up rules in httpd.conf.  Rules defined here will have no effect.', 'Rules configured here only work for vhosts configured in native LSWS configuration, not for vhosts from Apache httpd.conf.', '', '');
		$this->db['censorRuleSetEnabled'] = new DATTR_HELP_ITEM("Enabled", 'Specifies whether to enable this rule set. With this option, a rule set can be quickly turned on and off without adding or removing the rule set. Default is &quot;Yes&quot;.', '', '', '');
		$this->db['censorRuleSetName'] = new DATTR_HELP_ITEM("Name", 'Give a group of censorship rules a name. For display only.', '', '', '');
		$this->db['certChain'] = new DATTR_HELP_ITEM("Chained Certificate", 'Specifies whether the certificate is a chained certificate or not. The file that stores a certificate chain must be in PEM format, and the certificates must be in the chained order, from the lowest level (the actual client or server certificate) to the highest level (root) CA.', '', '', '');
		$this->db['certFile'] = new DATTR_HELP_ITEM("Certificate File", 'Specifies the file name of the SSL certificate file.', '[Security] The certificate file should be placed in a secured directory,  which allows read-only access to the user that the server runs as.', '', '');
		$this->db['ciphers'] = new DATTR_HELP_ITEM("Ciphers", 'Specifies the cipher suite to be used to negotiate the SSL handshake. LSWS supports cipher suites implemented in SSL v3.0, TLS v1.0, and TLS v1.2.', '[Security] We recommend ECDHE-RSA-AES128-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH', '', 'ECDHE-RSA-AES128-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH');
		$this->db['clientVerify'] = new DATTR_HELP_ITEM("Client Verification", ' Specifies the type of client certifcate authentication. Available types are: <ul> <li>None: No client certificate is required.</li> <li>Optional: Client certificate is optional.</li> <li>Require: The client must has valid certificate.</li> <li>Optional_no_ca: Same as optional.</li> </ul> The default is &quot;None&quot;.', '&quot;None&quot; or &quot;Require&quot; are recommended.', '', '');
		$this->db['compressibleTypes'] = new DATTR_HELP_ITEM("Compressible Types", 'Specifies what MIME types are allowed to be compressed.', '[Performance] Only allow types that will benefit from GZIP compression. Binary  files such as gif/png/jpeg images and flash files do not benefit from compression.', '', 'If you want to compress text/* but not text/css, you can have a rule like  text/*, !text/css. &quot;!&quot; will exclude that MIME type.');
		$this->db['configFile'] = new DATTR_HELP_ITEM("Config File", 'Specifies the configuration file name for this virtual host. The configuration file must be under the $SERVER_ROOT/conf/vhosts/ directory.  $SERVER_ROOT/conf/vhosts/$VH_NAME/vhconf.conf is recommended.', '', '', '');
		$this->db['connTimeout'] = new DATTR_HELP_ITEM("Connection Timeout (secs)", 'Specifies the maximum connection idle time allowed during processing one request.  The connection will be closed if it has been idle, i.e. no I/O activity, for this period  of time.', '[Security] Set this as low as you can to help recover dead  connections during a potential DoS attack.', '', '');
		$this->db['consoleSessionTimeout'] = new DATTR_HELP_ITEM("Session Timeout (secs)", 'Customize the session timeout length of WebAdmin console.  The default is 60 seconds if no value is set.', '[Security] Set a proper value for production use, usually less than 300 seconds.', '', '');
		$this->db['cookieName'] = new DATTR_HELP_ITEM("Tracking Cookie Name", 'Specify the tracking cookie name.', '', '', '');
		$this->db['crlFile'] = new DATTR_HELP_ITEM("Client Revocation File", ' Specifies the file containing PEM-encoded CA CRL files enumerating revoked  client certificates. This can be used as an alternative or in addition to  &quot;{ITEM=crlPath}&quot;.', '', '', '');
		$this->db['crlPath'] = new DATTR_HELP_ITEM("Client Revocation Path", ' Specifies the directory containing PEM-encoded CA CRL files for revoked  client certificates. The files in this directory have to be PEM-encoded.  These files are accessed through hash file names, hash-value.rN. Please refer to openSSL or Apache mod_ssl documentation regarding creating the hash filename.', '', '', '');
		$this->db['defaultAction'] = new DATTR_HELP_ITEM("Default Action", 'Specifies the default actions that should be taken when a censoring rule is met. Default value is deny,log,status:403, which means to deny access with status code 403 and log the incident in the error log.', '', '', '');
		$this->db['defaultCharsetCustomized'] = new DATTR_HELP_ITEM("Customized Default Charset", 'Specifies a character set to be used when &quot;&quot;{ITEM=addDefaultCharset}&quot;&quot; 	   is On. This is optional. The default value is iso-8859-1. 	   This entry has no effect when &quot;&quot;{ITEM=addDefaultCharset}&quot;&quot; is 	   Off.', '', '', 'utf-8');
		$this->db['defaultCluster'] = new DATTR_HELP_ITEM("Default Cluster", 'Specifies the default cluster used for handling requests to this vhost.', '', '', '');
		$this->db['defaultTargetPort'] = new DATTR_HELP_ITEM("Default Target Port", 'Specifies a default target port for connecting to the backend worker. It can be overriden in worker configuration.', '', '', '');
		$this->db['destinationuri'] = new DATTR_HELP_ITEM("Destination URI", 'Specifies the target location of the redirection.  If this redirected URI maps to a URI in another redirect context, it will be redirected again.', '', '', '');
		$this->db['disableInitLogRotation'] = new DATTR_HELP_ITEM("Disable Initial Log Rotation", 'Specifies whether to enable/disable rotation of server error log file at startup. Initial log rotation is enabled by default when using value &quot;Not Set&quot;.', '', '', '');
		$this->db['disableSecHtaccess'] = new DATTR_HELP_ITEM("Disable .htaccess Override", 'Specifies whether to disable .htaccess override. This is a global setting, only available at the server level.  Default is &quot;No&quot;.', '', '', '');
		$this->db['domainName'] = new DATTR_HELP_ITEM("Domains", 'Specifies the mapping domain names. Domain names are case  insensitive and the leading &quot;www.&quot; will be removed. The wildcard  characters &quot;*&quot; and &quot;?&quot; are allowed. &quot;?&quot; only represents one character.  &quot;*&quot; represents any numbers of characters.  Duplicated domain names are not allowed.', '[Performance] If a listener is dedicated to one virtual host,  always use * for the domain name to avoid unnecessary checking. Domain names with wildcard characters  (other than the catchall domain)  should be avoided whenever possible.', '', 'www?.example.com<br/>&quot;*.mydomain.com&quot; will match all subdomains of mydomain.com.<br/>&quot;*&quot; by itself is the catchall domain and will match any unmatched domain names.');
		$this->db['dynReqPerSec'] = new DATTR_HELP_ITEM("Requests/Second", 'Specifies the maximum number of requests to dynamically generated content  coming from a single IP address can be processed in each second regardless of number of connections established.  When the limit is reached, all future requests to dynamic content  are tar-pitted until next second.  Per client request limit can be set at server or virtual host level where virtual host level setting overrides server level setting.', '[Security] Trusted IP or sub-network is not effected', '', '');
		$this->db['enableCensorship'] = new DATTR_HELP_ITEM("Enable Request Filtering", 'Specifies whether to enable request content deep inspection. This feature is equivalent to Apache&#039;s mod_security, which can be used to detect and block requests with ill intention by matching them to known signatures.', '', '', '');
		$this->db['enableChroot'] = new DATTR_HELP_ITEM("Enable chroot", ' Specifies whether to start the load balancer in chroot mode.  The new root directory is set by &quot;{ITEM=servChrootPath}&quot; during installation.', '', '', '');
		$this->db['enableCoreDump'] = new DATTR_HELP_ITEM("Enable Core Dump", 'Specifies whether to enable core dump when the server is started by &quot;root&quot; user.  For most modern Unix systems, processes that change user ID or group ID are not allowed to  dump a core file for security reasons. However, it is much easier to identify root  cause of a problem with a core dump. This option only works on Linux kernel 2.4 and up.   Solaris users should use the coreadm command to control this feature.', '[Security] Only enable this when you see no core file created in   the server log file. Disable it immediately after producing the core file.   Please submit a bug report when a core dump has been created.', '', '');
		$this->db['enableDHE'] = new DATTR_HELP_ITEM("Enable DH Key Exchange", 'Allows use of Diffie-Hellman key exchange for further SSL encryption.', '[Security] DH key exchange is more secure than using just an RSA key. ECDH and DH key exchange are equally secure.<br/>[Performance] Enabling DH key exchange will increase CPU load and is slower than ECDH key exchange and RSA. ECDH key exchange is preferred when available.', '', '');
		$this->db['enableECDHE'] = new DATTR_HELP_ITEM("Enable ECDH Key Exchange", 'Allows use of Elliptic Curve Diffie-Hellman key exchange for further SSL encryption.', '[Security] ECDH key exchange is more secure than using just an RSA key. ECDH and DH key exchange are equally secure.<br/>[Performance] Enabling ECDH key exchange will increase CPU load and is slower than using just an RSA key.', '', '');
		$this->db['enableGzip'] = new DATTR_HELP_ITEM("Enable GZIP", 'Specifies whether to enable GZIP compression for this virtual host.  This setting is effective only when server-level GZIP compression is enabled.   The virtual host can only turn off compression enabled at the server level.  Compression settings are configured at the server level (in Tuning-GZIP).', '', '', '');
		$this->db['enableGzipCompress'] = new DATTR_HELP_ITEM("Enable Compression", 'Controls GZIP compression for both static and dynamic HTTP responses.', '[Performance] Enable it to save network bandwidth. Text-based responses such as  html, css, and javascript files benefit the most and on average can be compressed to half  of their original size.', '', '');
		$this->db['enableIpGeo'] = new DATTR_HELP_ITEM("Enable IP Geolocation", ' Specifies whether to enable/disable IP Geolocation lookup.  It can be set at server-, virtual host-, or context-level. IP Geolocation is disabled by default when using value &quot;Not Set&quot;.', '', '', '');
		$this->db['enableRewrite'] = new DATTR_HELP_ITEM("Enable Rewrite", 'Specifies whether to enable LiteSpeed&#039;s URL rewrite engine. This option can be customized at virtual host- and context-level, and is inherited along the directory tree until it is explicitly overridden.', '', '', '');
		$this->db['enableStapling'] = new DATTR_HELP_ITEM("Enable OCSP Stapling", 'Determines whether to enable OCSP stapling, a more efficient way of verifying public key certificates.', '', '', '');
		$this->db['env'] = new DATTR_HELP_ITEM("Environment", 'Specifies extra environment variables for the external application.', '', '', '');
		$this->db['errCode'] = new DATTR_HELP_ITEM("Error Code", 'Specifies the HTTP status code for the error page.  Only the selected HTTP status code will have this customized error page.', '', '', '');
		$this->db['errMessage'] = new DATTR_HELP_ITEM("Custom Error Message", 'Specify a custom error message.', '', '', '');
		$this->db['eventDispatcher'] = new DATTR_HELP_ITEM("I/O Event Dispatcher", 'Specifies which I/O event dispatcher to use. Different operating systems support different types of event dispatcher: <ul>   <li>Linux kernel 2.4.x supports:      <ul><li>poll</li></ul>   </li>   <li>Linux kernel 2.6.x supports:      <ul><li>poll</li><li>epoll</li></ul>   </li>   <li>FreeBSD supports:      <ul><li>poll</li><li>kqueue</li></ul>   </li>   <li>Solaris supports:      <ul><li>poll</li><li>devpoll</li></ul>   </li>   <li>Mac OS X 10.3 and above supports:      <ul><li>poll</li><li>kqueue</li></ul>   </li> </ul>   poll is supported by all platforms, and is the default selection.    For high traffic web sites, an altenative event dispatcher can be used to improve the    scalability of the load balancer.', '', '', '');
		$this->db['expuri'] = new DATTR_HELP_ITEM("URI", 'Specifies the URI for this context.', '', '', '');
		$this->db['extAppAddress'] = new DATTR_HELP_ITEM("Address", 'A unique socket address used by the external application.  IPv4/IPv6 sockets and Unix Domain Sockets (UDS) are supported.  IPv4/IPv6 sockets can be used for communication over the network.   UDS can only be used when the external application resides on the same machine as the server.', '[Security] If the external application runs on the same machine,  UDS is preferred. If you have to use an IPv4|IPV6 socket,  set the IP address to localhost or 127.0.0.1,  so the external application is inaccessible from other machines. <br/>[Performance] Unix Domain Sockets generally provide higher performance than IPv4 sockets.', '', '127.0.0.1:5434<br/>UDS://tmp/lshttpd/php.sock.');
		$this->db['extAppName'] = new DATTR_HELP_ITEM("Name", 'A unique name for this external application.  You will refer to it by this name when you use it in other parts of the configuration.', '', '', '');
		$this->db['extCluster'] = new DATTR_HELP_ITEM("Cluster", 'Specifies the cluster that handle requests to this context.', '', '', '');
		$this->db['extSrcIP'] = new DATTR_HELP_ITEM("Type", 'Select from available IPs.', '', '', '');
		$this->db['externalredirect'] = new DATTR_HELP_ITEM("External Redirect", 'Specifies whether this redirect is external.  For external redirection, &quot;{ITEM=statuscode}&quot; may be specified and  &quot;&quot;{ITEM=destinationuri}&quot;&quot; can start either with &quot;/&quot; or &quot;http(s)://&quot;.  For internal redirection, &quot;&quot;{ITEM=destinationuri}&quot;&quot; must start with &quot;/&quot;.', '', '', '');
		$this->db['geoipDBCache'] = new DATTR_HELP_ITEM("DB Cache Type", ' Specifies what kind of cache mode should be used. Cache modes are: Standard, MemoryCache, CheckCache and IndexCache. MemoryCache is recommended and is the default.', '', '', '');
		$this->db['geoipDBFile'] = new DATTR_HELP_ITEM("DB File Path", ' Specifies the path to MaxMind GeoIP database.', '', '', '');
		$this->db['gracePeriod'] = new DATTR_HELP_ITEM("Grace Period (sec)", 'Specifies how long new connections can be accepted after the number of connections  established from one IP is over the &quot;&quot;{ITEM=softLimit}&quot;&quot;. Within this period, new connections  will be accepted if the total connections is still below the &quot;{ITEM=hardLimit}&quot;. After this  period has elapsed, if the number of connections still higher than the &quot;&quot;{ITEM=softLimit}&quot;&quot;,  then the offending IP will be blocked for the &quot;{ITEM=banPeriod}&quot;.', '[Performance & Security] Set to a proper number big enough for downloading  a complete page but low enough to prevent deliberate attacks.', '', '');
		$this->db['groupDBCacheTimeout'] = new DATTR_HELP_ITEM("Group DB Cache Timeout (secs)", 'Specifies how often the backend group database will be checked for changes.  For more detail please refer to &quot;{ITEM=userDBCacheTimeout}&quot;.', '', '', '');
		$this->db['groupDBMaxCacheSize'] = new DATTR_HELP_ITEM("Group DB Max Cache Size", 'Specifies the maximum cache size of the group database.', '[Performance] As a larger cache will consume more memory,  a higher value may or may not provide better performance. Set it to an appropriate size according  to your user database size and site usage.', '', '');
		$this->db['groupDB_attrGroupMember'] = new DATTR_HELP_ITEM("Group Member Attribute", 'Specifies the name of the &quot;Member&quot; attribute for a group record stored in an LDAP server. The default value is memberUid.', '', '', '');
		$this->db['gzipCompressLevel'] = new DATTR_HELP_ITEM("Compression Level (Dynamic Content)", 'Specifies the level of compression for dynamic content. Ranges  from 1 (lowest) to 9 (highest). The default is 2.', '[Performance] Higher compression level will use more memory and CPU cycles.  You can set it to a higher level if your machine has additional power. There is not much difference between 6 and 9, except 9 uses many more CPU cycles.', '', '');
		$this->db['haInterfaceId'] = new DATTR_HELP_ITEM("Name", 'A unique number that identifies one virtual interface.', '', '', '');
		$this->db['haNic'] = new DATTR_HELP_ITEM("NIC Name", 'Specifies the NIC name (such as eth0, eth1, etc..) that virtual IP will bind to, required for Linux platform.', '', '', '');
		$this->db['haRep_heartBeatInterval'] = new DATTR_HELP_ITEM("Heart Beat Interval (secs)", 'Sets the time interval that &quot;I am alive&quot; message will be sent.', '', '', '');
		$this->db['haRep_heartBeatTimeout'] = new DATTR_HELP_ITEM("Heart Beat Timeout (secs)", 'Sets the time interval after which, if &quot;I am alive&quot; message is not sent, replicator will be considered to have failed. Must be set higher than  <b>Heart Beat interval (secs)</b>.', '', '', '');
		$this->db['haRep_isGzipStream'] = new DATTR_HELP_ITEM("Is Gzip Stream (Change)", 'Set Gzip compression for replicator traffic.', '', '', '');
		$this->db['haRep_replCluster'] = new DATTR_HELP_ITEM("Replication Cluster", 'List of replicators, by their IP Address and port number, that are a part of this replication cluster.', '', '', '');
		$this->db['haRep_serverAddr'] = new DATTR_HELP_ITEM("Server Address", 'Local IP address and port to be used for replication.', '', '', '');
		$this->db['haVip'] = new DATTR_HELP_ITEM("Virtual IP", 'Specifies the virtual IP address of HA interface. It can be either IPv4 or IPv6 address, and has to be on the same subnet with the real IP address.', '', '', '');
		$this->db['haVipId'] = new DATTR_HELP_ITEM("Virtual IP ID", 'Specifies an ID of the virtual IP address. Please use an integer number between 1 and 10. VIP, VIP ID and VIP Token have to be same for the same HA group.', '', '', '');
		$this->db['haVipToken'] = new DATTR_HELP_ITEM("Virtual IP Token", 'Specifies a token of the virtual IP address, which is required to authenticate interface(carp/vrrp) advertisements. VIP, VIP ID and VIP Token  have to be same for the same HA group.', '', '', '');
		$this->db['hardLimit'] = new DATTR_HELP_ITEM("Connection Hard Limit", 'Specifies the maximum number of allowed concurrent connections from a single IP address.  This limit is always enforced and a client will never be able to exceed this limit.   HTTP/1.0 clients usually try to set up as many connections as they need to download embedded  content at the same time. This limit should be set high enough so that HTTP/1.0 clients can still  access the site.   Use &quot;{ITEM=softLimit}&quot; to set the desired connection limit. <br/><br/>The recommended limit is between 20 and 50 depending on the content of your web page and your traffic load.', '[Security] A lower number will enable serving more distinct clients.<br/>[Security] Trusted IPs or sub-networks are not affected. <br/>[Performance] Set to a high value when you are performing benchmark tests with a large number of concurrent client machines.', '', '');
		$this->db['inBandwidth'] = new DATTR_HELP_ITEM("Inbound Bandwidth (bytes/sec)", 'Specifies the maximum allowed incoming throughput from a single IP address regardless of number of connections established. The real bandwidth may end up being slightly higher than this setting for efficiency reasons.  Bandwidth is allocated in 1KB units. Set to 0 to disable throttling. Per-client bandwidth limits (bytes/sec) can be set at server- or virtual-host levels. Virtual host-level settings override server-level settings.', '[Security] Trusted IPs or sub-networks are not affected.', '', '');
		$this->db['inMemBufSize'] = new DATTR_HELP_ITEM("Max I/O Buffer Size", 'Specifies the maximum buffer size that is used to store a request body and its dynamically generated response. When this limit is reached, the server will start to create temporary swapping files under &quot;{ITEM=swappingDir}&quot;.', '[Performance] Set the buffer size large enough to accommodate all concurrent requests/replies to avoid memory to disk swapping. If there is frequent I/O activity to the swap directoy, by default /tmp/lshttpd/swap/, this buffer size is too low and LiteSpeed is swapping to disk.', '', '');
		$this->db['initTimeout'] = new DATTR_HELP_ITEM("Initial Request Timeout (secs)", 'Specifies the maximum time in seconds the load balancer will wait for the external  application to respond to the first request over a new established connection.  If the load balancer does not receive any data from the external application within this timeout limit, it will mark this connection as bad. This helps to identify communication problems with external applications as quickly as possible. If some requests take longer to  process, increase this limit to avoid 503 error messages.', '', '', '');
		$this->db['insertCookie'] = new DATTR_HELP_ITEM("Insert Tracking Cookie", 'Specify whether to insert a tracking cookie. The tracking cookie can be used to reconstruct session cache in case load balancer lost it.', '', '', '');
		$this->db['keepAliveTimeout'] = new DATTR_HELP_ITEM("Keep-Alive Timeout (secs)", 'Specifies the maximum idle time between requests from a keep-alive connection.  If no new request is received during this period of time, the connection will be closed.', '[Security & Performance] We recommend you to set the value just long enough to handle  all requests for a single page view. It is unnecessary to keep connections alive for an extended period of time. A smaller value can reduce idle connections, increase capacity to service more users, and guard against DoS attacks. 2-5 seconds is a  reasonable range for most applications. LiteSpeed is highly efficient in a non-keep-alive environment.', '', '');
		$this->db['keyFile'] = new DATTR_HELP_ITEM("Private Key File", 'Specifies the file name of the SSL private key file. The key file should not be encrypted.', '[Security] The private key file should be placed in a secured directory that  allows read-only access to the user the server runs as.', '', '');
		$this->db['lb_mode'] = new DATTR_HELP_ITEM("Mode", 'Specifies which mode the load balancer operates in, &quot;Stateless&quot; or &quot;Stateful&quot;.   &quot;Stateful&quot; mode track sessions associated with each back-end server. It also called &quot;Session Affinity&quot;.   &quot;Stateless&quot; mode does not care about sessions.   For the Layer 4 Load Balancer, if the Mode is “Stateful”, it will track the IP address of the client to extract previous sessions.', '', '', '');
		$this->db['lb_name'] = new DATTR_HELP_ITEM("Name", 'A unique name for a cluster.', '', '', '');
		$this->db['lb_type'] = new DATTR_HELP_ITEM("Type", 'Specifies the type of cluster.   &quot;Layer7&quot; HTTP load balancing, also known as application-level load balancing, parses HTTP requests  and distribute requests to servers based on different types of request contents.   &quot;Layer4&quot; load balancing is transport layer load balancing, such as TCP and UDP transport protocol.  It does not look at the content when select a backend server. In theory, Layer 4 load balancing supports every application type.', '', '', '');
		$this->db['listenerIP'] = new DATTR_HELP_ITEM("IP Address", 'Specifies the IP of this listener. All available IP addresses are listed.  IPv6 addresses are enclosed in &quot;[]&quot;. To listen on all IPv4 IP addresses, select  ANY. To listen on all IPv4 and IPv6 IP addresses, select [ANY]. In order to serve both IPv4 and IPv6 clients, an IPv4-mapped IPv6 address should be used instead of a plain IPv4 address. An IPv4-mapped IPv6 address is written as [::FFFF:x.x.x.x].', '[Security] If your machine has multiple IPs on different sub-networks,  you can select a specific IP to only allow traffic from the corresponding sub-network.', '', '');
		$this->db['listenerName'] = new DATTR_HELP_ITEM("Listener Name", 'A unique name for this listener.', '', '', '');
		$this->db['listenerPort'] = new DATTR_HELP_ITEM("Port", 'Specifies the TCP port of the listener. Only the super user (&quot;root&quot;) can use ports   lower than 1024. Port 80 is the default HTTP port. Port 443  is the default HTTPS port.', '', '', '');
		$this->db['listenerSecure'] = new DATTR_HELP_ITEM("Secure", 'Specifies whether this is a secure (SSL) listener.  For secure listeners, additional SSL settings need to be set properly.', '', '', '');
		$this->db['listenerType'] = new DATTR_HELP_ITEM("Type", 'Specifies the listener type.  <br/>An “http” listener treats requests as an HTTP Request, so it will parse the request data to use for the load balancing.  <br/>A “tcp” listener will not parse the request data. Rather, it will only parse the client’s IP address and port to do the load balancing.', '', '', '');
		$this->db['lmap'] = new DATTR_HELP_ITEM("Virtual Host Mappings", 'Virtual Host Mappings shows currently established mappings to virtual hosts from this listener.  The virtual host name is in brackets and is followed by the matching domain name(s) for this listener.', 'If a virtual host has not been loaded successfully (fatal errors in the  virtual host configuration), the mapping to that virtual host will not be displayed.', '', '');
		$this->db['lname'] = new DATTR_HELP_ITEM("Name - Listener", 'The unique name that identifies this listener. This is the  &quot;{ITEM=Listeners_Help#listenerName}&quot; you specified when setting up the listener.', '', '', '');
		$this->db['log_debugLevel'] = new DATTR_HELP_ITEM("Debug Level", 'Specifies the level of debug logging.  &quot;&quot;{ITEM=log_logLevel}&quot;&quot; must be set to DEBUG to use this feature.  Debug logging is disabled when &quot;Debug Level&quot; is set to NONE even if &quot;&quot;{ITEM=log_logLevel}&quot;&quot; is set to DEBUG.  &quot;{ITEM=ServerStat_Help#toggleDebugLog}&quot; can be used to control debug level on a live server without restarting.', '[Performance] Important! Always set this to NONE if you do not need detailed debug logging. Active debug logging will severely degrade service performance and potentially saturate disk space in a very short time. Debug logging includes detailed information for each request and response.<br/><br/>It&#039;s recommended to set Log Level to DEBUG and Debug Level to NONE.  These settings mean that you will not fill up your hard disk with debug logging,  but you will be able to use the &quot;{ITEM=ServerStat_Help#toggleDebugLog}&quot; action to control debug output.  This action can turn debug logging on and off on the fly, and is useful for debugging busy production servers.', '', '');
		$this->db['log_enableAioLog'] = new DATTR_HELP_ITEM("Enable AIO Logging", 'Specifies whether to enable AIO logging for server log and access log. If enabled, asynchronous I/O will be used for writing log messages.', 'Enabling AIO logging can help overall server performance when server I/O wait is high.', '', '');
		$this->db['log_enableStderrLog'] = new DATTR_HELP_ITEM("Enable stderr Log", 'Specifies whether to write to log when receiving stderr output from any process started by the server.  If enabled, stderr messages will be logged in the same directory as the server log with  the fixed name &quot;stderr.log&quot;. If disabled, all stderr output will be discarded.', 'Turn it on if you need to debug configured external applications: i.e. PHP, Ruby, Java, Python, Perl.', '', '');
		$this->db['log_fileName'] = new DATTR_HELP_ITEM("File Name", 'Specifies the path for the log file.', '[Performance] Place the log file on a separate disk.', '', '');
		$this->db['log_logLevel'] = new DATTR_HELP_ITEM("Log Level", 'Specifies the level of logging to include in your log file.  Available levels (from high to low) are: ERROR,  WARNING, NOTICE, INFO and DEBUG.  Only messages with level higher or equal to the current setting will be logged.', '[Performance] Using DEBUG log level does not have any performance impact, unless &quot;{ITEM=log_debugLevel}&quot; is set to a level other than NONE. It&#039;s recommended to set Log Level to DEBUG and Debug Level to NONE. These settings mean that you will not fill up your  hard disk with debug logging, but you will be able to use the &quot;{ITEM=ServerStat_Help#toggleDebugLog}&quot;  action to control debug output. This action can turn debug logging on and off on the fly,   and is useful for debugging busy production servers.', '', '');
		$this->db['log_rollingSize'] = new DATTR_HELP_ITEM("Rolling Size (bytes)", 'Specifies when the current log file needs to be rolled over, also known as log rotation.  When the file size is over the rollover limit, the active log file will be renamed  to log_name.mm_dd_yyyy(.sequence) in the same directory and a new active log file will be created. The actual size of the rotated log file once it is created will sometimes be a little bigger than  this size limit. Set to 0 to disable log rotation.', 'Append &quot;K&quot;, &quot;M&quot;, &quot;G&quot; to the number for kilo-, mega- and giga- bytes.', '', '');
		$this->db['lstatus'] = new DATTR_HELP_ITEM("Status - Listener", 'The current status of this listener. The status is either Running or Error.', 'If the listener is in the Error state, you can view the server log to find out why.', '', '');
		$this->db['mappedListeners'] = new DATTR_HELP_ITEM("Mapped Listeners", 'Specifies the names of all listeners that this template maps to. A listener-to-virtual host mapping for this template&#039;s member virtual hosts will be added to the listeners specified in this field.  This mapping will map listeners to virtual hosts based on the domain names  and aliases stipulated in the member virtual hosts&#039; individual configurations.', '', '', '');
		$this->db['mapped_L4_clusters'] = new DATTR_HELP_ITEM("Mapped Cluster", 'Specifies the cluster that the Layer 4 listener will use for load balancing.  The mapped cluster must be a Layer 4 cluster, which is predefined in &quot;Clusters&quot; tab.', '', '', '');
		$this->db['maxConnections'] = new DATTR_HELP_ITEM("Max Connections", 'Specifies the maximum number of concurrent connections that the server can accept.  This includes both plain TCP connections and SSL connections. Once the maximum concurrent connections limit is reached,  the server will close Keep-Alive connections when they complete active requests.', 'When the server is started by &quot;root&quot; user, the server will try to adjust the per-process file descriptor limits automatically, however, if this fails, you may need to increase this limit manually.', '', '');
		$this->db['maxConns'] = new DATTR_HELP_ITEM("Max Connections", 'Specifies the maximum number of concurrent connections that can be established  between the load balancer and an external application. This setting controls how  many requests can be processed concurrently by an external application,   however, the real limit also depends on the external application itself.  Setting this value higher will not help if the external application is not fast enough or cannot scale to a large number of concurrent requests.', '[Performance] Setting a high value does not directly translate to higher performance.  Setting the limit to a value that will not overload the external  application will provide the best performance/throughput.', '', '');
		$this->db['maxDynRespHeaderSize'] = new DATTR_HELP_ITEM("Max Dynamic Response Header Size (bytes)", 'Specifies the maximum header size of a dynamically generated response. Hard limit is 8KB.', '[Reliability & Performance] Set it reasonably low to help recognize bad  responses dynamically generated by external applications.', '', '');
		$this->db['maxDynRespSize'] = new DATTR_HELP_ITEM("Max Dynamic Response Body Size (bytes)", 'Specifies the maximum body size of a dynamically generated response. Hard limit is 2047MB.', '[Reliability & Performance] Set the limit reasonably low to help  identify bad responses. It is not uncommon to malformed scripts to contain an  infinite loop which leads to infinity-sized responses.', '', '');
		$this->db['maxKeepAliveReq'] = new DATTR_HELP_ITEM("Max Keep-Alive Requests", 'Specifies the maximum number of requests that can be served through a keep-alive (persistent)  session. The connection will be closed once this limit is reached. You can set this limit for each virtual host as well.', '[Performance] Set this to a reasonably high value. A value of &quot;1&quot; or &quot;0&quot; will disable keep-alive.', '', '');
		$this->db['maxReqBodySize'] = new DATTR_HELP_ITEM("Max Request Body Size (bytes)", 'Specifies the maximum size of a HTTP request body. For a 32Bit OS, 2GB is the hard limit.  For a 64Bit OS, it is virtually unlimited.', '[Security] To help prevent DoS attacks, try to constrain this limit to only what is really needed.  Your swapping space must have enough free space to accommodate this limit.', '', '');
		$this->db['maxReqHeaderSize'] = new DATTR_HELP_ITEM("Max Request Header Size (bytes)", 'Specifies the maximum size of a HTTP request header including request URL.  Hard limit is 16380 bytes.', '[Security & Performance] Set it reasonably low to reduce memory usage and  help identify bogus requests and DoS attacks.<br/>4-8K is big enough for most web sites.', '', '');
		$this->db['maxReqURLLen'] = new DATTR_HELP_ITEM("Max Request URL Length (bytes)", 'Specifies the maximum size of a request URL. URL is the full text address used to access a server resource including the query string. 8192 bytes is the hard limit.', '[Security & Performance] Set it reasonably low to reduce memory usage  and help identify bogus requests and DoS attacks. <br/>2-3K is big enough for most web sites unless the HTTP GET method is used with large query strings instead of POST.', '', '');
		$this->db['maxSSLConnections'] = new DATTR_HELP_ITEM("Max SSL Connections", 'Specifies the maximum number of concurrent SSL connections the server will accept.  Since total concurrent SSL and non-SSL connections cannot exceed the limit specified by  &quot;{ITEM=maxConnections}&quot;, the actual number of concurrent SSL connections allowed  must be lower than this limit.', '', '', '');
		$this->db['memberVHRoot'] = new DATTR_HELP_ITEM("Member Virtual Host Root", 'Specifies the root directory of this virtual host. If left blank, the default virtual host root for this template will be used.<br/><br/>Note: This is <b>NOT</b> the document root. It is recommended to place  all files related to the virtual host (like virtual host configuration,  log files, html files, CGI scripts, etc.) under this directory.   Virtual host root can be referred to as $VH_ROOT.', '', '', '');
		$this->db['noCacheDomain'] = new DATTR_HELP_ITEM("No Cache Domain", 'A comma-separated list of domains that will not be cached.', '', '', '');
		$this->db['noCacheUrl'] = new DATTR_HELP_ITEM("No Cache URL", 'A list of URL segments that will not be cached. Any URL that contains those listed segments will not be cached.  String matching is used. Regular expressions are not supported. You can add comments  by starting a line with &quot;#&quot;. This feature is only available at the server level.', '', '', '');
		$this->db['nodeAddresses'] = new DATTR_HELP_ITEM("Node Address List", 'Specifies addresses of nodes in this group. Attributes can be specified for a node are &quot;Destination IP&quot;, &quot;Destination Port&quot;, &quot;Node Tag&quot; and &quot;Source IP&quot;. Destination IP address is manditory, the other attributes are optional. Examples: 192.168.0.11, (node1)192.168.0.11, (node1)192.168.0.10->192.168.0.11:80, &quot;node1&quot; is the &quot;Node Tag&quot;, &quot;Node Tag&quot; is used to match &quot;JVM Route&quot;.', '', '', '');
		$this->db['ocspCACerts'] = new DATTR_HELP_ITEM("OCSP CA Certificates", 'Specifies the location of the file where OCSP certificate authority (CA)  certificates are stored. These certificates are used to check responses  from the OCSP responder (and make sure those responses are not spoofed or  otherwise compromised). This file should contain the whole certificate chain.  If this file does not contain the root certificate, LSWS should be able to find  the root certificate in your system directory without you adding it to the file,  but, if this validation fails, you should try adding your root certificate to this file. <br/><br/>This setting is optional. If this setting is not set, the server will automatically check &quot;{ITEM= CACertFile}&quot;.', '', '', '');
		$this->db['ocspRespMaxAge'] = new DATTR_HELP_ITEM("OCSP Response Max Age (secs)", 'This option sets the maximum allowable age for an OCSP response. If an OCSP response is older than this maximum age, the server will contact the OCSP responder for a new response. The default value is 86400. Maximum age can be turned off by setting this value to -1.', '', '', '');
		$this->db['ocspResponder'] = new DATTR_HELP_ITEM("OCSP Responder", 'Specifies the URL of the OCSP responder to be used.  If not set, the server will attempt to contact the OCSP responder  detailed in the certificate authority&#039;s issuer certificate.  Some issuer certificates may not have an OCSP responder URL specified.', '', '', 'http://rapidssl-ocsp.geotrust.com ');
		$this->db['outBandwidth'] = new DATTR_HELP_ITEM("Outbound Bandwidth (bytes/sec)", 'Specifies the maximum allowed outgoing throughput to a single IP address regardless of number of connections established. The real bandwidth may end up being slightly higher than this setting for efficiency reasons.  Bandwidth is allocated in 4KB units. Set to 0 to disable throttling. Per-client bandwidth limits (bytes/sec) can be set at server- or virtual-host levels. Virtual host-level settings override server-level settings.', '[Performance] Set the bandwidth in 8KB units for better performance.<br/>[Security] Trusted IPs or sub-networks are not affected.', '', '');
		$this->db['pcKeepAliveTimeout'] = new DATTR_HELP_ITEM("Keep Alive Timeout (secs)", 'Specifies the maximum time to keep an idle persistent connection open. When set to &quot;-1&quot;, the connection will never timeout. When set to greater than or equal to 0, the connection will be closed after this time in seconds has passed.', '', '', '');
		$this->db['persistConn'] = new DATTR_HELP_ITEM("Persistent Connection", 'Specifies whether to keep the connection open after a request has been processed. Persistent connections can increase performance,  but some FastCGI external applications do not support persistent connections  fully. The default is &quot;On&quot;.', '', '', '');
		$this->db['pid'] = new DATTR_HELP_ITEM("PID", 'PID (Process ID) of the current server process.', 'The PID will change each time the server is restarted.', '', '');
		$this->db['pingInterval'] = new DATTR_HELP_ITEM("Ping Interval", 'Specifies how often to ping a backend worker. For web server backend, a http request based on &quot;Ping URL&quot; will be sent. For other types of backends, an TCP connection attempt will be made to the backend server, if it succeed, the backend will be used as a good node.', '', '', '');
		$this->db['pingUrl'] = new DATTR_HELP_ITEM("Ping URL", 'Specifies a HTTP URL that is used to verify the availability of a web server backend worker, have no effect to other type of workers.', '', '', '');
		$this->db['rcvBufSize'] = new DATTR_HELP_ITEM("Receive Buffer Size (bytes)", 'The receiving buffer size of each TCP socket. Set to 0 to use the default  buffer size of the operating system. 65535 is the maximum allowed buffer size.', '[Performance] A large receive buffer will increase performance when processing  incoming requests with large payloads, i.e. file uploads.', '', '');
		$this->db['realm'] = new DATTR_HELP_ITEM("Realm", 'Specifies the authorization realm for this context. When specified,  a valid username and password must be provided in order to access this context.  &quot;{TBL=VHSecurity_Help#realms}&quot; are set up in the &quot;{PAGE=VHSecurity_Help}&quot; section.  This setting uses each realm&#039;s &quot;{ITEM=VHSecurity_Help#realmName}&quot;.', '', '', '');
		$this->db['realmName'] = new DATTR_HELP_ITEM("Realm Name", 'Specifies a unique name for the authorization realm.', '', '', '');
		$this->db['realmType'] = new DATTR_HELP_ITEM("DB Type", 'Specifies how user/group data is stored for an authorization realm. Currently, user/group data can be stored in flat files or on a LDAP server.', '', '', '');
		$this->db['realtimerpt'] = new DATTR_HELP_ITEM("Real-Time Statistics", 'The Real-Time Statistics link leads to a page with a real-time server status report. This is a convenient tool to monitor the system.    The report shows a snapshot of your server statistics. The refresh rate for this snapshot  is controlled by the Refresh Interval drop-down list in the upper righthand corner.   The report contains the following sections: <ul><li>Server Health shows the basic server statistics, uptime, load, and anti-DDoS blocked IPs.</li>   <li>Server lists current traffic throughput, connections, and requests statistics.</li>  <li>Virtual Host shows request processing statuses and external application statuses for each virtual host.</li>  <li>External Application lists the external applications currently running and their usage statistics.   The CGI daemon process lscgid is always running as an external application.</li> </ul>   Many of the rows in the Real-Time Statistics feature a graph icon.  Clicking on this icon will open a graph of that row&#039;s statistics updated in real-time.   In the Server section, next to Requests, there is a link labeled (Details).  This link takes you to the Requests Snapshot, where you can view detailed information  on which clients are making certain kinds of requests or which aspects of your site  are bottlenecking. The fields in the blue area allow you to filter the snapshot to isolate  certain parts of your server or look for clients that are performing certain actions.', '', '', '');
		$this->db['renegProtection'] = new DATTR_HELP_ITEM("SSL Renegotiation Protection", 'Specifies whether to enable SSL Renegotiation Protection to  defend against SSL handshake-based attacks. The default value is &quot;Yes&quot;.', '', '', '');
		$this->db['required'] = new DATTR_HELP_ITEM("Require (Authorized Users/Groups)", 'Specifies which user/group can access this context. This allows you to use  one user/group database (specified in &quot;{ITEM=realm}&quot;) across a number of contexts, but  only allow certain users/groups from that database to access this context.', '', '', '');
		$this->db['respBuffer'] = new DATTR_HELP_ITEM("Response Buffering", 'Specifies whether to buffer response received from external applications. If a &quot;nph-&quot; (Non-Parsed-Header) script is detected,  buffering is turned off for responses with full HTTP headers.', '', '', '');
		$this->db['restart'] = new DATTR_HELP_ITEM("Apply Changes/Graceful Restart", 'By clicking Graceful Restart, a new server process will be started.  For Graceful Restart, the old server process will only exit after all requests  to it have been finished (or the &quot;{ITEM=gracefulRestartTimeout}&quot; limit has been reached).   Configuration changes are applied at the next restart.  Graceful Restart will apply these changes without any server downtime.', 'Graceful restart takes less than 2 seconds to generate a new server process.', '', '');
		$this->db['retryTimeout'] = new DATTR_HELP_ITEM("Retry Timeout (secs)", 'Specifies the period of time that the load balancer waits before retrying an external application that had a prior communication problem.', '', '', '');
		$this->db['rewriteBase'] = new DATTR_HELP_ITEM("Rewrite Base", 'Specifies the base URL for rewrite rules.', '', '', '');
		$this->db['rewriteInherit'] = new DATTR_HELP_ITEM("Rewrite Inherit", 'Specifies whether to inherit rewrite rules from parent contexts. If rewrite is enabled and not inherited, rewrite base and rewrite rules defined in this context will be used.', '', '', '');
		$this->db['rewriteLogLevel'] = new DATTR_HELP_ITEM("Log Level", 'Specifies the log level of the rewrite engine debug output. Value ranges from 0 - 9, 0 will disable logging and 9 will produce the most detailed log. The log level of the server error log must be set to at least INFO for this option to take effect. This is useful when testing your rewrite rules.', '', '', '');
		$this->db['rewriteMapLocation'] = new DATTR_HELP_ITEM("Location", 'Specifies the location of the rewrite map using the syntax MapType:MapSource.<br/>LiteSpeed&#039;s rewrite engine supports three types of rewrite maps: <ul> 	<li>Standard Plain Text <blockquote> 		MapType: txt; <br/>		MapSource: file path to a valid plain ASCII	file.  </blockquote> 		Each line of this file should contain two elements separated  		by blank spaces. The first element is the key and the second 		element is the value. Comments can be added with a leading &quot;#&quot; 		sign.  	</li> 	<li>Randomized Plain Text <blockquote> 		MapType: rnd;<br/>		MapSource: file path of a valid plain ASCII	file. </blockquote> 		File format is similar to the Standard Plain Text file, except that the 		second element can contain multiple choices separated by a &quot;|&quot; 		sign and chosen randomly by the rewrite engine. 	</li> 	<li>Internal Function <blockquote> 	    MapType: int;<br/>		MapSource: Internal string function  </blockquote> 		4 functions are available: 		<ul> 			<li>toupper: converts lookup key to upper cases.</li> 			<li>tolower: converts lookup key to lower cases.</li> 			<li>escape: perform URL encoding on lookup key.</li> 			<li>unescape: perform URL decoding on lookup key.</li> 		</ul> 	</li> 	The following map types available in Apache 	have not been implemented in LiteSpeed: Hash File and External Rewriting Program. </ul> The implementation of LiteSpeed&#039;s rewrite engine follows the specifications of Apache&#039;s rewrite engine. For more details about rewrite map, please refer to <a href="http://httpd.apache.org/docs/mod/mod_rewrite.html" target="_blank">Apache&#039;s mod_rewrite document</a>.', '', '', '');
		$this->db['rewriteMapName'] = new DATTR_HELP_ITEM("Name", 'Specifies a unique name for the rewrite map at the virtual host  level. This name will be used by a mapping-reference in rewrite rules. When referencing this name, one of the following syntaxes should be used: <blockquote><code> $\{MapName:LookupKey\}<br/>$\{MapName:LookupKey|DefaultValue\} </code></blockquote><br/>The implementation of LiteSpeed&#039;s rewrite engine follows the specifications of Apache&#039;s rewrite engine. For more details about rewrite maps, please refer to <a href="http://httpd.apache.org/docs/mod/mod_rewrite.html" target="_blank">Apache&#039;s mod_rewrite document</a>.', '', '', '');
		$this->db['rewriteRules'] = new DATTR_HELP_ITEM("Rewrite Rules", 'Specifies a list of rewrite rules at virtual host or context level. A rewrite rule is comprised of one RewriteRule directive and optionally preceded by multiple RewriteCond directives.  <ul> <li>Each directive should take only one line. </li> <li>RewriteCond and RewriteRule follow Apache&#039;s rewrite directive syntax. Just copy and paste rewrite directives from your Apache configuration files.</li> <li>There are minor differences between LiteSpeed and Apache mod_rewrite implementation:  <ul><li>%\{LA-U:variable\} and %\{LA-F:variable\} are ignored by the LiteSpeed rewrite engine </li>   <li>two new server variables are added in the LiteSpeed rewrite engine:    %\{CURRENT_URI\} represents the current URI processed by the rewrite engine and %\{SCRIPT_NAME\} has the same  meaning as the corresponding CGI environment variable. </li> </ul></li> </ul> The implementation of LiteSpeed&#039;s rewrite engine follows the  specifications of Apache&#039;s rewrite engine. For more details about rewrite rules, please refer to <a href="http://httpd.apache.org/docs/mod/mod_rewrite.html" target="_blank">Apache&#039;s mod_rewrite document</a> and <a href="http://httpd.apache.org/docs/misc/rewriteguide.html" target="_blank">Apache&#039;s URL  rewriting guide</a>.', '', '', '');
		$this->db['ruleSetAction'] = new DATTR_HELP_ITEM("Rule Set Action", 'Specifies the actions that should be taken when a censoring rule in current ruleset is met. If not set, &quot;{ITEM=defaultAction}&quot; will be used.', '', '', '');
		$this->db['runningAs'] = new DATTR_HELP_ITEM("Running As", 'Specifies the user/group that the server process runs as.  This value is set during installation. In order to change it,  you must download the installation package and perform an upgrade via the command line.', '[Security] Server should not be run as a privileged user, such as &quot;root&quot;.  It is critical that the server is configured to run as an un-privileged user/group combination  that does not have login/shell access. A user and group of nobody is generally a good choice.', '', '');
		$this->db['scanPOST'] = new DATTR_HELP_ITEM("Scan Request Body", 'Specifies whether to check the body of a HTTP POST request.  Default is &quot;No&quot;.', '', '', '');
		$this->db['secAuditLog'] = new DATTR_HELP_ITEM("Security Audit Log", 'Specifies the path of the security audit log, which gives more detailed information.   This extra information can be useful if, for example, you wish to track the actions of   a particular user. Use &quot;{ITEM=secAuditLogEngine}&quot; to turn on the logging.', '', '', '');
		$this->db['secAuditLogEngine'] = new DATTR_HELP_ITEM("Enable Security Audit Log", 'Specifies whether to enable audit logging. This feature is equivalent to Apache&#039;s mod_security audit engine.  If it is enabled and &quot;{ITEM=secAuditLog}&quot; is set, detailed request information will be saved.', '', '', '');
		$this->db['servAction'] = new DATTR_HELP_ITEM("Actions", 'Six actions are available from this menu: Graceful Restart, Toggle Debug Logging, Server Log Viewer, Real-Time Statistics,  Version Manager, and Compile PHP.  <ul><li>&quot;{ITEM=restart}&quot; restarts server process gracefully without interrupting requests in process.</li> 	<li>&quot;{ITEM=toggleDebugLog}&quot; turns debug logging on or off.</li> 	<li>&quot;{ITEM=viewlog}&quot; allows you to view the server log through the log viewer.</li> 	<li>&quot;{ITEM=realtimerpt}&quot; allows you to view real-time server status.</li> 	<li>&quot;{ITEM=vermgr}&quot; allows you to download new versions of LSWS and switch between different versions. 	<li>Compile PHP allows you to compile PHP for LiteSpeed Web Server. </ul>', 'The shell utility $SERVER_ROOT/bin/lswsctrl can be used to control the server processes as well,  but requires a login shell.', '', '');
		$this->db['servChrootPath'] = new DATTR_HELP_ITEM("Chroot Path", ' Specifies the directory where the chroot environment is rooted.  Only &quot;root&quot; user can run load balancer in chroot mode. Whether to run in chroot mode is controlled by  &quot;{ITEM=enableChroot}&quot; option. The installer program will set up the initial chroot environment automatically.  This entry is read-only, and if you want to change it, please run the installer again from the command line. <br/><br/>In the chroot environment, the load balancer and its child processes cannot access file systems outside of  the chroot jail. Chroot is an advanced security feature and additional administration may be required to  make it work properly. All required executables, libraries, configuration files, and device files should be  recreated within the chroot jail.<br/><br/>As the root directory is changed, you need to pay special attention to path configuration  when an absolute path is used. A Unix domain socket or swapping directory is always relative  to the new root directory. All other path configurations are always relative to the real root.', '[security] Use chroot for better security.', '', '');
		$this->db['serverName'] = new DATTR_HELP_ITEM("Server Name", 'A unique name for this server. You can use $HOSTNAME as value.', '', '', '');
		$this->db['serverPriority'] = new DATTR_HELP_ITEM("Priority", 'Specifies priority of the server processes. Value ranges from -20 to 20. A lower number equates to a higher priority.', '[Performance] Usually a higher priority leads to slightly higher web performance on a busy server. Do not set priority higher than that of database processes.', '', '');
		$this->db['sessionExMethod'] = new DATTR_HELP_ITEM("Session Extraction", 'Specify how to extract session ID from request.   IP Address: Uses Client IP as session ID.   Basic Authentication: Uses username in the basic authentication as session ID.   Query String: Uses a Parameter in request query string as session ID.   Cookies: Uses a Parameter in cookie as session ID.   SSL Session: Uses SSL Session ID as session ID.   JVM Route: JVM Route is an extra section appended to a Servlet session ID, which used to identify servlet backend.  Example: JSESSIONID=344BA8002DE6FBE2QDF25.tomcat1 URL Path Parameter: Uses a URL Path Parameter as session ID.', 'For Layer 4 Load Balancers, only the IP Address extraction method will work.  For Layer 7 Load Balancers, any of the above methods will work.', '', '');
		$this->db['sessionId'] = new DATTR_HELP_ITEM("Session ID String", 'Specifies the Session ID string. The string is used to extract the session id value from cookie, query string and URL path parameter.', '', '', '');
		$this->db['sessionTimeout'] = new DATTR_HELP_ITEM("Session Timeout", 'Specify for how long a session will be valid, in seconds.', '', '', '');
		$this->db['shmDefaultDir'] = new DATTR_HELP_ITEM("Default SHM Directory", 'Changes shared memory&#039;s default directory to the specified path. If the directory does not exist, it will be created.  All SHM data will be stored in this directory unless otherwise specified.', '', '', '');
		$this->db['showVersionNumber'] = new DATTR_HELP_ITEM("Server Signature", 'Specifies whether to show the server signature and version number in the response header&#039;s &quot;Server&quot; value. There are three options: when set to Hide Version, only LiteSpeed is shown. When set to  Show Version, LiteSpeed and the version number are shown.  When set to Hide Full Header, the entire Server header will not be shown in the response header.', '[Security] Set to Hide Version if you do not wish to expose the server version number.', '', '');
		$this->db['smartKeepAlive'] = new DATTR_HELP_ITEM("Smart Keep-Alive", 'Specifies whether to turn on Smart Keep-Alive. This option is effective only if &quot;{ITEM=maxKeepAliveReq}&quot; is greater than 1. If enabled, you can also enable/disable it at the virtual host level. Smart keep-alive will only establish keep-alive connections for requests of JavaScript, CSS Style Sheet, and image files. For html pages, the connection will not be kept alive. This will help serve more users more efficiently. Normally a web page contains multiple images and scripts that will be cached by the browser after the initial request.  It is more efficient to send those non-html static files through a single keep-alive connection and have the text/html file sent through another non-keep-alive connection. This method will reduce idle connections and in turn increase the capacity to handle more concurrent requests and users.', '[Performance] Enable this for high-load web sites.', '', '');
		$this->db['sname'] = new DATTR_HELP_ITEM("Name - Server", 'The unique name that identifies this server. This is the  &quot;{ITEM=ServGeneral_Help#serverName}&quot; specified in the general configuration.', '', '', '');
		$this->db['sndBufSize'] = new DATTR_HELP_ITEM("Send Buffer Size (bytes)", 'The sending buffer size of each TCP socket. Set to 0 to use the default  buffer size of the operating system. 65535 is the maximum allowed buffer size.', '[Performance] If your web site serves large static files, increase the send buffer  size to improve performance.', '', '');
		$this->db['softLimit'] = new DATTR_HELP_ITEM("Connection Soft Limit", 'Specifies the soft limit of concurrent connections allowed from one IP.  This soft limit can be exceeded temporarily during &quot;&quot;{ITEM=gracePeriod}&quot;&quot; as long as  the number is below the &quot;{ITEM=hardLimit}&quot;, but Keep-Alive connections  will be closed as soon as possible until the number of connections is lower  than the limit. If number of connections is still over the limit after the  &quot;&quot;{ITEM=gracePeriod}&quot;&quot;, that IP will be blocked for the &quot;{ITEM=banPeriod}&quot;.<br/><br/>For example, if a page contains many small graphs, the browser may try to set up  many connections at same time, especially for HTTP/1.0 clients. You would want to allow  those connections for a short period.<br/><br/>HTTP/1.1 clients may also set up multiple connections to speed up downloading and SSL   requires separate connections from non-SSL connections. Make sure the limit is set properly,   as not to adversely affect normal service. The recommended limit is between 5 and 10.', '[Security] A lower number will enable serving more distinct clients.<br/>[Security] Trusted IPs or sub-networks are not affected. <br/>[Performance] Set to a high value when you are performing benchmark tests  with a large number of concurrent client machines.', '', '');
		$this->db['sourceIP'] = new DATTR_HELP_ITEM("Source IP", 'Specifies a Source IP for connecting to the backend worker. It can be overriden in worker configuration.', '', '', '');
		$this->db['sslDynCertsBaseDir'] = new DATTR_HELP_ITEM("SSL Dynamic Certificates Base Dir", 'Sets the base directory that dynamic ssl certificates will be stored in.  Certificates, keys, and CA Bundles are expected to be named &quot;cert&quot;, &quot;key&quot;, and &quot;ca&quot;, respectively.', '', '', '$SERVER_ROOT/certStore/');
		$this->db['sslDynCertsExpire'] = new DATTR_HELP_ITEM("SSL Dynamic Certificates Expire Time (secs)", 'Sets the expire time of a dynamically loaded certificate before it is invalidated.', '', '', '');
		$this->db['sslDynCertsNumLevels'] = new DATTR_HELP_ITEM("SSL Dynamic Certificates Levels", 'The number of directory levels the certificate files will be in. <br/><br/>This is similar to &quot;Session.save_path&quot; in <a>http://php.net/manual/en/session.configuration.php#ini.session.save-path</a>', '', '', 'If set to 2, &quot;example.com&quot; would be in BaseDir/e/x/example.com/');
		$this->db['sslDynCertsRefresh'] = new DATTR_HELP_ITEM("SSL Dynamic Certificates Refresh Time (secs)", 'Sets the refresh time of a dynamically loaded certificate before it will check for file validity. If  the file is removed after refresh time, the cert will be invalidated. If the file is updated after refresh time, the cert will be updated.', '', '', '');
		$this->db['sslEnableMultiCerts'] = new DATTR_HELP_ITEM("Enable Multiple SSL Certificates", 'Allows listeners/vhosts to set multiple SSL certificates.  If multiple certificates are enabled, the certificates/keys  are expected to follow a naming scheme.  If the cert is named server.crt, other possible cert names are server.crt.rsa, server.crt.dsa, server.crt.ecc. If  &quot;Not Set&quot;, defaults to &quot;No&quot;.<br/><br/> Must be set to &quot;Yes&quot; for LSLB multiprocessing to work correctly.', '', '', '');
		$this->db['sslProtocol'] = new DATTR_HELP_ITEM("Protocol Version", 'Specifies which version of SSL protocol will be used. You can choose from  SSL v3.0 and TLS v1.0. Since OpenSSL 1.0.1, TLS v1.1 and TLS v1.2 are also supported.', '', '', '');
		$this->db['sslSessionCache'] = new DATTR_HELP_ITEM("Enable Session Cache", 'Enables session id caching. If &quot;Not Set&quot;, defaults to  &quot;No&quot;. (Openssl Default)', '', '', '');
		$this->db['sslSessionCacheSize'] = new DATTR_HELP_ITEM("Session Cache Size (bytes)", 'Sets the maximum number of SSL session IDs to store in the cache. Default is 1,000,000.', '', '', '');
		$this->db['sslSessionCacheTimeout'] = new DATTR_HELP_ITEM("Session Cache Timeout (secs)", 'This value determines how long a session ID will be valid within the cache before a renegotiation is required. Default is 3,600.', '', '', '');
		$this->db['sslSessionTicketKeyFile'] = new DATTR_HELP_ITEM("SSL Session Ticket Key File", 'Allows the SSL Ticket Key to be created/maintained by an administrator. The file must be 48 bytes long. If this option is left empty, the load balancer  will generate and rotate its own set of keys. <br/><br/>IMPORTANT: To maintain forward secrecy, it is strongly recommended to change the key every <b>SSL Session Ticket Lifetime</b>  seconds. If this cannot be done, it is recommended to leave this field empty.', '', '', '');
		$this->db['sslSessionTicketLifetime'] = new DATTR_HELP_ITEM("SSL Session Ticket Lifetime (secs)", 'This value determines how long a session ticket will be valid before a renegotiation is required. Default is 3,600.', '', '', '');
		$this->db['sslSessionTickets'] = new DATTR_HELP_ITEM("Enable Session Tickets", 'Enables session tickets. If &quot;Not Set&quot;, the server will use openSSL&#039;s default ticket.', '', '', '');
		$this->db['statuscode'] = new DATTR_HELP_ITEM("Status Code", 'Specifies the response status code of the external redirection.  If the status code is between 300 and 399, &quot;{ITEM=destinationuri}&quot; can be specified.', '', '', '');
		$this->db['strategy'] = new DATTR_HELP_ITEM("Strategy", 'Select load balancing strategy from the list.   <ul> <li>The round-robin algorithm cycles through a list of backend Server instances in order.  <li>The least-load algorithm improves on the round-robin algorithm by taking into account current load for each server. <li>The least-session algorithm choose the server with fewest session associated. </ul>', '', '', '');
		$this->db['swappingDir'] = new DATTR_HELP_ITEM("Swapping Directory", 'Specifies the directory where the swapping files should be placed.  When the server is started in chroot mode, this directory is relative to the new root directory,  otherwise it is relative to the real root directory.<br/>LiteSpeed Load Balancer uses its own virtual memory  to reduce system memory usage. Virtual memory and disk swapping are used to store large request bodies and  dynamically generated responses. The swapping directory should be placed on a disk with enough space.', '[Performance] Place the swapping directory on a separate disk or increase Max I/O Buffer Size to eliminate swapping.', '', '');
		$this->db['templateFile'] = new DATTR_HELP_ITEM("Template File", 'Specifies the path to the configuration file of this template.  File must locate within $SERVER_ROOT/conf/templates/ with a &quot;.conf&quot; file name. If the file you designate does not exist, after you try to save the template  an error will appear with the link &quot;CLICK TO CREATE&quot;. This link will generate  a new empty template file. When you delete the template, the entry will be  removed from your configurations, but the actual template config file will not be deleted.', '', '', '');
		$this->db['templateName'] = new DATTR_HELP_ITEM("Template Name", 'A unique name for the template.', '', '', '');
		$this->db['templateVHAliases'] = new DATTR_HELP_ITEM("Aliases", 'Specifies alternate names for the virtual host. All possible hostnames and IP addresses should be added to this list. The wildcard characters * and ? are allowed in the name. Append :<port> for web sites not on port 80. <br/><br/>Aliases will be used in the following situations: <ol>   <li>To match the hostname in the Host header when processing a   request.</li>   <li>To populate domain name/alias configurations for add-ons    like FrontPage or AWstats.</li>   <li>To configure listener-to-virtual host mappings based on the virtual host template.</li> </ol>', '', '', '');
		$this->db['templateVHDomain'] = new DATTR_HELP_ITEM("Domain", 'Specifies the main domain name for this member virtual host.  If left blank, the virtual host name will be used. This should be a fully qualified domain name, but you can use an IP address as well.  It is recommended to append :<port> for web sites not on port 80.  For configurations containing domain names, this domain can be referenced  with variable $VH_DOMAIN. <br/><br/>This domain name will be used in the following situations: <ol>   <li>To match the hostname in the Host header when processing a   request.</li>   <li>To populate the domain name configurations for add-ons    like FrontPage or AWstats.</li>  <li>To configure listener-to-virtual host mappings based on the virtual host template.</li> </ol>', '', '', '');
		$this->db['templateVHName'] = new DATTR_HELP_ITEM("Virtual Host Name", 'A unique name for this virtual host. This name must be unique among all  template member virtual hosts and standalone virtual hosts. Inside a directory  path configuration, this name can be referenced by the variable $VH_NAME.<br/><br/>If a standalone virtual host with the same name is also configured, then the member virtual host configuration will be ignored.', '', '', '');
		$this->db['toggleDebugLog'] = new DATTR_HELP_ITEM("Toggle Debug Logging", 'Toggle Debug Logging toggles the value of &quot;&quot;{ITEM=ServGeneral_Help#log_debugLevel}&quot;&quot; between NONE and HIGH.  As debug logging has an impact on performance and can fill up the hard drive quickly, so &quot;&quot;{ITEM=ServGeneral_Help#log_debugLevel}&quot;&quot; should usually be set to NONE on a production server.  This feature can be used instead to turn debug logging on and off quickly  in order to debug a problem on a production server. Debug logging turned on or  off in this way will not change anything shown in your server configurations.', '&quot;{ITEM=toggleDebugLog}&quot; will only work if &quot;{ITEM=ServGeneral_Help#log_logLevel}&quot;  is set to DEBUG.  [Performance] Important! Debug logging includes detailed information for each  request and response. Active debug logging will severely degrade service performance and potentially saturate disk space in a very short time. This feature should only be  used for a short period of time when trying to diagnose server issues.', '', '');
		$this->db['uploadTmpDir'] = new DATTR_HELP_ITEM("Temporary File Path", 'Temporary directory where files being uploaded to server will be stored  while request body parser is working. Default value is /tmp.', '', '', '');
		$this->db['useIpInProxyHeader'] = new DATTR_HELP_ITEM("Use Client IP in Header", 'Specifies whether to use the IP address listed in the &quot;X-Forwarded-For&quot; HTTP request header for all IP address-related features, including connection/bandwidth throttling, access control, and IP geolocation.<br/><br/>This feature is useful if your web server is behind a load balancer or a proxy server. If you select &quot;Trusted IP Only&quot;, then X-Forwarded-For IP will be used only when the request is coming from trusted IPs defined in the server-level &quot;{ITEM=ServSecurity_Help#accessControl_allow}&quot;.', '', '', '');
		$this->db['userDBCacheTimeout'] = new DATTR_HELP_ITEM("User DB Cache Timeout (secs)", 'Specifies how often the backend user database will be checked for changes.   Every entry in the cache has a timestamp.  When cached data is older than the specified timeout, the backend database will be checked  for changes. If there is no change, the timestamp will be reset to the current time, otherwise  the new data will be loaded. Sevrer reload and graceful restart will clear the cache immediately.', '[Performance] If the backend database does not change very often,  set a longer timeout for better performance.', '', '');
		$this->db['userDBLocation'] = new DATTR_HELP_ITEM("User DB Location", 'Specifies the location of the user database.  For DB type Password File, it is the path to the flat file containing user/password definitions. You can edit this file through the WebAdmin console by clicking on the file name.<br/><br/>Each line of the user file contains a username followed by a colon,  followed by a crypt() encrypted password, optionally followed by a colon  and group names that user belongs to. Group names are delimitated by commas.  If group information is specified in the user database, then the group database will not be checked.<br/><br/>Example:<blockquote><code>john:HZ.U8kgjnMOHo:admin,user</code></blockquote><br/><br/>For DB type LDAP, it is the LDAP URL to query for the user information. For each valid user, the authentication data stored in the LDAP server should contain at least the user id and user password. One and only one record should be returned in the LDAP search request based on the this URL and username received in the HTTP Authentication header. &quot;$k&quot; must be specified in the filter part of the URL and it will be replaced with the username. The user password attribute must be returned in the query result. The attribute name of the user password is specified by &quot;{ITEM=userDB_attrPasswd}&quot;. Group information can be optionally specified by &quot;{ITEM=userDB_attrMemberOf}&quot;.<br/><br/>Example: At minimum, a user can be defined in LDAP with object classes: uidObject, simpleSecurityObject and organizationalRole. The following URL could be used: <br/><br/><blockquote><code>ldap://localhost/ou=UserDB,dc=example,dc=com???(&(objectClass=*)(uid=$k))</code></blockquote>', '[Security] It is recommended to store user password files outside of the document tree.  If a user password file has to be placed inside document tree, simply name it with a leading &quot;.ht&quot;  like .htuser to prevent it being served as a static file.  LiteSpeed Web Server  does not serve files prefixed with &quot;.ht&quot;.', '', '');
		$this->db['userDBMaxCacheSize'] = new DATTR_HELP_ITEM("User DB Max Cache Size", 'Specifies the maximum cache size of the user database.  Recently accessed user authentication data will be cached in memory  to provide maximum performance.', '[Performance] As a larger cache will consume more memory,  a higher value may or may not provide better performance. Set it to an appropriate size according  to your user database size and site usage.', '', '');
		$this->db['userDB_attrMemberOf'] = new DATTR_HELP_ITEM("Member-of Attribute", 'Specifies the name of the &quot;Member-of&quot; attribute for a user record  stored in an LDAP server. The default value is memberOf. The &quot;Member-of&quot;  attribute can be used to specify the group name that the user belongs to.', '', '', '');
		$this->db['userDB_attrPasswd'] = new DATTR_HELP_ITEM("Password Attribute", 'Specifies the name of the password attribute for a user record stored in an LDAP server. The default value is userPassword.', '', '', '');
		$this->db['vaction'] = new DATTR_HELP_ITEM("Actions - Virtual Host", 'This field shows buttons to disable, enable, or restart the virtual host.   Actions taken on one virtual host do not affect the rest of the web server.', 'It is good idea to disable a virtual host temporarily when updating its content.', '', '');
		$this->db['vdisable'] = new DATTR_HELP_ITEM("Disable", 'The Disable action stops a running virtual host. New requests will not be accepted, but requests being processed will finish as usual.', '', '', '');
		$this->db['venable'] = new DATTR_HELP_ITEM("Enable", 'The Enable action starts up a stopped virtual host.   This allows new requests to be accepted.', '', '', '');
		$this->db['verifyDepth'] = new DATTR_HELP_ITEM("Verify Depth", ' Specifies how deeply a certificate should be verified before  determining that the client does not have a valid certificate. The default is &quot;1&quot;.', '', '', '');
		$this->db['vermgr'] = new DATTR_HELP_ITEM("Version Management", 'Version Management (found by clicking on the the version number at  the top of the page) is a convenient tool to manage LSWS versions. It shows license info and information on all installed versions and available new releases.   <ul><li>If is a new version has been released on the LiteSpeed website, and &quot;{ITEM=ServGeneral_Help#autoUpdateInterval}&quot; is  enabled, the new version will be listed with a Download link. If &quot;{ITEM=ServGeneral_Help#autoUpdateDownloadPkg}&quot; is enabled, new versions will be automatically downloaded and the new version  will be listed with an Upgrade link. Upgrade  installs the new package and restarts the web server. </li> <li>You return to a previous version by clicking the Switch To link. This will restart the web server with that version.</li> <li>If you are sure that you no longer need an old installation, you can remove it by clicking the Delete link. This will permanently remove that copy.</li></ul>  Please note, service will not be interrupted during an upgrade or restart.', '', '', '');
		$this->db['vhMaxKeepAliveReq'] = new DATTR_HELP_ITEM("Max Keep-Alive Requests", 'Specifies the maximum requests that can be served through a keep-alive (persistent)  connection. Connections will be closed once this limit is reached. You can specify a different limit for different virtual hosts. This number cannot exceed the server-level &quot;{ITEM=ServTuning_Help#maxKeepAliveReq}&quot; limit.', '[Performance] Set to a reasonably high value. A value of &quot;1&quot; or less will  disable keep-alive connections.', '', '');
		$this->db['vhName'] = new DATTR_HELP_ITEM("Virtual Host Name", 'A unique name for a virtual host. It is recommended to use the virtual host&#039;s domain name as the Virtual Host Name.  Virtual Host Name can be referred to using the variable $VH_NAME.', '', '', '');
		$this->db['vhSmartKeepAlive'] = new DATTR_HELP_ITEM("Smart Keep-Alive", 'Specifies whether to turn on Smart Keep-Alive for this virtual host. This option is effective only if the server-level &quot;{ITEM=ServTuning_Help#smartKeepAlive}&quot; is enabled and &quot;{ITEM=vhMaxKeepAliveReq}&quot; is greater than 1.', '[Performance] Enable this for busy web sites.', '', '');
		$this->db['vhadminEmails'] = new DATTR_HELP_ITEM("Administrator Email", 'Specifies email address(es) of the administrator(s) of this virtual host.', '', '', '');
		$this->db['viewlog'] = new DATTR_HELP_ITEM("Server Log Viewer", 'The Server Log Viewer is a convenient tool for browsing the  current server log to check for errors or problems.  The log viewer  searches the server log file in blocks for the specified log level.    The default block size is 20KB. You can use the Begin,   End, Next, and Prev buttons to navigate a large log file.', 'The size of a dynamically generated page is limited by &quot;{ITEM=ServTuning_Help#maxDynRespSize}&quot;.   So if the block is too big, the page might be truncated.', '', '');
		$this->db['virtualHostName'] = new DATTR_HELP_ITEM("Virtual Host", 'Specifies the name of a virtual host.', '', '', '');
		$this->db['vname'] = new DATTR_HELP_ITEM("Name - Virtual Host", 'The unique name that identifies this virtual host. This is the &quot;{ITEM=VirtualHosts_Help#vhName}&quot;  you specified when setting up this virtual host.', '', '', '');
		$this->db['vreload'] = new DATTR_HELP_ITEM("Restart - Virtual Host", 'The Restart action causes the web server to load the newest configuration  for this virtual host. Requests being processed will finish with the old configuration.  The new configuration will only apply for new requests. All changes to a virtual host  can be applied on the fly this way.', '', '', '');
		$this->db['vstatus'] = new DATTR_HELP_ITEM("Status - Virtual Host", 'The current status of a virtual host.   The status can be: Running, Stopped, Restart Required,   or Running - Removed from Configuration.  <ul>     <li>Running means the virtual host is loaded and in service.</li>     <li>Stopped means the virtual host is loaded but not in service (disabled). </li>     <li> Restart Required means this is a newly added virtual host and          the server has not yet loaded its configuration. </li>     <li>Running - Removed from Configuration means the virtual host has been deleted      from the server&#039;s configuration but it is still in service. </li> </ul>', '', '', '');
		$this->db['workerGroupEnabled'] = new DATTR_HELP_ITEM("Enabled", 'Specifies whether to enable this worker group.', '', '', '');
		$this->db['workerName'] = new DATTR_HELP_ITEM("Name", 'A unique name for a group of worker.', '', '', '');
		$this->db['worker_type'] = new DATTR_HELP_ITEM("Type", 'Specifies type of workers. Worker type can be: FastCGI, LiteSpeed SAPI (LSAPI), Servlet Engine, Web Server.', '', '', '');
